
Do_an_2_DC_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800af30  0800af30  0000bf30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f4  0800b7f4  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f4  0800b7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7fc  0800b7fc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b800  0800b800  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b804  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  200001d4  0800b9d8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  0800b9d8  0000d6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1f0  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e2  00000000  00000000  0001b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a95  00000000  00000000  0001e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b8  00000000  00000000  0001eefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001011d  00000000  00000000  000381b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d179  00000000  00000000  000482d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d544b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  000d5490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000da5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af18 	.word	0x0800af18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800af18 	.word	0x0800af18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_f2uiz>:
 8001188:	0042      	lsls	r2, r0, #1
 800118a:	d20e      	bcs.n	80011aa <__aeabi_f2uiz+0x22>
 800118c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001190:	d30b      	bcc.n	80011aa <__aeabi_f2uiz+0x22>
 8001192:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001196:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800119a:	d409      	bmi.n	80011b0 <__aeabi_f2uiz+0x28>
 800119c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	fa23 f002 	lsr.w	r0, r3, r2
 80011a8:	4770      	bx	lr
 80011aa:	f04f 0000 	mov.w	r0, #0
 80011ae:	4770      	bx	lr
 80011b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011b4:	d101      	bne.n	80011ba <__aeabi_f2uiz+0x32>
 80011b6:	0242      	lsls	r2, r0, #9
 80011b8:	d102      	bne.n	80011c0 <__aeabi_f2uiz+0x38>
 80011ba:	f04f 30ff 	mov.w	r0, #4294967295
 80011be:	4770      	bx	lr
 80011c0:	f04f 0000 	mov.w	r0, #0
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_d2lz>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	2200      	movs	r2, #0
 80011cc:	2300      	movs	r3, #0
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f7ff fbf3 	bl	80009bc <__aeabi_dcmplt>
 80011d6:	b928      	cbnz	r0, 80011e4 <__aeabi_d2lz+0x1c>
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e0:	f000 b80a 	b.w	80011f8 <__aeabi_d2ulz>
 80011e4:	4620      	mov	r0, r4
 80011e6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011ea:	f000 f805 	bl	80011f8 <__aeabi_d2ulz>
 80011ee:	4240      	negs	r0, r0
 80011f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011f4:	bd38      	pop	{r3, r4, r5, pc}
 80011f6:	bf00      	nop

080011f8 <__aeabi_d2ulz>:
 80011f8:	b5d0      	push	{r4, r6, r7, lr}
 80011fa:	2200      	movs	r2, #0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <__aeabi_d2ulz+0x34>)
 80011fe:	4606      	mov	r6, r0
 8001200:	460f      	mov	r7, r1
 8001202:	f7ff f969 	bl	80004d8 <__aeabi_dmul>
 8001206:	f7ff fc3f 	bl	8000a88 <__aeabi_d2uiz>
 800120a:	4604      	mov	r4, r0
 800120c:	f7ff f8ea 	bl	80003e4 <__aeabi_ui2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <__aeabi_d2ulz+0x38>)
 8001214:	f7ff f960 	bl	80004d8 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7fe ffa2 	bl	8000168 <__aeabi_dsub>
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2uiz>
 8001228:	4621      	mov	r1, r4
 800122a:	bdd0      	pop	{r4, r6, r7, pc}
 800122c:	3df00000 	.word	0x3df00000
 8001230:	41f00000 	.word	0x41f00000
 8001234:	00000000 	.word	0x00000000

08001238 <readEncoder>:
#include "PID.h"
#include "Robot_control.h"

//TIM2,TIM3,TIM4,TIM1
void readEncoder(TIM_HandleTypeDef *TIM,Motor_measurement_command_typedef *M,Encoder_sign_enum_typedef s)
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	71fb      	strb	r3, [r7, #7]
	M->current_cnt=__HAL_TIM_GET_COUNTER(TIM);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	461a      	mov	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	611a      	str	r2, [r3, #16]

	M->current_delta=(float)(M->current_cnt-M->previous_cnt);
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fd3d 	bl	8000cdc <__aeabi_i2f>
 8001262:	4602      	mov	r2, r0
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	615a      	str	r2, [r3, #20]

	if(M->current_delta<-60000)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4956      	ldr	r1, [pc, #344]	@ (80013c8 <readEncoder+0x190>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff26 	bl	80010c0 <__aeabi_fcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <readEncoder+0x5a>
	{
		M->current_delta+=65536;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fc76 	bl	8000b74 <__addsf3>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	e013      	b.n	80012ba <readEncoder+0x82>
	}
	else if(M->current_delta>60000)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	494d      	ldr	r1, [pc, #308]	@ (80013cc <readEncoder+0x194>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff2f 	bl	80010fc <__aeabi_fcmpgt>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00a      	beq.n	80012ba <readEncoder+0x82>
	{
		M->current_delta-=65536;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc5f 	bl	8000b70 <__aeabi_fsub>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	615a      	str	r2, [r3, #20]
	}

	M->current_delta=0.2222*M->current_delta+(1-0.2222)*M->previous_delta;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f8b2 	bl	8000428 <__aeabi_f2d>
 80012c4:	a33a      	add	r3, pc, #232	@ (adr r3, 80013b0 <readEncoder+0x178>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff f905 	bl	80004d8 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4614      	mov	r4, r2
 80012d4:	461d      	mov	r5, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	a335      	add	r3, pc, #212	@ (adr r3, 80013b8 <readEncoder+0x180>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f8f7 	bl	80004d8 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ff3b 	bl	800016c <__adddf3>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fbe3 	bl	8000ac8 <__aeabi_d2f>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	615a      	str	r2, [r3, #20]
	M->previous_cnt=M->current_cnt;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60da      	str	r2, [r3, #12]
	M->previous_delta=M->current_delta;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	619a      	str	r2, [r3, #24]

	M->rpm_measurement=s*(M->current_delta*60)/(PULSE_PER_ROUND*2*SAMPLE_TIME);
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fcdd 	bl	8000cdc <__aeabi_i2f>
 8001322:	4604      	mov	r4, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4929      	ldr	r1, [pc, #164]	@ (80013d0 <readEncoder+0x198>)
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fd2a 	bl	8000d84 <__aeabi_fmul>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4620      	mov	r0, r4
 8001336:	f7ff fd25 	bl	8000d84 <__aeabi_fmul>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f873 	bl	8000428 <__aeabi_f2d>
 8001342:	a31f      	add	r3, pc, #124	@ (adr r3, 80013c0 <readEncoder+0x188>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f9f0 	bl	800072c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb8 	bl	8000ac8 <__aeabi_d2f>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	601a      	str	r2, [r3, #0]
	M->delta_round=s*M->current_delta/(PULSE_PER_ROUND*2);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fcba 	bl	8000cdc <__aeabi_i2f>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fd07 	bl	8000d84 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	4916      	ldr	r1, [pc, #88]	@ (80013d4 <readEncoder+0x19c>)
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fdb6 	bl	8000eec <__aeabi_fdiv>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	605a      	str	r2, [r3, #4]
	M->distance=M->delta_round*WHEEL_RADIUS*2;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4912      	ldr	r1, [pc, #72]	@ (80013d8 <readEncoder+0x1a0>)
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcf8 	bl	8000d84 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fbeb 	bl	8000b74 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	609a      	str	r2, [r3, #8]
}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	b295e9e2 	.word	0xb295e9e2
 80013b4:	3fcc710c 	.word	0x3fcc710c
 80013b8:	d35a8588 	.word	0xd35a8588
 80013bc:	3fe8e3bc 	.word	0x3fe8e3bc
 80013c0:	33333333 	.word	0x33333333
 80013c4:	405db333 	.word	0x405db333
 80013c8:	c76a6000 	.word	0xc76a6000
 80013cc:	476a6000 	.word	0x476a6000
 80013d0:	42700000 	.word	0x42700000
 80013d4:	45b9a000 	.word	0x45b9a000
 80013d8:	41200000 	.word	0x41200000

080013dc <motorControl1>:

/**
 * @note: excecute this function if we want to change rpm to our motor
 **/
void motorControl1(Motor_measurement_command_typedef *M,float rpm,Motor_direction_enum_typedef d)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	71fb      	strb	r3, [r7, #7]
	if(d==CONTROL_NORMAL)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d103      	bne.n	80013f8 <motorControl1+0x1c>
		M->current_command_rpm=rpm;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	621a      	str	r2, [r3, #32]
 80013f6:	e007      	b.n	8001408 <motorControl1+0x2c>
	else if(d==CONTROL_INVERT)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d104      	bne.n	8001408 <motorControl1+0x2c>
		M->current_command_rpm=-rpm;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	621a      	str	r2, [r3, #32]
	if((M->current_command_rpm>0)&&(M->previous_command_rpm>=0))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f04f 0100 	mov.w	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe73 	bl	80010fc <__aeabi_fcmpgt>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d032      	beq.n	8001482 <motorControl1+0xa6>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	f04f 0100 	mov.w	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe5f 	bl	80010e8 <__aeabi_fcmpge>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d028      	beq.n	8001482 <motorControl1+0xa6>
	{
		htim1.Instance->CCR1=(uint16_t)(M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	498e      	ldr	r1, [pc, #568]	@ (8001670 <motorControl1+0x294>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd58 	bl	8000eec <__aeabi_fdiv>
 800143c:	4603      	mov	r3, r0
 800143e:	498d      	ldr	r1, [pc, #564]	@ (8001674 <motorControl1+0x298>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fc9f 	bl	8000d84 <__aeabi_fmul>
 8001446:	4603      	mov	r3, r0
 8001448:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fb8f 	bl	8000b70 <__aeabi_fsub>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe97 	bl	8001188 <__aeabi_f2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	b29a      	uxth	r2, r3
 800145e:	4b86      	ldr	r3, [pc, #536]	@ (8001678 <motorControl1+0x29c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_SET);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	4883      	ldr	r0, [pc, #524]	@ (800167c <motorControl1+0x2a0>)
 800146e:	f002 f829 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4880      	ldr	r0, [pc, #512]	@ (800167c <motorControl1+0x2a0>)
 800147c:	f002 f822 	bl	80034c4 <HAL_GPIO_WritePin>
 8001480:	e0ee      	b.n	8001660 <motorControl1+0x284>
	}
	else if((M->current_command_rpm<0)&&(M->previous_command_rpm>0))
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe18 	bl	80010c0 <__aeabi_fcmplt>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d042      	beq.n	800151c <motorControl1+0x140>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f04f 0100 	mov.w	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fe2c 	bl	80010fc <__aeabi_fcmpgt>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d038      	beq.n	800151c <motorControl1+0x140>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4872      	ldr	r0, [pc, #456]	@ (800167c <motorControl1+0x2a0>)
 80014b4:	f002 f806 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014bc:	2200      	movs	r2, #0
 80014be:	4619      	mov	r1, r3
 80014c0:	486e      	ldr	r0, [pc, #440]	@ (800167c <motorControl1+0x2a0>)
 80014c2:	f001 ffff 	bl	80034c4 <HAL_GPIO_WritePin>
		htim1.Instance->CCR1=(uint16_t)(-M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80014ce:	4968      	ldr	r1, [pc, #416]	@ (8001670 <motorControl1+0x294>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fd0b 	bl	8000eec <__aeabi_fdiv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4966      	ldr	r1, [pc, #408]	@ (8001674 <motorControl1+0x298>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc52 	bl	8000d84 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fb42 	bl	8000b70 <__aeabi_fsub>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe4a 	bl	8001188 <__aeabi_f2uiz>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <motorControl1+0x29c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	485d      	ldr	r0, [pc, #372]	@ (800167c <motorControl1+0x2a0>)
 8001508:	f001 ffdc 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_SET);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	2201      	movs	r2, #1
 8001512:	4619      	mov	r1, r3
 8001514:	4859      	ldr	r0, [pc, #356]	@ (800167c <motorControl1+0x2a0>)
 8001516:	f001 ffd5 	bl	80034c4 <HAL_GPIO_WritePin>
 800151a:	e0a1      	b.n	8001660 <motorControl1+0x284>
	}
	else if((M->current_command_rpm>0)&&(M->previous_command_rpm<0))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f04f 0100 	mov.w	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fde9 	bl	80010fc <__aeabi_fcmpgt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d040      	beq.n	80015b2 <motorControl1+0x1d6>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	f04f 0100 	mov.w	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fdc1 	bl	80010c0 <__aeabi_fcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d036      	beq.n	80015b2 <motorControl1+0x1d6>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001548:	2200      	movs	r2, #0
 800154a:	4619      	mov	r1, r3
 800154c:	484b      	ldr	r0, [pc, #300]	@ (800167c <motorControl1+0x2a0>)
 800154e:	f001 ffb9 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001556:	2200      	movs	r2, #0
 8001558:	4619      	mov	r1, r3
 800155a:	4848      	ldr	r0, [pc, #288]	@ (800167c <motorControl1+0x2a0>)
 800155c:	f001 ffb2 	bl	80034c4 <HAL_GPIO_WritePin>
		htim1.Instance->CCR1=(uint16_t)(M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4942      	ldr	r1, [pc, #264]	@ (8001670 <motorControl1+0x294>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fcc0 	bl	8000eec <__aeabi_fdiv>
 800156c:	4603      	mov	r3, r0
 800156e:	4941      	ldr	r1, [pc, #260]	@ (8001674 <motorControl1+0x298>)
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fc07 	bl	8000d84 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff faf7 	bl	8000b70 <__aeabi_fsub>
 8001582:	4603      	mov	r3, r0
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fdff 	bl	8001188 <__aeabi_f2uiz>
 800158a:	4603      	mov	r3, r0
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b3a      	ldr	r3, [pc, #232]	@ (8001678 <motorControl1+0x29c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_SET);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001598:	2201      	movs	r2, #1
 800159a:	4619      	mov	r1, r3
 800159c:	4837      	ldr	r0, [pc, #220]	@ (800167c <motorControl1+0x2a0>)
 800159e:	f001 ff91 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4834      	ldr	r0, [pc, #208]	@ (800167c <motorControl1+0x2a0>)
 80015ac:	f001 ff8a 	bl	80034c4 <HAL_GPIO_WritePin>
 80015b0:	e056      	b.n	8001660 <motorControl1+0x284>
	}
	else if((M->current_command_rpm<0)&&(M->previous_command_rpm<=0))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	f04f 0100 	mov.w	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd80 	bl	80010c0 <__aeabi_fcmplt>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d034      	beq.n	8001630 <motorControl1+0x254>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f04f 0100 	mov.w	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd80 	bl	80010d4 <__aeabi_fcmple>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d02a      	beq.n	8001630 <motorControl1+0x254>
	{
		htim1.Instance->CCR1=(uint16_t)(-M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80015e2:	4923      	ldr	r1, [pc, #140]	@ (8001670 <motorControl1+0x294>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fc81 	bl	8000eec <__aeabi_fdiv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4921      	ldr	r1, [pc, #132]	@ (8001674 <motorControl1+0x298>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fbc8 	bl	8000d84 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fab8 	bl	8000b70 <__aeabi_fsub>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fdc0 	bl	8001188 <__aeabi_f2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <motorControl1+0x29c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	4818      	ldr	r0, [pc, #96]	@ (800167c <motorControl1+0x2a0>)
 800161c:	f001 ff52 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_SET);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001624:	2201      	movs	r2, #1
 8001626:	4619      	mov	r1, r3
 8001628:	4814      	ldr	r0, [pc, #80]	@ (800167c <motorControl1+0x2a0>)
 800162a:	f001 ff4b 	bl	80034c4 <HAL_GPIO_WritePin>
 800162e:	e017      	b.n	8001660 <motorControl1+0x284>
	}
	else if(M->current_command_rpm==0)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f04f 0100 	mov.w	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fd37 	bl	80010ac <__aeabi_fcmpeq>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00d      	beq.n	8001660 <motorControl1+0x284>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	480b      	ldr	r0, [pc, #44]	@ (800167c <motorControl1+0x2a0>)
 800164e:	f001 ff39 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001656:	2200      	movs	r2, #0
 8001658:	4619      	mov	r1, r3
 800165a:	4808      	ldr	r0, [pc, #32]	@ (800167c <motorControl1+0x2a0>)
 800165c:	f001 ff32 	bl	80034c4 <HAL_GPIO_WritePin>
	}
	M->previous_command_rpm=M->current_command_rpm;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	61da      	str	r2, [r3, #28]
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	42140000 	.word	0x42140000
 8001674:	447a0000 	.word	0x447a0000
 8001678:	200001f0 	.word	0x200001f0
 800167c:	40010c00 	.word	0x40010c00

08001680 <motorControl2>:

void motorControl2(Motor_measurement_command_typedef *M,float rpm,Motor_direction_enum_typedef d)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	4613      	mov	r3, r2
 800168c:	71fb      	strb	r3, [r7, #7]
	if(d==CONTROL_NORMAL)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <motorControl2+0x1c>
			M->current_command_rpm=rpm;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	621a      	str	r2, [r3, #32]
 800169a:	e007      	b.n	80016ac <motorControl2+0x2c>
	else if(d==CONTROL_INVERT)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d104      	bne.n	80016ac <motorControl2+0x2c>
			M->current_command_rpm=-rpm;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	621a      	str	r2, [r3, #32]
	if((M->current_command_rpm>0)&&(M->previous_command_rpm>=0))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fd21 	bl	80010fc <__aeabi_fcmpgt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d032      	beq.n	8001726 <motorControl2+0xa6>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd0d 	bl	80010e8 <__aeabi_fcmpge>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d028      	beq.n	8001726 <motorControl2+0xa6>
	{
		htim1.Instance->CCR2=(uint16_t)(M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	498e      	ldr	r1, [pc, #568]	@ (8001914 <motorControl2+0x294>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc06 	bl	8000eec <__aeabi_fdiv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	498d      	ldr	r1, [pc, #564]	@ (8001918 <motorControl2+0x298>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb4d 	bl	8000d84 <__aeabi_fmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fa3d 	bl	8000b70 <__aeabi_fsub>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd45 	bl	8001188 <__aeabi_f2uiz>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b86      	ldr	r3, [pc, #536]	@ (800191c <motorControl2+0x29c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_SET);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	4883      	ldr	r0, [pc, #524]	@ (8001920 <motorControl2+0x2a0>)
 8001712:	f001 fed7 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4880      	ldr	r0, [pc, #512]	@ (8001920 <motorControl2+0x2a0>)
 8001720:	f001 fed0 	bl	80034c4 <HAL_GPIO_WritePin>
 8001724:	e0ee      	b.n	8001904 <motorControl2+0x284>
	}
	else if((M->current_command_rpm<0)&&(M->previous_command_rpm>0))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fcc6 	bl	80010c0 <__aeabi_fcmplt>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d042      	beq.n	80017c0 <motorControl2+0x140>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fcda 	bl	80010fc <__aeabi_fcmpgt>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d038      	beq.n	80017c0 <motorControl2+0x140>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001752:	2200      	movs	r2, #0
 8001754:	4619      	mov	r1, r3
 8001756:	4872      	ldr	r0, [pc, #456]	@ (8001920 <motorControl2+0x2a0>)
 8001758:	f001 feb4 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	486e      	ldr	r0, [pc, #440]	@ (8001920 <motorControl2+0x2a0>)
 8001766:	f001 fead 	bl	80034c4 <HAL_GPIO_WritePin>
		htim1.Instance->CCR2=(uint16_t)(-M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001772:	4968      	ldr	r1, [pc, #416]	@ (8001914 <motorControl2+0x294>)
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fbb9 	bl	8000eec <__aeabi_fdiv>
 800177a:	4603      	mov	r3, r0
 800177c:	4966      	ldr	r1, [pc, #408]	@ (8001918 <motorControl2+0x298>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fb00 	bl	8000d84 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f9f0 	bl	8000b70 <__aeabi_fsub>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fcf8 	bl	8001188 <__aeabi_f2uiz>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <motorControl2+0x29c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	485d      	ldr	r0, [pc, #372]	@ (8001920 <motorControl2+0x2a0>)
 80017ac:	f001 fe8a 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_SET);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	2201      	movs	r2, #1
 80017b6:	4619      	mov	r1, r3
 80017b8:	4859      	ldr	r0, [pc, #356]	@ (8001920 <motorControl2+0x2a0>)
 80017ba:	f001 fe83 	bl	80034c4 <HAL_GPIO_WritePin>
 80017be:	e0a1      	b.n	8001904 <motorControl2+0x284>
	}
	else if((M->current_command_rpm>0)&&(M->previous_command_rpm<0))
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc97 	bl	80010fc <__aeabi_fcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d040      	beq.n	8001856 <motorControl2+0x1d6>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc6f 	bl	80010c0 <__aeabi_fcmplt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d036      	beq.n	8001856 <motorControl2+0x1d6>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	484b      	ldr	r0, [pc, #300]	@ (8001920 <motorControl2+0x2a0>)
 80017f2:	f001 fe67 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017fa:	2200      	movs	r2, #0
 80017fc:	4619      	mov	r1, r3
 80017fe:	4848      	ldr	r0, [pc, #288]	@ (8001920 <motorControl2+0x2a0>)
 8001800:	f001 fe60 	bl	80034c4 <HAL_GPIO_WritePin>
		htim1.Instance->CCR2=(uint16_t)(M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4942      	ldr	r1, [pc, #264]	@ (8001914 <motorControl2+0x294>)
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fb6e 	bl	8000eec <__aeabi_fdiv>
 8001810:	4603      	mov	r3, r0
 8001812:	4941      	ldr	r1, [pc, #260]	@ (8001918 <motorControl2+0x298>)
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fab5 	bl	8000d84 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f9a5 	bl	8000b70 <__aeabi_fsub>
 8001826:	4603      	mov	r3, r0
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fcad 	bl	8001188 <__aeabi_f2uiz>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <motorControl2+0x29c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_SET);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183c:	2201      	movs	r2, #1
 800183e:	4619      	mov	r1, r3
 8001840:	4837      	ldr	r0, [pc, #220]	@ (8001920 <motorControl2+0x2a0>)
 8001842:	f001 fe3f 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	4834      	ldr	r0, [pc, #208]	@ (8001920 <motorControl2+0x2a0>)
 8001850:	f001 fe38 	bl	80034c4 <HAL_GPIO_WritePin>
 8001854:	e056      	b.n	8001904 <motorControl2+0x284>
	}
	else if((M->current_command_rpm<0)&&(M->previous_command_rpm<=0))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fc2e 	bl	80010c0 <__aeabi_fcmplt>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d034      	beq.n	80018d4 <motorControl2+0x254>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc2e 	bl	80010d4 <__aeabi_fcmple>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02a      	beq.n	80018d4 <motorControl2+0x254>
	{
		htim1.Instance->CCR2=(uint16_t)(-M->current_command_rpm/MAX_RPM*MAX_CCR_VALUE);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001886:	4923      	ldr	r1, [pc, #140]	@ (8001914 <motorControl2+0x294>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb2f 	bl	8000eec <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
 8001890:	4921      	ldr	r1, [pc, #132]	@ (8001918 <motorControl2+0x298>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa76 	bl	8000d84 <__aeabi_fmul>
 8001898:	4603      	mov	r3, r0
 800189a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f966 	bl	8000b70 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc6e 	bl	8001188 <__aeabi_f2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <motorControl2+0x29c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ba:	2200      	movs	r2, #0
 80018bc:	4619      	mov	r1, r3
 80018be:	4818      	ldr	r0, [pc, #96]	@ (8001920 <motorControl2+0x2a0>)
 80018c0:	f001 fe00 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_SET);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c8:	2201      	movs	r2, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4814      	ldr	r0, [pc, #80]	@ (8001920 <motorControl2+0x2a0>)
 80018ce:	f001 fdf9 	bl	80034c4 <HAL_GPIO_WritePin>
 80018d2:	e017      	b.n	8001904 <motorControl2+0x284>
	}
	else if(M->current_command_rpm==0)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fbe5 	bl	80010ac <__aeabi_fcmpeq>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <motorControl2+0x284>
	{
		HAL_GPIO_WritePin(GPIOB, M->IN1, GPIO_PIN_RESET);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	480b      	ldr	r0, [pc, #44]	@ (8001920 <motorControl2+0x2a0>)
 80018f2:	f001 fde7 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M->IN2, GPIO_PIN_RESET);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fa:	2200      	movs	r2, #0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4808      	ldr	r0, [pc, #32]	@ (8001920 <motorControl2+0x2a0>)
 8001900:	f001 fde0 	bl	80034c4 <HAL_GPIO_WritePin>
	}
	M->previous_command_rpm=M->current_command_rpm;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a1a      	ldr	r2, [r3, #32]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	61da      	str	r2, [r3, #28]
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	42140000 	.word	0x42140000
 8001918:	447a0000 	.word	0x447a0000
 800191c:	200001f0 	.word	0x200001f0
 8001920:	40010c00 	.word	0x40010c00

08001924 <pidMotorControl>:
 * 
**/
void pidMotorControl(TIM_HandleTypeDef *TIM,Motor_measurement_command_typedef *Motor,
		PIDControllers_Typedef *pid,Motor_pwm_pin_enum_typedef Motor_num,
		Motor_direction_enum_typedef direction)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	70fb      	strb	r3, [r7, #3]
	if(direction==CONTROL_NORMAL)
 8001932:	7e3b      	ldrb	r3, [r7, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <pidMotorControl+0x30>
	{
		readEncoder(TIM, Motor,READ_NORMAL);
 8001938:	2201      	movs	r2, #1
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fc7b 	bl	8001238 <readEncoder>
		pidUpdate(pid, Motor->rpm_measurement, Motor->expected_rpm);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	461a      	mov	r2, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f875 	bl	8001a3c <pidUpdate>
 8001952:	e010      	b.n	8001976 <pidMotorControl+0x52>
	}

	else if(direction==CONTROL_INVERT)
 8001954:	7e3b      	ldrb	r3, [r7, #24]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10d      	bne.n	8001976 <pidMotorControl+0x52>
	{
		readEncoder(TIM, Motor, READ_MINUS);
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff fc69 	bl	8001238 <readEncoder>
		pidUpdate(pid, Motor->rpm_measurement,Motor->expected_rpm);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	6819      	ldr	r1, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	461a      	mov	r2, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f863 	bl	8001a3c <pidUpdate>
	}
	if(Motor_num==MOTOR_1)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <pidMotorControl+0x68>
	{
		motorControl1(Motor, pid->u, direction);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001980:	7e3a      	ldrb	r2, [r7, #24]
 8001982:	4619      	mov	r1, r3
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f7ff fd29 	bl	80013dc <motorControl1>
	else if(Motor_num==MOTOR_2)
	{
		motorControl2(Motor, pid->u, direction);
	}

}
 800198a:	e009      	b.n	80019a0 <pidMotorControl+0x7c>
	else if(Motor_num==MOTOR_2)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d106      	bne.n	80019a0 <pidMotorControl+0x7c>
		motorControl2(Motor, pid->u, direction);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001996:	7e3a      	ldrb	r2, [r7, #24]
 8001998:	4619      	mov	r1, r3
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f7ff fe70 	bl	8001680 <motorControl2>
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <pidControllersInit>:
#include <stdio.h>
#include <stdint.h>
#include "PID.h"

void pidControllersInit(PIDControllers_Typedef* pid,float Kp,float Ki,float Kd,float to,float T,float satuaration)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	pid->Kp=Kp;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	601a      	str	r2, [r3, #0]
	pid->Ki=Ki;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	605a      	str	r2, [r3, #4]
	pid->Kd=Kd;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	609a      	str	r2, [r3, #8]
	pid->to=to;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	60da      	str	r2, [r3, #12]
	pid->T=T;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	611a      	str	r2, [r3, #16]

	pid->et=0;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
	pid->ek1=0;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]

	pid->eKit=0;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
	pid->eKik1=0;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]

	pid->propotion=0;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=0;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->deviator=0;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->integratork1=0;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=0;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	635a      	str	r2, [r3, #52]	@ 0x34

	pid->saturation=satuaration;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40

	pid->measurement=0;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38

	pid->u=0;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <pidUpdate>:

float pidUpdate(PIDControllers_Typedef* pid,float measurement,float input)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	//get pid input
	pid->expected=input;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pid->measurement=measurement;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	639a      	str	r2, [r3, #56]	@ 0x38
	pid->et=pid->expected-pid->measurement;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4610      	mov	r0, r2
 8001a60:	f7ff f886 	bl	8000b70 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	615a      	str	r2, [r3, #20]
	// clamping section
	if(pid->u!=pid->v)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f7ff fb18 	bl	80010ac <__aeabi_fcmpeq>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <pidUpdate+0x50>
	{
		pid->uv=1;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8001a8a:	e003      	b.n	8001a94 <pidUpdate+0x58>
	}
	else
	{
		pid->uv=0;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	}

	if((pid->et*pid->v)>=0)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	695a      	ldr	r2, [r3, #20]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff f970 	bl	8000d84 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f04f 0100 	mov.w	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fb1c 	bl	80010e8 <__aeabi_fcmpge>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <pidUpdate+0x84>
	{
		pid->ev=1;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8001abe:	e003      	b.n	8001ac8 <pidUpdate+0x8c>
	}
	else
	{
		pid->ev=0;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	}

	if((pid->uv&pid->ev)==0)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d108      	bne.n	8001aee <pidUpdate+0xb2>
	{
		pid->eKit=pid->et;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	61da      	str	r2, [r3, #28]
		pid->eKik1=pid->ek1;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	621a      	str	r2, [r3, #32]
 8001aec:	e007      	b.n	8001afe <pidUpdate+0xc2>
	}
	else
	{
		pid->eKik1=0;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
		pid->eKit=0;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
	}
	//PID calculation
	pid->propotion=pid->Kp*pid->et;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4610      	mov	r0, r2
 8001b0a:	f7ff f93b 	bl	8000d84 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->integrator=((pid->Ki*pid->T)/2)*(pid->eKit+pid->eKik1)+pid->integratork1;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f92f 	bl	8000d84 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff f9dd 	bl	8000eec <__aeabi_fdiv>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461c      	mov	r4, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4610      	mov	r0, r2
 8001b42:	f7ff f817 	bl	8000b74 <__addsf3>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff f91a 	bl	8000d84 <__aeabi_fmul>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f7ff f80a 	bl	8000b74 <__addsf3>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f800 	bl	8000b74 <__addsf3>
 8001b74:	4603      	mov	r3, r0
 8001b76:	461c      	mov	r4, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fff8 	bl	8000b74 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7fe fff0 	bl	8000b74 <__addsf3>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff f9a7 	bl	8000eec <__aeabi_fdiv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461c      	mov	r4, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4610      	mov	r0, r2
 8001bae:	f7fe ffdf 	bl	8000b70 <__aeabi_fsub>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff f8e4 	bl	8000d84 <__aeabi_fmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe ffd4 	bl	8000b74 <__addsf3>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f7fe ffca 	bl	8000b70 <__aeabi_fsub>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461d      	mov	r5, r3
			/(2*pid->to+pid->T))*pid->deviatork1;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ffc4 	bl	8000b74 <__addsf3>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f7fe ffbc 	bl	8000b74 <__addsf3>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff f973 	bl	8000eec <__aeabi_fdiv>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f7ff f8b7 	bl	8000d84 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
	pid->deviator=((2*pid->Kd)/(2*pid->to+pid->T))*(pid->et-pid->ek1)+((2*pid->to-pid->T)
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7fe ffaa 	bl	8000b74 <__addsf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->ek1=pid->et;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	619a      	str	r2, [r3, #24]
	pid->integratork1=pid->integrator;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->deviatork1=pid->deviator;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->v=pid->propotion+pid->integrator+pid->deviator;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f7fe ff92 	bl	8000b74 <__addsf3>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f7fe ff8a 	bl	8000b74 <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	645a      	str	r2, [r3, #68]	@ 0x44

	//saturation
	if(pid->v>pid->saturation)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff fa42 	bl	80010fc <__aeabi_fcmpgt>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <pidUpdate+0x24c>
	{
		pid->u=pid->saturation;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c86:	e017      	b.n	8001cb8 <pidUpdate+0x27c>
	}
	else if(pid->v<(-pid->saturation))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f7ff fa12 	bl	80010c0 <__aeabi_fcmplt>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <pidUpdate+0x274>
	{
		pid->u=-pid->saturation;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	649a      	str	r2, [r3, #72]	@ 0x48
 8001cae:	e003      	b.n	8001cb8 <pidUpdate+0x27c>
	}
	else
	{
		pid->u=pid->v;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	return pid->u;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}

08001cc4 <calculatePredictionValue>:

/*
 *
 */
void calculatePredictionValue(Robot_model_typedef *R,float sl,float sr)
{
 8001cc4:	b5b0      	push	{r4, r5, r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	R->sl=sl;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	605a      	str	r2, [r3, #4]
	R->sr=sr;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]
	R->delta_theta=(R->sr-R->sl)/(2*RW_DISTANCE_WHEEL_CENTER);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7fe ff42 	bl	8000b70 <__aeabi_fsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	493e      	ldr	r1, [pc, #248]	@ (8001de8 <calculatePredictionValue+0x124>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f8fb 	bl	8000eec <__aeabi_fdiv>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
	R->s=(R->sr+R->sl)/2;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f7fe ff33 	bl	8000b74 <__addsf3>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f8e9 	bl	8000eec <__aeabi_fdiv>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	601a      	str	r2, [r3, #0]
	R->delta_x=R->s*cosf(R->theta_prediction+R->delta_theta/2);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681c      	ldr	r4, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	695d      	ldr	r5, [r3, #20]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f8da 	bl	8000eec <__aeabi_fdiv>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f7fe ff19 	bl	8000b74 <__addsf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f008 fae7 	bl	800a318 <cosf>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff f818 	bl	8000d84 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
	R->delta_y=R->s*sinf(R->theta_prediction+R->delta_theta/2);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681c      	ldr	r4, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695d      	ldr	r5, [r3, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f8bd 	bl	8000eec <__aeabi_fdiv>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4628      	mov	r0, r5
 8001d78:	f7fe fefc 	bl	8000b74 <__addsf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f008 fb02 	bl	800a388 <sinf>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7fe fffb 	bl	8000d84 <__aeabi_fmul>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461a      	mov	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
	R->x_prediction=R->x_prediction+R->delta_x;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4610      	mov	r0, r2
 8001da2:	f7fe fee7 	bl	8000b74 <__addsf3>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	60da      	str	r2, [r3, #12]
	R->y_prediction=R->y_prediction+R->delta_y;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7fe fedb 	bl	8000b74 <__addsf3>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
	R->theta_prediction=R->theta_prediction+R->delta_theta;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f7fe fecf 	bl	8000b74 <__addsf3>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	615a      	str	r2, [r3, #20]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	41a00000 	.word	0x41a00000

08001dec <PCFrameReceiveHandler>:
 * @param R The pointer of typedef struct that store robot calculation data
 * @param M1 The pointer of typedef struct that store first motor information
 * @param M2 The pointer of typedef struct that store second motor information
**/
void PCFrameReceiveHandler(uint8_t *rx_buffer,uint8_t *tx_buffer,Robot_model_typedef *R,Motor_measurement_command_typedef *M1,Motor_measurement_command_typedef *M2)
{
 8001dec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df0:	b08a      	sub	sp, #40	@ 0x28
 8001df2:	af04      	add	r7, sp, #16
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
	if(*rx_buffer==UPDATE_PREDICTION_CHARACTER)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b52      	cmp	r3, #82	@ 0x52
 8001e02:	d173      	bne.n	8001eec <PCFrameReceiveHandler+0x100>
	{
		if(rx_buffer[recieve_index]!=END_CORRECTION_DATA_CHARACTER)
 8001e04:	4b50      	ldr	r3, [pc, #320]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b0a      	cmp	r3, #10
 8001e12:	d010      	beq.n	8001e36 <PCFrameReceiveHandler+0x4a>
		{
			recieve_index++;
 8001e14:	4b4c      	ldr	r3, [pc, #304]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, rx_buffer+recieve_index, 1);
 8001e20:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4413      	add	r3, r2
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4847      	ldr	r0, [pc, #284]	@ (8001f4c <PCFrameReceiveHandler+0x160>)
 8001e30:	f003 f91e 	bl	8005070 <HAL_UART_Receive_IT>
	else if(*rx_buffer==SEND_ODOMETRY_DATA_COMMAND_CHARACTER)
	{
		sprintf((char*)tx_buffer,"%.3f_%.3f_%.3f\n",R->x_prediction,R->y_prediction,R->theta_prediction);
		HAL_UART_Transmit(&huart2, tx_buffer,30,1);
	}
}
 8001e34:	e083      	b.n	8001f3e <PCFrameReceiveHandler+0x152>
			rx_buffer[recieve_index]=0;
 8001e36:	4b44      	ldr	r3, [pc, #272]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
			char *temp=strtok((char*)(rx_buffer+1),SPLIT_CORRECTION_DATA_CHARACTER);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4941      	ldr	r1, [pc, #260]	@ (8001f50 <PCFrameReceiveHandler+0x164>)
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f005 fc5a 	bl	8007704 <strtok>
 8001e50:	6138      	str	r0, [r7, #16]
			R->x_correction=atof(temp);
 8001e52:	6938      	ldr	r0, [r7, #16]
 8001e54:	f003 fe9c 	bl	8005b90 <atof>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fe32 	bl	8000ac8 <__aeabi_d2f>
 8001e64:	4602      	mov	r2, r0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
			temp=strtok(NULL,SPLIT_CORRECTION_DATA_CHARACTER);
 8001e6a:	4939      	ldr	r1, [pc, #228]	@ (8001f50 <PCFrameReceiveHandler+0x164>)
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f005 fc49 	bl	8007704 <strtok>
 8001e72:	6138      	str	r0, [r7, #16]
			R->y_correction=atof(temp);
 8001e74:	6938      	ldr	r0, [r7, #16]
 8001e76:	f003 fe8b 	bl	8005b90 <atof>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fe21 	bl	8000ac8 <__aeabi_d2f>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	61da      	str	r2, [r3, #28]
			temp=strtok(NULL,SPLIT_CORRECTION_DATA_CHARACTER);
 8001e8c:	4930      	ldr	r1, [pc, #192]	@ (8001f50 <PCFrameReceiveHandler+0x164>)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f005 fc38 	bl	8007704 <strtok>
 8001e94:	6138      	str	r0, [r7, #16]
			R->theta_correction=atof(temp);
 8001e96:	6938      	ldr	r0, [r7, #16]
 8001e98:	f003 fe7a 	bl	8005b90 <atof>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe10 	bl	8000ac8 <__aeabi_d2f>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	621a      	str	r2, [r3, #32]
			R->x_prediction=R->x_correction;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60da      	str	r2, [r3, #12]
			R->y_prediction=R->y_correction;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	611a      	str	r2, [r3, #16]
			R->theta_prediction=R->theta_correction;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	615a      	str	r2, [r3, #20]
			for(int i=recieve_index;i>=1;i--)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e007      	b.n	8001ede <PCFrameReceiveHandler+0xf2>
				rx_buffer[i]=0;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
			for(int i=recieve_index;i>=1;i--)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dcf4      	bgt.n	8001ece <PCFrameReceiveHandler+0xe2>
			recieve_index=0;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <PCFrameReceiveHandler+0x15c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
}
 8001eea:	e028      	b.n	8001f3e <PCFrameReceiveHandler+0x152>
	else if(*rx_buffer==SEND_ODOMETRY_DATA_COMMAND_CHARACTER)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b65      	cmp	r3, #101	@ 0x65
 8001ef2:	d124      	bne.n	8001f3e <PCFrameReceiveHandler+0x152>
		sprintf((char*)tx_buffer,"%.3f_%.3f_%.3f\n",R->x_prediction,R->y_prediction,R->theta_prediction);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fa95 	bl	8000428 <__aeabi_f2d>
 8001efe:	4680      	mov	r8, r0
 8001f00:	4689      	mov	r9, r1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fa8e 	bl	8000428 <__aeabi_f2d>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fa87 	bl	8000428 <__aeabi_f2d>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f22:	e9cd 4500 	strd	r4, r5, [sp]
 8001f26:	4642      	mov	r2, r8
 8001f28:	464b      	mov	r3, r9
 8001f2a:	490a      	ldr	r1, [pc, #40]	@ (8001f54 <PCFrameReceiveHandler+0x168>)
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f005 fb6b 	bl	8007608 <siprintf>
		HAL_UART_Transmit(&huart2, tx_buffer,30,1);
 8001f32:	2301      	movs	r3, #1
 8001f34:	221e      	movs	r2, #30
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <PCFrameReceiveHandler+0x160>)
 8001f3a:	f003 f80e 	bl	8004f5a <HAL_UART_Transmit>
}
 8001f3e:	bf00      	nop
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f48:	20000595 	.word	0x20000595
 8001f4c:	20000310 	.word	0x20000310
 8001f50:	0800af30 	.word	0x0800af30
 8001f54:	0800af34 	.word	0x0800af34

08001f58 <BluetoothFrameHandler>:
 * @param rx_buffer The pointers of data we receive from UART
 * @param M1 The pointer of typedef struct that store first motor information
 * @param M2 The pointer of typedef struct that store second motor information
**/
void BluetoothFrameHandler(uint8_t *rx_buffer,Motor_measurement_command_typedef *M1,Motor_measurement_command_typedef *M2)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
		if (*rx_buffer==FORWARD_COMMAND_CHARACTER)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b66      	cmp	r3, #102	@ 0x66
 8001f6a:	d106      	bne.n	8001f7a <BluetoothFrameHandler+0x22>
		{
			M1->expected_rpm=10;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <BluetoothFrameHandler+0x88>)
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
			M2->expected_rpm=10;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1a      	ldr	r2, [pc, #104]	@ (8001fe0 <BluetoothFrameHandler+0x88>)
 8001f76:	625a      	str	r2, [r3, #36]	@ 0x24
		else if(*rx_buffer==STOP_COMMAND_CHARACTER)
		{
			M1->expected_rpm=0;
			M2->expected_rpm=0;
		}
}
 8001f78:	e02c      	b.n	8001fd4 <BluetoothFrameHandler+0x7c>
		else if (*rx_buffer==BACKWARD_COMMAND_CHARACTER)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b62      	cmp	r3, #98	@ 0x62
 8001f80:	d106      	bne.n	8001f90 <BluetoothFrameHandler+0x38>
			M1->expected_rpm=-10;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <BluetoothFrameHandler+0x8c>)
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24
			M2->expected_rpm=-10;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a16      	ldr	r2, [pc, #88]	@ (8001fe4 <BluetoothFrameHandler+0x8c>)
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f8e:	e021      	b.n	8001fd4 <BluetoothFrameHandler+0x7c>
		else if (*rx_buffer==TURN_LEFT_COMMAND_CHARACTER)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b6c      	cmp	r3, #108	@ 0x6c
 8001f96:	d106      	bne.n	8001fa6 <BluetoothFrameHandler+0x4e>
			M1->expected_rpm=-10;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <BluetoothFrameHandler+0x8c>)
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24
			M2->expected_rpm=10;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <BluetoothFrameHandler+0x88>)
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fa4:	e016      	b.n	8001fd4 <BluetoothFrameHandler+0x7c>
		else if (*rx_buffer==TURN_RIGHT_COMMAND_CHARACTER)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b72      	cmp	r3, #114	@ 0x72
 8001fac:	d106      	bne.n	8001fbc <BluetoothFrameHandler+0x64>
			M1->expected_rpm=10;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <BluetoothFrameHandler+0x88>)
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
			M2->expected_rpm=-10;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <BluetoothFrameHandler+0x8c>)
 8001fb8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fba:	e00b      	b.n	8001fd4 <BluetoothFrameHandler+0x7c>
		else if(*rx_buffer==STOP_COMMAND_CHARACTER)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b73      	cmp	r3, #115	@ 0x73
 8001fc2:	d107      	bne.n	8001fd4 <BluetoothFrameHandler+0x7c>
			M1->expected_rpm=0;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	625a      	str	r2, [r3, #36]	@ 0x24
			M2->expected_rpm=0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	41200000 	.word	0x41200000
 8001fe4:	c1200000 	.word	0xc1200000

08001fe8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b097      	sub	sp, #92	@ 0x5c
 8001fee:	af0e      	add	r7, sp, #56	@ 0x38
 8001ff0:	61f8      	str	r0, [r7, #28]
	if(htim->Instance==TIM2)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffa:	f040 8095 	bne.w	8002128 <HAL_TIM_PeriodElapsedCallback+0x140>
	{
		pidMotorControl(&htim3, &M1, &pidM1, MOTOR_1, CONTROL_INVERT);
 8001ffe:	2301      	movs	r3, #1
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2300      	movs	r3, #0
 8002004:	4a4b      	ldr	r2, [pc, #300]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002006:	494c      	ldr	r1, [pc, #304]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002008:	484c      	ldr	r0, [pc, #304]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x154>)
 800200a:	f7ff fc8b 	bl	8001924 <pidMotorControl>
		pidMotorControl(&htim4, &M2, &pidM2, MOTOR_2, CONTROL_NORMAL);
 800200e:	2300      	movs	r3, #0
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2301      	movs	r3, #1
 8002014:	4a4a      	ldr	r2, [pc, #296]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002016:	494b      	ldr	r1, [pc, #300]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002018:	484b      	ldr	r0, [pc, #300]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800201a:	f7ff fc83 	bl	8001924 <pidMotorControl>
		calculatePredictionValue(&R, M1.distance,M2.distance);
 800201e:	4b46      	ldr	r3, [pc, #280]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4a48      	ldr	r2, [pc, #288]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	4619      	mov	r1, r3
 8002028:	4848      	ldr	r0, [pc, #288]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800202a:	f7ff fe4b 	bl	8001cc4 <calculatePredictionValue>
		if(isnanf(M1.rpm_measurement)==1||isnanf(M2.rpm_measurement==1))
 800202e:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4619      	mov	r1, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f86b 	bl	8001110 <__aeabi_fcmpun>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_TIM_PeriodElapsedCallback+0x60>
			checkNan=1;
 8002040:	4b43      	ldr	r3, [pc, #268]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e002      	b.n	800204e <HAL_TIM_PeriodElapsedCallback+0x66>
		else
			checkNan=0;
 8002048:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
		i++;
 800204e:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b3f      	ldr	r3, [pc, #252]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002058:	701a      	strb	r2, [r3, #0]
		if(i==5)
 800205a:	4b3e      	ldr	r3, [pc, #248]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d162      	bne.n	8002128 <HAL_TIM_PeriodElapsedCallback+0x140>
		{
			sprintf((char *)tx_buffer,"%.4f/%.4f/%.4f/%.4f/%.4f/%d/%d/%d/%d/%.1f\n",M1.rpm_measurement,M2.rpm_measurement,R.x_prediction,R.y_prediction,R.theta_prediction,M1.current_cnt,M1.previous_cnt,M2.current_cnt,M2.previous_cnt,(float)checkNan);
 8002062:	4b35      	ldr	r3, [pc, #212]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f9de 	bl	8000428 <__aeabi_f2d>
 800206c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe f9d7 	bl	8000428 <__aeabi_f2d>
 800207a:	4604      	mov	r4, r0
 800207c:	460d      	mov	r5, r1
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f9d0 	bl	8000428 <__aeabi_f2d>
 8002088:	4680      	mov	r8, r0
 800208a:	4689      	mov	r9, r1
 800208c:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9c9 	bl	8000428 <__aeabi_f2d>
 8002096:	4682      	mov	sl, r0
 8002098:	468b      	mov	fp, r1
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f9c2 	bl	8000428 <__aeabi_f2d>
 80020a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020a8:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80020b0:	68de      	ldr	r6, [r3, #12]
 80020b2:	607e      	str	r6, [r7, #4]
 80020b4:	4b23      	ldr	r3, [pc, #140]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020b6:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80020ba:	f8c7 c000 	str.w	ip, [r7]
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80020c0:	68de      	ldr	r6, [r3, #12]
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fe04 	bl	8000cd4 <__aeabi_ui2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f9aa 	bl	8000428 <__aeabi_f2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80020dc:	960b      	str	r6, [sp, #44]	@ 0x2c
 80020de:	f8d7 c000 	ldr.w	ip, [r7]
 80020e2:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80020e6:	687e      	ldr	r6, [r7, #4]
 80020e8:	9609      	str	r6, [sp, #36]	@ 0x24
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	9308      	str	r3, [sp, #32]
 80020ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80020f2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80020f6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80020fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80020fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002102:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002106:	4914      	ldr	r1, [pc, #80]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002108:	4814      	ldr	r0, [pc, #80]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800210a:	f005 fa7d 	bl	8007608 <siprintf>
			HAL_UART_Transmit(&huart2, tx_buffer, strlen(tx_buffer), 10);
 800210e:	4813      	ldr	r0, [pc, #76]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002110:	f7fe f81e 	bl	8000150 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	230a      	movs	r3, #10
 800211a:	4910      	ldr	r1, [pc, #64]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800211c:	4810      	ldr	r0, [pc, #64]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800211e:	f002 ff1c 	bl	8004f5a <HAL_UART_Transmit>
			i=0;
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	@ 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	200003f8 	.word	0x200003f8
 8002138:	200003a0 	.word	0x200003a0
 800213c:	20000280 	.word	0x20000280
 8002140:	20000448 	.word	0x20000448
 8002144:	200003cc 	.word	0x200003cc
 8002148:	200002c8 	.word	0x200002c8
 800214c:	20000498 	.word	0x20000498
 8002150:	20000596 	.word	0x20000596
 8002154:	20000597 	.word	0x20000597
 8002158:	0800af44 	.word	0x0800af44
 800215c:	200004c8 	.word	0x200004c8
 8002160:	20000310 	.word	0x20000310

08002164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	@ (80021d4 <HAL_UART_RxCpltCallback+0x70>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d11a      	bne.n	80021ac <HAL_UART_RxCpltCallback+0x48>
	{
		if(*rx_buffer!=UPDATE_PREDICTION_CHARACTER)
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <HAL_UART_RxCpltCallback+0x74>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b52      	cmp	r3, #82	@ 0x52
 800217c:	d00d      	beq.n	800219a <HAL_UART_RxCpltCallback+0x36>
		{
			PCFrameReceiveHandler(rx_buffer,tx_buffer,&R ,&M1,&M2);
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_UART_RxCpltCallback+0x78>)
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <HAL_UART_RxCpltCallback+0x7c>)
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_UART_RxCpltCallback+0x80>)
 8002186:	4918      	ldr	r1, [pc, #96]	@ (80021e8 <HAL_UART_RxCpltCallback+0x84>)
 8002188:	4813      	ldr	r0, [pc, #76]	@ (80021d8 <HAL_UART_RxCpltCallback+0x74>)
 800218a:	f7ff fe2f 	bl	8001dec <PCFrameReceiveHandler>
			HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 800218e:	2201      	movs	r2, #1
 8002190:	4911      	ldr	r1, [pc, #68]	@ (80021d8 <HAL_UART_RxCpltCallback+0x74>)
 8002192:	4816      	ldr	r0, [pc, #88]	@ (80021ec <HAL_UART_RxCpltCallback+0x88>)
 8002194:	f002 ff6c 	bl	8005070 <HAL_UART_Receive_IT>
	else if(huart->Instance==BLUETOOTH_UART)
	{
		BluetoothFrameHandler(bluetooth_rx_buffer, &M1, &M2);
		HAL_UART_Receive_IT(&huart3,bluetooth_rx_buffer,1);
	}
}
 8002198:	e017      	b.n	80021ca <HAL_UART_RxCpltCallback+0x66>
			PCFrameReceiveHandler(rx_buffer,tx_buffer,&R ,&M1,&M2);
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <HAL_UART_RxCpltCallback+0x78>)
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <HAL_UART_RxCpltCallback+0x7c>)
 80021a0:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <HAL_UART_RxCpltCallback+0x80>)
 80021a2:	4911      	ldr	r1, [pc, #68]	@ (80021e8 <HAL_UART_RxCpltCallback+0x84>)
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <HAL_UART_RxCpltCallback+0x74>)
 80021a6:	f7ff fe21 	bl	8001dec <PCFrameReceiveHandler>
}
 80021aa:	e00e      	b.n	80021ca <HAL_UART_RxCpltCallback+0x66>
	else if(huart->Instance==BLUETOOTH_UART)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0f      	ldr	r2, [pc, #60]	@ (80021f0 <HAL_UART_RxCpltCallback+0x8c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d109      	bne.n	80021ca <HAL_UART_RxCpltCallback+0x66>
		BluetoothFrameHandler(bluetooth_rx_buffer, &M1, &M2);
 80021b6:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <HAL_UART_RxCpltCallback+0x78>)
 80021b8:	4909      	ldr	r1, [pc, #36]	@ (80021e0 <HAL_UART_RxCpltCallback+0x7c>)
 80021ba:	480e      	ldr	r0, [pc, #56]	@ (80021f4 <HAL_UART_RxCpltCallback+0x90>)
 80021bc:	f7ff fecc 	bl	8001f58 <BluetoothFrameHandler>
		HAL_UART_Receive_IT(&huart3,bluetooth_rx_buffer,1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <HAL_UART_RxCpltCallback+0x90>)
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <HAL_UART_RxCpltCallback+0x94>)
 80021c6:	f002 ff53 	bl	8005070 <HAL_UART_Receive_IT>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40004400 	.word	0x40004400
 80021d8:	2000052c 	.word	0x2000052c
 80021dc:	200003cc 	.word	0x200003cc
 80021e0:	200003a0 	.word	0x200003a0
 80021e4:	20000498 	.word	0x20000498
 80021e8:	200004c8 	.word	0x200004c8
 80021ec:	20000310 	.word	0x20000310
 80021f0:	40004800 	.word	0x40004800
 80021f4:	20000590 	.word	0x20000590
 80021f8:	20000358 	.word	0x20000358

080021fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002202:	f000 fdb9 	bl	8002d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002206:	f000 f879 	bl	80022fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800220a:	f000 fa8f 	bl	800272c <MX_GPIO_Init>
  MX_TIM1_Init();
 800220e:	f000 f8b1 	bl	8002374 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002212:	f000 f93f 	bl	8002494 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002216:	f000 f989 	bl	800252c <MX_TIM3_Init>
  MX_TIM4_Init();
 800221a:	f000 f9dd 	bl	80025d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800221e:	f000 fa31 	bl	8002684 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002222:	f000 fa59 	bl	80026d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	M1.IN1=GPIO_PIN_0;
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <main+0xc4>)
 8002228:	2201      	movs	r2, #1
 800222a:	851a      	strh	r2, [r3, #40]	@ 0x28
	M1.IN2=GPIO_PIN_1;
 800222c:	4b24      	ldr	r3, [pc, #144]	@ (80022c0 <main+0xc4>)
 800222e:	2202      	movs	r2, #2
 8002230:	855a      	strh	r2, [r3, #42]	@ 0x2a
	M2.IN1=GPIO_PIN_3;
 8002232:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <main+0xc8>)
 8002234:	2208      	movs	r2, #8
 8002236:	851a      	strh	r2, [r3, #40]	@ 0x28
	M2.IN2=GPIO_PIN_4;
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <main+0xc8>)
 800223a:	2210      	movs	r2, #16
 800223c:	855a      	strh	r2, [r3, #42]	@ 0x2a
	pidControllersInit(&pidM1, 4, 8, 0.5, 0.02, 0.02,MAX_RPM);
 800223e:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main+0xcc>)
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <main+0xd0>)
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <main+0xd0>)
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800224e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8002252:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002256:	481e      	ldr	r0, [pc, #120]	@ (80022d0 <main+0xd4>)
 8002258:	f7ff fba6 	bl	80019a8 <pidControllersInit>
	pidControllersInit(&pidM2, 4, 8, 0.5,0.02, 0.02, MAX_RPM);
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <main+0xcc>)
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	4b1a      	ldr	r3, [pc, #104]	@ (80022cc <main+0xd0>)
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <main+0xd0>)
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800226c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8002270:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002274:	4817      	ldr	r0, [pc, #92]	@ (80022d4 <main+0xd8>)
 8002276:	f7ff fb97 	bl	80019a8 <pidControllersInit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800227a:	2100      	movs	r1, #0
 800227c:	4816      	ldr	r0, [pc, #88]	@ (80022d8 <main+0xdc>)
 800227e:	f001 fe3b 	bl	8003ef8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002282:	2104      	movs	r1, #4
 8002284:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <main+0xdc>)
 8002286:	f001 fe37 	bl	8003ef8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800228a:	4814      	ldr	r0, [pc, #80]	@ (80022dc <main+0xe0>)
 800228c:	f001 fd92 	bl	8003db4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002290:	213c      	movs	r1, #60	@ 0x3c
 8002292:	4813      	ldr	r0, [pc, #76]	@ (80022e0 <main+0xe4>)
 8002294:	f001 ff74 	bl	8004180 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002298:	213c      	movs	r1, #60	@ 0x3c
 800229a:	4812      	ldr	r0, [pc, #72]	@ (80022e4 <main+0xe8>)
 800229c:	f001 ff70 	bl	8004180 <HAL_TIM_Encoder_Start>
	HAL_UART_Receive_IT(&huart2, rx_buffer+rx_points, 1);
 80022a0:	4b11      	ldr	r3, [pc, #68]	@ (80022e8 <main+0xec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a11      	ldr	r2, [pc, #68]	@ (80022ec <main+0xf0>)
 80022a6:	4413      	add	r3, r2
 80022a8:	2201      	movs	r2, #1
 80022aa:	4619      	mov	r1, r3
 80022ac:	4810      	ldr	r0, [pc, #64]	@ (80022f0 <main+0xf4>)
 80022ae:	f002 fedf 	bl	8005070 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3,bluetooth_rx_buffer,1);
 80022b2:	2201      	movs	r2, #1
 80022b4:	490f      	ldr	r1, [pc, #60]	@ (80022f4 <main+0xf8>)
 80022b6:	4810      	ldr	r0, [pc, #64]	@ (80022f8 <main+0xfc>)
 80022b8:	f002 feda 	bl	8005070 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <main+0xc0>
 80022c0:	200003a0 	.word	0x200003a0
 80022c4:	200003cc 	.word	0x200003cc
 80022c8:	42140000 	.word	0x42140000
 80022cc:	3ca3d70a 	.word	0x3ca3d70a
 80022d0:	200003f8 	.word	0x200003f8
 80022d4:	20000448 	.word	0x20000448
 80022d8:	200001f0 	.word	0x200001f0
 80022dc:	20000238 	.word	0x20000238
 80022e0:	20000280 	.word	0x20000280
 80022e4:	200002c8 	.word	0x200002c8
 80022e8:	20000598 	.word	0x20000598
 80022ec:	2000052c 	.word	0x2000052c
 80022f0:	20000310 	.word	0x20000310
 80022f4:	20000590 	.word	0x20000590
 80022f8:	20000358 	.word	0x20000358

080022fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b090      	sub	sp, #64	@ 0x40
 8002300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002302:	f107 0318 	add.w	r3, r7, #24
 8002306:	2228      	movs	r2, #40	@ 0x28
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f005 f9df 	bl	80076ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800231e:	2302      	movs	r3, #2
 8002320:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002322:	2301      	movs	r3, #1
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002326:	2310      	movs	r3, #16
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232e:	f107 0318 	add.w	r3, r7, #24
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f8de 	bl	80034f4 <HAL_RCC_OscConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800233e:	f000 fa33 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002342:	230f      	movs	r3, #15
 8002344:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f001 fb4c 	bl	80039f8 <HAL_RCC_ClockConfig>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002366:	f000 fa1f 	bl	80027a8 <Error_Handler>
  }
}
 800236a:	bf00      	nop
 800236c:	3740      	adds	r7, #64	@ 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b092      	sub	sp, #72	@ 0x48
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]
 8002396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2220      	movs	r2, #32
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 f995 	bl	80076ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023a4:	4b39      	ldr	r3, [pc, #228]	@ (800248c <MX_TIM1_Init+0x118>)
 80023a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002490 <MX_TIM1_Init+0x11c>)
 80023a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80023aa:	4b38      	ldr	r3, [pc, #224]	@ (800248c <MX_TIM1_Init+0x118>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <MX_TIM1_Init+0x118>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80023b6:	4b35      	ldr	r3, [pc, #212]	@ (800248c <MX_TIM1_Init+0x118>)
 80023b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023be:	4b33      	ldr	r3, [pc, #204]	@ (800248c <MX_TIM1_Init+0x118>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <MX_TIM1_Init+0x118>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ca:	4b30      	ldr	r3, [pc, #192]	@ (800248c <MX_TIM1_Init+0x118>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023d0:	482e      	ldr	r0, [pc, #184]	@ (800248c <MX_TIM1_Init+0x118>)
 80023d2:	f001 fd41 	bl	8003e58 <HAL_TIM_PWM_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80023dc:	f000 f9e4 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023ec:	4619      	mov	r1, r3
 80023ee:	4827      	ldr	r0, [pc, #156]	@ (800248c <MX_TIM1_Init+0x118>)
 80023f0:	f002 fca2 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80023fa:	f000 f9d5 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fe:	2360      	movs	r3, #96	@ 0x60
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800240a:	2300      	movs	r3, #0
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800241a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800241e:	2200      	movs	r2, #0
 8002420:	4619      	mov	r1, r3
 8002422:	481a      	ldr	r0, [pc, #104]	@ (800248c <MX_TIM1_Init+0x118>)
 8002424:	f002 f82a 	bl	800447c <HAL_TIM_PWM_ConfigChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800242e:	f000 f9bb 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002436:	2204      	movs	r2, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4814      	ldr	r0, [pc, #80]	@ (800248c <MX_TIM1_Init+0x118>)
 800243c:	f002 f81e 	bl	800447c <HAL_TIM_PWM_ConfigChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002446:	f000 f9af 	bl	80027a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800245e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002462:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4619      	mov	r1, r3
 800246c:	4807      	ldr	r0, [pc, #28]	@ (800248c <MX_TIM1_Init+0x118>)
 800246e:	f002 fcc1 	bl	8004df4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002478:	f000 f996 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <MX_TIM1_Init+0x118>)
 800247e:	f000 fa79 	bl	8002974 <HAL_TIM_MspPostInit>

}
 8002482:	bf00      	nop
 8002484:	3748      	adds	r7, #72	@ 0x48
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200001f0 	.word	0x200001f0
 8002490:	40012c00 	.word	0x40012c00

08002494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80024b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024ba:	224f      	movs	r2, #79	@ 0x4f
 80024bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 80024c4:	4b18      	ldr	r3, [pc, #96]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024c6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80024ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024da:	f001 fc1b 	bl	8003d14 <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024e4:	f000 f960 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_TIM2_Init+0x94>)
 80024f6:	f002 f883 	bl	8004600 <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002500:	f000 f952 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <MX_TIM2_Init+0x94>)
 8002512:	f002 fc11 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800251c:	f000 f944 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000238 	.word	0x20000238

0800252c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f005 f8c7 	bl	80076ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002548:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 800254a:	4a22      	ldr	r2, [pc, #136]	@ (80025d4 <MX_TIM3_Init+0xa8>)
 800254c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 8002550:	2200      	movs	r2, #0
 8002552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 800255c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002562:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 8002564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002570:	2301      	movs	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002578:	2301      	movs	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002580:	230a      	movs	r3, #10
 8002582:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002590:	230a      	movs	r3, #10
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	4619      	mov	r1, r3
 800259a:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 800259c:	f001 fd4e 	bl	800403c <HAL_TIM_Encoder_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80025a6:	f000 f8ff 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <MX_TIM3_Init+0xa4>)
 80025b8:	f002 fbbe 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80025c2:	f000 f8f1 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	3730      	adds	r7, #48	@ 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000280 	.word	0x20000280
 80025d4:	40000400 	.word	0x40000400

080025d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	@ 0x30
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	2224      	movs	r2, #36	@ 0x24
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 f871 	bl	80076ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <MX_TIM4_Init+0xa4>)
 80025f6:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <MX_TIM4_Init+0xa8>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <MX_TIM4_Init+0xa4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002606:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800260c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800261c:	2301      	movs	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800262c:	230a      	movs	r3, #10
 800262e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800263c:	230a      	movs	r3, #10
 800263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002648:	f001 fcf8 	bl	800403c <HAL_TIM_Encoder_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002652:	f000 f8a9 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <MX_TIM4_Init+0xa4>)
 8002664:	f002 fb68 	bl	8004d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800266e:	f000 f89b 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	@ 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200002c8 	.word	0x200002c8
 8002680:	40000800 	.word	0x40000800

08002684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002688:	4b11      	ldr	r3, [pc, #68]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <MX_USART2_UART_Init+0x50>)
 800268c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <MX_USART2_UART_Init+0x4c>)
 80026bc:	f002 fbfd 	bl	8004eba <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c6:	f000 f86f 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000310 	.word	0x20000310
 80026d4:	40004400 	.word	0x40004400

080026d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <MX_USART3_UART_Init+0x50>)
 80026e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 80026fe:	220c      	movs	r2, #12
 8002700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800270e:	4805      	ldr	r0, [pc, #20]	@ (8002724 <MX_USART3_UART_Init+0x4c>)
 8002710:	f002 fbd3 	bl	8004eba <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800271a:	f000 f845 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000358 	.word	0x20000358
 8002728:	40004800 	.word	0x40004800

0800272c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <MX_GPIO_Init+0x74>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <MX_GPIO_Init+0x74>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <MX_GPIO_Init+0x74>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <MX_GPIO_Init+0x74>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a10      	ldr	r2, [pc, #64]	@ (80027a0 <MX_GPIO_Init+0x74>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <MX_GPIO_Init+0x74>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR1_IN1_Pin|MOTOR1_IN2_Pin|MOTOR2_IN1_Pin|MOTOR2_IN2_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	211b      	movs	r1, #27
 8002774:	480b      	ldr	r0, [pc, #44]	@ (80027a4 <MX_GPIO_Init+0x78>)
 8002776:	f000 fea5 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR1_IN1_Pin MOTOR1_IN2_Pin MOTOR2_IN1_Pin MOTOR2_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR1_IN1_Pin|MOTOR1_IN2_Pin|MOTOR2_IN1_Pin|MOTOR2_IN2_Pin;
 800277a:	231b      	movs	r3, #27
 800277c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2302      	movs	r3, #2
 8002788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4619      	mov	r1, r3
 8002790:	4804      	ldr	r0, [pc, #16]	@ (80027a4 <MX_GPIO_Init+0x78>)
 8002792:	f000 fd13 	bl	80031bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010c00 	.word	0x40010c00

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	bf00      	nop
 80027b2:	e7fd      	b.n	80027b0 <Error_Handler+0x8>

080027b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_MspInit+0x5c>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	4a14      	ldr	r2, [pc, #80]	@ (8002810 <HAL_MspInit+0x5c>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6193      	str	r3, [r2, #24]
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <HAL_MspInit+0x5c>)
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_MspInit+0x5c>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002810 <HAL_MspInit+0x5c>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_MspInit+0x5c>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_MspInit+0x60>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <HAL_MspInit+0x60>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40021000 	.word	0x40021000
 8002814:	40010000 	.word	0x40010000

08002818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_TIM_PWM_MspInit+0x34>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10b      	bne.n	8002842 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_TIM_PWM_MspInit+0x38>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <HAL_TIM_PWM_MspInit+0x38>)
 8002830:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002834:	6193      	str	r3, [r2, #24]
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_TIM_PWM_MspInit+0x38>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002864:	d113      	bne.n	800288e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002866:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HAL_TIM_Base_MspInit+0x44>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_TIM_Base_MspInit+0x44>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_TIM_Base_MspInit+0x44>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	201c      	movs	r0, #28
 8002884:	f000 fbb1 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002888:	201c      	movs	r0, #28
 800288a:	f000 fbca 	bl	8003022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	@ 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0318 	add.w	r3, r7, #24
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d124      	bne.n	8002906 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4a28      	ldr	r2, [pc, #160]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	61d3      	str	r3, [r2, #28]
 80028c8:	4b26      	ldr	r3, [pc, #152]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b20      	ldr	r3, [pc, #128]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ECODER1_CHANNEL1_Pin|ENCODER1_CHANNEL2_Pin;
 80028ec:	23c0      	movs	r3, #192	@ 0xc0
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	4619      	mov	r1, r3
 80028fe:	481a      	ldr	r0, [pc, #104]	@ (8002968 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002900:	f000 fc5c 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002904:	e028      	b.n	8002958 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a18      	ldr	r2, [pc, #96]	@ (800296c <HAL_TIM_Encoder_MspInit+0xd0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d123      	bne.n	8002958 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4a13      	ldr	r2, [pc, #76]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	61d3      	str	r3, [r2, #28]
 800291c:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER2_CHANNEL1_Pin|ENCODER2_CHANNEL2_Pin;
 8002940:	23c0      	movs	r3, #192	@ 0xc0
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4619      	mov	r1, r3
 8002952:	4807      	ldr	r0, [pc, #28]	@ (8002970 <HAL_TIM_Encoder_MspInit+0xd4>)
 8002954:	f000 fc32 	bl	80031bc <HAL_GPIO_Init>
}
 8002958:	bf00      	nop
 800295a:	3728      	adds	r7, #40	@ 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40000400 	.word	0x40000400
 8002964:	40021000 	.word	0x40021000
 8002968:	40010800 	.word	0x40010800
 800296c:	40000800 	.word	0x40000800
 8002970:	40010c00 	.word	0x40010c00

08002974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	@ (80029d0 <HAL_TIM_MspPostInit+0x5c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d118      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a0e      	ldr	r2, [pc, #56]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 800299a:	f043 0304 	orr.w	r3, r3, #4
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <HAL_TIM_MspPostInit+0x60>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80029ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <HAL_TIM_MspPostInit+0x64>)
 80029c2:	f000 fbfb 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010800 	.word	0x40010800

080029dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	@ 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0318 	add.w	r3, r7, #24
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3f      	ldr	r2, [pc, #252]	@ (8002af4 <HAL_UART_MspInit+0x118>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d138      	bne.n	8002a6e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029fc:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a3d      	ldr	r2, [pc, #244]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b3b      	ldr	r3, [pc, #236]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a14:	4b38      	ldr	r3, [pc, #224]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a37      	ldr	r2, [pc, #220]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a38:	f107 0318 	add.w	r3, r7, #24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482f      	ldr	r0, [pc, #188]	@ (8002afc <HAL_UART_MspInit+0x120>)
 8002a40:	f000 fbbc 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a44:	2308      	movs	r3, #8
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0318 	add.w	r3, r7, #24
 8002a54:	4619      	mov	r1, r3
 8002a56:	4829      	ldr	r0, [pc, #164]	@ (8002afc <HAL_UART_MspInit+0x120>)
 8002a58:	f000 fbb0 	bl	80031bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2026      	movs	r0, #38	@ 0x26
 8002a62:	f000 fac2 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a66:	2026      	movs	r0, #38	@ 0x26
 8002a68:	f000 fadb 	bl	8003022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a6c:	e03e      	b.n	8002aec <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <HAL_UART_MspInit+0x124>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d139      	bne.n	8002aec <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b1c      	ldr	r3, [pc, #112]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	4a18      	ldr	r2, [pc, #96]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a96:	f043 0308 	orr.w	r3, r3, #8
 8002a9a:	6193      	str	r3, [r2, #24]
 8002a9c:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <HAL_UART_MspInit+0x11c>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 0318 	add.w	r3, r7, #24
 8002aba:	4619      	mov	r1, r3
 8002abc:	4811      	ldr	r0, [pc, #68]	@ (8002b04 <HAL_UART_MspInit+0x128>)
 8002abe:	f000 fb7d 	bl	80031bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin;
 8002ac2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480b      	ldr	r0, [pc, #44]	@ (8002b04 <HAL_UART_MspInit+0x128>)
 8002ad8:	f000 fb70 	bl	80031bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2027      	movs	r0, #39	@ 0x27
 8002ae2:	f000 fa82 	bl	8002fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ae6:	2027      	movs	r0, #39	@ 0x27
 8002ae8:	f000 fa9b 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	@ 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40004400 	.word	0x40004400
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010800 	.word	0x40010800
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40010c00 	.word	0x40010c00

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <NMI_Handler+0x4>

08002b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <MemManage_Handler+0x4>

08002b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b58:	f000 f954 	bl	8002e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <TIM2_IRQHandler+0x10>)
 8002b66:	f001 fb99 	bl	800429c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000238 	.word	0x20000238

08002b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <USART2_IRQHandler+0x10>)
 8002b7a:	f002 fa9f 	bl	80050bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000310 	.word	0x20000310

08002b88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <USART3_IRQHandler+0x10>)
 8002b8e:	f002 fa95 	bl	80050bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000358 	.word	0x20000358

08002b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <_kill>:

int _kill(int pid, int sig)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bb4:	f004 fe4c 	bl	8007850 <__errno>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2216      	movs	r2, #22
 8002bbc:	601a      	str	r2, [r3, #0]
  return -1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_exit>:

void _exit (int status)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffe7 	bl	8002baa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <_exit+0x12>

08002be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e00a      	b.n	8002c08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bf2:	f3af 8000 	nop.w
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	60ba      	str	r2, [r7, #8]
 8002bfe:	b2ca      	uxtb	r2, r1
 8002c00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	dbf0      	blt.n	8002bf2 <_read+0x12>
  }

  return len;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e009      	b.n	8002c40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	60ba      	str	r2, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbf1      	blt.n	8002c2c <_write+0x12>
  }
  return len;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_close>:

int _close(int file)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c78:	605a      	str	r2, [r3, #4]
  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <_isatty>:

int _isatty(int file)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f004 fdb4 	bl	8007850 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20005000 	.word	0x20005000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	2000059c 	.word	0x2000059c
 8002d1c:	200006f0 	.word	0x200006f0

08002d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d2c:	f7ff fff8 	bl	8002d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d30:	480b      	ldr	r0, [pc, #44]	@ (8002d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d32:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d34:	4a0c      	ldr	r2, [pc, #48]	@ (8002d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d38:	e002      	b.n	8002d40 <LoopCopyDataInit>

08002d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3e:	3304      	adds	r3, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d44:	d3f9      	bcc.n	8002d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d46:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d48:	4c09      	ldr	r4, [pc, #36]	@ (8002d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d4c:	e001      	b.n	8002d52 <LoopFillZerobss>

08002d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d50:	3204      	adds	r2, #4

08002d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d54:	d3fb      	bcc.n	8002d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d56:	f004 fd81 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d5a:	f7ff fa4f 	bl	80021fc <main>
  bx lr
 8002d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d68:	0800b804 	.word	0x0800b804
  ldr r2, =_sbss
 8002d6c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002d70:	200006f0 	.word	0x200006f0

08002d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC1_2_IRQHandler>
	...

08002d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d7c:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_Init+0x28>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <HAL_Init+0x28>)
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 f923 	bl	8002fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d8e:	200f      	movs	r0, #15
 8002d90:	f000 f808 	bl	8002da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d94:	f7ff fd0e 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40022000 	.word	0x40022000

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dac:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <HAL_InitTick+0x54>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <HAL_InitTick+0x58>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f93b 	bl	800303e <HAL_SYSTICK_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00e      	b.n	8002df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d80a      	bhi.n	8002dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f000 f903 	bl	8002fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002de4:	4a06      	ldr	r2, [pc, #24]	@ (8002e00 <HAL_InitTick+0x5c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	20000004 	.word	0x20000004

08002e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_IncTick+0x1c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <HAL_IncTick+0x20>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a03      	ldr	r2, [pc, #12]	@ (8002e24 <HAL_IncTick+0x20>)
 8002e16:	6013      	str	r3, [r2, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000008 	.word	0x20000008
 8002e24:	200005a0 	.word	0x200005a0

08002e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b02      	ldr	r3, [pc, #8]	@ (8002e38 <HAL_GetTick+0x10>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	200005a0 	.word	0x200005a0

08002e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6e:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <__NVIC_SetPriorityGrouping+0x44>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e88:	4b04      	ldr	r3, [pc, #16]	@ (8002e9c <__NVIC_GetPriorityGrouping+0x18>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	0a1b      	lsrs	r3, r3, #8
 8002e8e:	f003 0307 	and.w	r3, r3, #7
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db0b      	blt.n	8002eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f003 021f 	and.w	r2, r3, #31
 8002eb8:	4906      	ldr	r1, [pc, #24]	@ (8002ed4 <__NVIC_EnableIRQ+0x34>)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	@ (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa0:	d301      	bcc.n	8002fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e00f      	b.n	8002fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fae:	210f      	movs	r1, #15
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	f7ff ff90 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fbe:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <SysTick_Config+0x40>)
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000e010 	.word	0xe000e010

08002fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff2d 	bl	8002e3c <__NVIC_SetPriorityGrouping>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff42 	bl	8002e84 <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff90 	bl	8002f2c <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5f 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff35 	bl	8002ea0 <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa2 	bl	8002f90 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d008      	beq.n	8003080 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2204      	movs	r2, #4
 8003072:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e020      	b.n	80030c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 020e 	bic.w	r2, r2, #14
 800308e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f202 	lsl.w	r2, r1, r2
 80030ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d005      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2204      	movs	r2, #4
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e051      	b.n	8003194 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <HAL_DMA_Abort_IT+0xd4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d029      	beq.n	800316e <HAL_DMA_Abort_IT+0xa2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_DMA_Abort_IT+0xd8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <HAL_DMA_Abort_IT+0x9e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_DMA_Abort_IT+0xdc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01a      	beq.n	8003164 <HAL_DMA_Abort_IT+0x98>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1e      	ldr	r2, [pc, #120]	@ (80031ac <HAL_DMA_Abort_IT+0xe0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d012      	beq.n	800315e <HAL_DMA_Abort_IT+0x92>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_DMA_Abort_IT+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00a      	beq.n	8003158 <HAL_DMA_Abort_IT+0x8c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_DMA_Abort_IT+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d102      	bne.n	8003152 <HAL_DMA_Abort_IT+0x86>
 800314c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003150:	e00e      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 8003152:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003156:	e00b      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 8003158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800315c:	e008      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 800315e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003162:	e005      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 8003164:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003168:	e002      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 800316a:	2310      	movs	r3, #16
 800316c:	e000      	b.n	8003170 <HAL_DMA_Abort_IT+0xa4>
 800316e:	2301      	movs	r3, #1
 8003170:	4a11      	ldr	r2, [pc, #68]	@ (80031b8 <HAL_DMA_Abort_IT+0xec>)
 8003172:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
    } 
  }
  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40020008 	.word	0x40020008
 80031a4:	4002001c 	.word	0x4002001c
 80031a8:	40020030 	.word	0x40020030
 80031ac:	40020044 	.word	0x40020044
 80031b0:	40020058 	.word	0x40020058
 80031b4:	4002006c 	.word	0x4002006c
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b08b      	sub	sp, #44	@ 0x2c
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ce:	e169      	b.n	80034a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031d0:	2201      	movs	r2, #1
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f040 8158 	bne.w	800349e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a9a      	ldr	r2, [pc, #616]	@ (800345c <HAL_GPIO_Init+0x2a0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d05e      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
 80031f8:	4a98      	ldr	r2, [pc, #608]	@ (800345c <HAL_GPIO_Init+0x2a0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d875      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 80031fe:	4a98      	ldr	r2, [pc, #608]	@ (8003460 <HAL_GPIO_Init+0x2a4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d058      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
 8003204:	4a96      	ldr	r2, [pc, #600]	@ (8003460 <HAL_GPIO_Init+0x2a4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d86f      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 800320a:	4a96      	ldr	r2, [pc, #600]	@ (8003464 <HAL_GPIO_Init+0x2a8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d052      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
 8003210:	4a94      	ldr	r2, [pc, #592]	@ (8003464 <HAL_GPIO_Init+0x2a8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d869      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 8003216:	4a94      	ldr	r2, [pc, #592]	@ (8003468 <HAL_GPIO_Init+0x2ac>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04c      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
 800321c:	4a92      	ldr	r2, [pc, #584]	@ (8003468 <HAL_GPIO_Init+0x2ac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d863      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 8003222:	4a92      	ldr	r2, [pc, #584]	@ (800346c <HAL_GPIO_Init+0x2b0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d046      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
 8003228:	4a90      	ldr	r2, [pc, #576]	@ (800346c <HAL_GPIO_Init+0x2b0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d85d      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 800322e:	2b12      	cmp	r3, #18
 8003230:	d82a      	bhi.n	8003288 <HAL_GPIO_Init+0xcc>
 8003232:	2b12      	cmp	r3, #18
 8003234:	d859      	bhi.n	80032ea <HAL_GPIO_Init+0x12e>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <HAL_GPIO_Init+0x80>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	080032b7 	.word	0x080032b7
 8003240:	08003291 	.word	0x08003291
 8003244:	080032a3 	.word	0x080032a3
 8003248:	080032e5 	.word	0x080032e5
 800324c:	080032eb 	.word	0x080032eb
 8003250:	080032eb 	.word	0x080032eb
 8003254:	080032eb 	.word	0x080032eb
 8003258:	080032eb 	.word	0x080032eb
 800325c:	080032eb 	.word	0x080032eb
 8003260:	080032eb 	.word	0x080032eb
 8003264:	080032eb 	.word	0x080032eb
 8003268:	080032eb 	.word	0x080032eb
 800326c:	080032eb 	.word	0x080032eb
 8003270:	080032eb 	.word	0x080032eb
 8003274:	080032eb 	.word	0x080032eb
 8003278:	080032eb 	.word	0x080032eb
 800327c:	080032eb 	.word	0x080032eb
 8003280:	08003299 	.word	0x08003299
 8003284:	080032ad 	.word	0x080032ad
 8003288:	4a79      	ldr	r2, [pc, #484]	@ (8003470 <HAL_GPIO_Init+0x2b4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800328e:	e02c      	b.n	80032ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	623b      	str	r3, [r7, #32]
          break;
 8003296:	e029      	b.n	80032ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	3304      	adds	r3, #4
 800329e:	623b      	str	r3, [r7, #32]
          break;
 80032a0:	e024      	b.n	80032ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	3308      	adds	r3, #8
 80032a8:	623b      	str	r3, [r7, #32]
          break;
 80032aa:	e01f      	b.n	80032ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	330c      	adds	r3, #12
 80032b2:	623b      	str	r3, [r7, #32]
          break;
 80032b4:	e01a      	b.n	80032ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032be:	2304      	movs	r3, #4
 80032c0:	623b      	str	r3, [r7, #32]
          break;
 80032c2:	e013      	b.n	80032ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032cc:	2308      	movs	r3, #8
 80032ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	611a      	str	r2, [r3, #16]
          break;
 80032d6:	e009      	b.n	80032ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d8:	2308      	movs	r3, #8
 80032da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	615a      	str	r2, [r3, #20]
          break;
 80032e2:	e003      	b.n	80032ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032e4:	2300      	movs	r3, #0
 80032e6:	623b      	str	r3, [r7, #32]
          break;
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x130>
          break;
 80032ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d801      	bhi.n	80032f6 <HAL_GPIO_Init+0x13a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	e001      	b.n	80032fa <HAL_GPIO_Init+0x13e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3304      	adds	r3, #4
 80032fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2bff      	cmp	r3, #255	@ 0xff
 8003300:	d802      	bhi.n	8003308 <HAL_GPIO_Init+0x14c>
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	e002      	b.n	800330e <HAL_GPIO_Init+0x152>
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	3b08      	subs	r3, #8
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	210f      	movs	r1, #15
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80b1 	beq.w	800349e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800333c:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <HAL_GPIO_Init+0x2b8>)
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	4a4c      	ldr	r2, [pc, #304]	@ (8003474 <HAL_GPIO_Init+0x2b8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6193      	str	r3, [r2, #24]
 8003348:	4b4a      	ldr	r3, [pc, #296]	@ (8003474 <HAL_GPIO_Init+0x2b8>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003354:	4a48      	ldr	r2, [pc, #288]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a40      	ldr	r2, [pc, #256]	@ (800347c <HAL_GPIO_Init+0x2c0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_GPIO_Init+0x1ec>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3f      	ldr	r2, [pc, #252]	@ (8003480 <HAL_GPIO_Init+0x2c4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00d      	beq.n	80033a4 <HAL_GPIO_Init+0x1e8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3e      	ldr	r2, [pc, #248]	@ (8003484 <HAL_GPIO_Init+0x2c8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <HAL_GPIO_Init+0x1e4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3d      	ldr	r2, [pc, #244]	@ (8003488 <HAL_GPIO_Init+0x2cc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_GPIO_Init+0x1e0>
 8003398:	2303      	movs	r3, #3
 800339a:	e006      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 800339c:	2304      	movs	r3, #4
 800339e:	e004      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e002      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_GPIO_Init+0x1ee>
 80033a8:	2300      	movs	r3, #0
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	f002 0203 	and.w	r2, r2, #3
 80033b0:	0092      	lsls	r2, r2, #2
 80033b2:	4093      	lsls	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ba:	492f      	ldr	r1, [pc, #188]	@ (8003478 <HAL_GPIO_Init+0x2bc>)
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	3302      	adds	r3, #2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033d4:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	492c      	ldr	r1, [pc, #176]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	608b      	str	r3, [r1, #8]
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033e2:	4b2a      	ldr	r3, [pc, #168]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4928      	ldr	r1, [pc, #160]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033fc:	4b23      	ldr	r3, [pc, #140]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	4922      	ldr	r1, [pc, #136]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	60cb      	str	r3, [r1, #12]
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	43db      	mvns	r3, r3
 8003412:	491e      	ldr	r1, [pc, #120]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 8003414:	4013      	ands	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d006      	beq.n	8003432 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003424:	4b19      	ldr	r3, [pc, #100]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4918      	ldr	r1, [pc, #96]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
 8003430:	e006      	b.n	8003440 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003432:	4b16      	ldr	r3, [pc, #88]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	43db      	mvns	r3, r3
 800343a:	4914      	ldr	r1, [pc, #80]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 800343c:	4013      	ands	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d021      	beq.n	8003490 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800344c:	4b0f      	ldr	r3, [pc, #60]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	490e      	ldr	r1, [pc, #56]	@ (800348c <HAL_GPIO_Init+0x2d0>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e021      	b.n	800349e <HAL_GPIO_Init+0x2e2>
 800345a:	bf00      	nop
 800345c:	10320000 	.word	0x10320000
 8003460:	10310000 	.word	0x10310000
 8003464:	10220000 	.word	0x10220000
 8003468:	10210000 	.word	0x10210000
 800346c:	10120000 	.word	0x10120000
 8003470:	10110000 	.word	0x10110000
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000
 800347c:	40010800 	.word	0x40010800
 8003480:	40010c00 	.word	0x40010c00
 8003484:	40011000 	.word	0x40011000
 8003488:	40011400 	.word	0x40011400
 800348c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_GPIO_Init+0x304>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	43db      	mvns	r3, r3
 8003498:	4909      	ldr	r1, [pc, #36]	@ (80034c0 <HAL_GPIO_Init+0x304>)
 800349a:	4013      	ands	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f47f ae8e 	bne.w	80031d0 <HAL_GPIO_Init+0x14>
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	372c      	adds	r7, #44	@ 0x2c
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	40010400 	.word	0x40010400

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034e0:	e003      	b.n	80034ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e272      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8087 	beq.w	8003622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003514:	4b92      	ldr	r3, [pc, #584]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b04      	cmp	r3, #4
 800351e:	d00c      	beq.n	800353a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003520:	4b8f      	ldr	r3, [pc, #572]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b08      	cmp	r3, #8
 800352a:	d112      	bne.n	8003552 <HAL_RCC_OscConfig+0x5e>
 800352c:	4b8c      	ldr	r3, [pc, #560]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003538:	d10b      	bne.n	8003552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353a:	4b89      	ldr	r3, [pc, #548]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d06c      	beq.n	8003620 <HAL_RCC_OscConfig+0x12c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d168      	bne.n	8003620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e24c      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355a:	d106      	bne.n	800356a <HAL_RCC_OscConfig+0x76>
 800355c:	4b80      	ldr	r3, [pc, #512]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a7f      	ldr	r2, [pc, #508]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e02e      	b.n	80035c8 <HAL_RCC_OscConfig+0xd4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b7b      	ldr	r3, [pc, #492]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7a      	ldr	r2, [pc, #488]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b78      	ldr	r3, [pc, #480]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a77      	ldr	r2, [pc, #476]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e01d      	b.n	80035c8 <HAL_RCC_OscConfig+0xd4>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0xbc>
 8003596:	4b72      	ldr	r3, [pc, #456]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a71      	ldr	r2, [pc, #452]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a6e      	ldr	r2, [pc, #440]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e00b      	b.n	80035c8 <HAL_RCC_OscConfig+0xd4>
 80035b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b68      	ldr	r3, [pc, #416]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a67      	ldr	r2, [pc, #412]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d013      	beq.n	80035f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7ff fc2a 	bl	8002e28 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7ff fc26 	bl	8002e28 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e200      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0xe4>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7ff fc16 	bl	8002e28 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003600:	f7ff fc12 	bl	8002e28 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1ec      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	4b53      	ldr	r3, [pc, #332]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x10c>
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d063      	beq.n	80036f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800362e:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11c      	bne.n	8003680 <HAL_RCC_OscConfig+0x18c>
 8003646:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b43      	ldr	r3, [pc, #268]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_RCC_OscConfig+0x176>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e1c0      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366a:	4b3d      	ldr	r3, [pc, #244]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4939      	ldr	r1, [pc, #228]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e03a      	b.n	80036f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b36      	ldr	r3, [pc, #216]	@ (8003764 <HAL_RCC_OscConfig+0x270>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7ff fbcb 	bl	8002e28 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7ff fbc7 	bl	8002e28 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1a1      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4927      	ldr	r1, [pc, #156]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e015      	b.n	80036f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b26      	ldr	r3, [pc, #152]	@ (8003764 <HAL_RCC_OscConfig+0x270>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7ff fbaa 	bl	8002e28 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d8:	f7ff fba6 	bl	8002e28 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e180      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03a      	beq.n	8003778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d019      	beq.n	800373e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b17      	ldr	r3, [pc, #92]	@ (8003768 <HAL_RCC_OscConfig+0x274>)
 800370c:	2201      	movs	r2, #1
 800370e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7ff fb8a 	bl	8002e28 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7ff fb86 	bl	8002e28 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e160      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_RCC_OscConfig+0x26c>)
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003736:	2001      	movs	r0, #1
 8003738:	f000 face 	bl	8003cd8 <RCC_Delay>
 800373c:	e01c      	b.n	8003778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <HAL_RCC_OscConfig+0x274>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7ff fb70 	bl	8002e28 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374a:	e00f      	b.n	800376c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7ff fb6c 	bl	8002e28 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d908      	bls.n	800376c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e146      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
 800375e:	bf00      	nop
 8003760:	40021000 	.word	0x40021000
 8003764:	42420000 	.word	0x42420000
 8003768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376c:	4b92      	ldr	r3, [pc, #584]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e9      	bne.n	800374c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a6 	beq.w	80038d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378a:	4b8b      	ldr	r3, [pc, #556]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4a87      	ldr	r2, [pc, #540]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	61d3      	str	r3, [r2, #28]
 80037a2:	4b85      	ldr	r3, [pc, #532]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b82      	ldr	r3, [pc, #520]	@ (80039bc <HAL_RCC_OscConfig+0x4c8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b7f      	ldr	r3, [pc, #508]	@ (80039bc <HAL_RCC_OscConfig+0x4c8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a7e      	ldr	r2, [pc, #504]	@ (80039bc <HAL_RCC_OscConfig+0x4c8>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7ff fb2d 	bl	8002e28 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7ff fb29 	bl	8002e28 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b64      	cmp	r3, #100	@ 0x64
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e103      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b75      	ldr	r3, [pc, #468]	@ (80039bc <HAL_RCC_OscConfig+0x4c8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x312>
 80037f8:	4b6f      	ldr	r3, [pc, #444]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a6e      	ldr	r2, [pc, #440]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	e02d      	b.n	8003862 <HAL_RCC_OscConfig+0x36e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x334>
 800380e:	4b6a      	ldr	r3, [pc, #424]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a69      	ldr	r2, [pc, #420]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a66      	ldr	r2, [pc, #408]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6213      	str	r3, [r2, #32]
 8003826:	e01c      	b.n	8003862 <HAL_RCC_OscConfig+0x36e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d10c      	bne.n	800384a <HAL_RCC_OscConfig+0x356>
 8003830:	4b61      	ldr	r3, [pc, #388]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a60      	ldr	r2, [pc, #384]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	f043 0304 	orr.w	r3, r3, #4
 800383a:	6213      	str	r3, [r2, #32]
 800383c:	4b5e      	ldr	r3, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	4a5d      	ldr	r2, [pc, #372]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6213      	str	r3, [r2, #32]
 8003848:	e00b      	b.n	8003862 <HAL_RCC_OscConfig+0x36e>
 800384a:	4b5b      	ldr	r3, [pc, #364]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a5a      	ldr	r2, [pc, #360]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6213      	str	r3, [r2, #32]
 8003856:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a57      	ldr	r2, [pc, #348]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	f023 0304 	bic.w	r3, r3, #4
 8003860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d015      	beq.n	8003896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7ff fadd 	bl	8002e28 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	e00a      	b.n	8003888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f7ff fad9 	bl	8002e28 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003880:	4293      	cmp	r3, r2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e0b1      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003888:	4b4b      	ldr	r3, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ee      	beq.n	8003872 <HAL_RCC_OscConfig+0x37e>
 8003894:	e014      	b.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7ff fac7 	bl	8002e28 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7ff fac3 	bl	8002e28 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e09b      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038b4:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ee      	bne.n	800389e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d105      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c6:	4b3c      	ldr	r3, [pc, #240]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	4a3b      	ldr	r2, [pc, #236]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8087 	beq.w	80039ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038dc:	4b36      	ldr	r3, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d061      	beq.n	80039ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d146      	bne.n	800397e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b33      	ldr	r3, [pc, #204]	@ (80039c0 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7ff fa97 	bl	8002e28 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7ff fa93 	bl	8002e28 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e06d      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003910:	4b29      	ldr	r3, [pc, #164]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003924:	d108      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003926:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4921      	ldr	r1, [pc, #132]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003938:	4b1f      	ldr	r3, [pc, #124]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a19      	ldr	r1, [r3, #32]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	430b      	orrs	r3, r1
 800394a:	491b      	ldr	r1, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1b      	ldr	r3, [pc, #108]	@ (80039c0 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7ff fa67 	bl	8002e28 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395e:	f7ff fa63 	bl	8002e28 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x46a>
 800397c:	e035      	b.n	80039ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_OscConfig+0x4cc>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7ff fa50 	bl	8002e28 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7ff fa4c 	bl	8002e28 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e026      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x498>
 80039aa:	e01e      	b.n	80039ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e019      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <HAL_RCC_OscConfig+0x500>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0d0      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d910      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1a:	4b67      	ldr	r3, [pc, #412]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 0207 	bic.w	r2, r3, #7
 8003a22:	4965      	ldr	r1, [pc, #404]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b63      	ldr	r3, [pc, #396]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0b8      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d020      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a54:	4b59      	ldr	r3, [pc, #356]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a58      	ldr	r2, [pc, #352]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a6c:	4b53      	ldr	r3, [pc, #332]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a52      	ldr	r2, [pc, #328]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b50      	ldr	r3, [pc, #320]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	494d      	ldr	r1, [pc, #308]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d040      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d115      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d107      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e073      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e06b      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4936      	ldr	r1, [pc, #216]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7ff f99e 	bl	8002e28 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7ff f99a 	bl	8002e28 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e053      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b06:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 020c 	and.w	r2, r3, #12
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d1eb      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b18:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d210      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b26:	4b24      	ldr	r3, [pc, #144]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	4922      	ldr	r1, [pc, #136]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e032      	b.n	8003bae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b54:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4916      	ldr	r1, [pc, #88]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b72:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	490e      	ldr	r1, [pc, #56]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b86:	f000 f821 	bl	8003bcc <HAL_RCC_GetSysClockFreq>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	490a      	ldr	r1, [pc, #40]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b98:	5ccb      	ldrb	r3, [r1, r3]
 8003b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9e:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f8fc 	bl	8002da4 <HAL_InitTick>

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40022000 	.word	0x40022000
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	0800af70 	.word	0x0800af70
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	20000004 	.word	0x20000004

08003bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	2300      	movs	r3, #0
 8003be0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003be6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x94>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x30>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x36>
 8003bfa:	e027      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bfe:	613b      	str	r3, [r7, #16]
      break;
 8003c00:	e027      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	0c9b      	lsrs	r3, r3, #18
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	4a17      	ldr	r2, [pc, #92]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c0c:	5cd3      	ldrb	r3, [r2, r3]
 8003c0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0c5b      	lsrs	r3, r3, #17
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	4a11      	ldr	r2, [pc, #68]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2e:	fb03 f202 	mul.w	r2, r3, r2
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e004      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c40:	fb02 f303 	mul.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	613b      	str	r3, [r7, #16]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c4e:	613b      	str	r3, [r7, #16]
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	693b      	ldr	r3, [r7, #16]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	007a1200 	.word	0x007a1200
 8003c68:	0800af88 	.word	0x0800af88
 8003c6c:	0800af98 	.word	0x0800af98
 8003c70:	003d0900 	.word	0x003d0900

08003c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c78:	4b02      	ldr	r3, [pc, #8]	@ (8003c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	20000000 	.word	0x20000000

08003c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c8c:	f7ff fff2 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	0800af80 	.word	0x0800af80

08003cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cb4:	f7ff ffde 	bl	8003c74 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	0adb      	lsrs	r3, r3, #11
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	0800af80 	.word	0x0800af80

08003cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <RCC_Delay+0x34>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <RCC_Delay+0x38>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a5b      	lsrs	r3, r3, #9
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf4:	bf00      	nop
  }
  while (Delay --);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	60fa      	str	r2, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f9      	bne.n	8003cf4 <RCC_Delay+0x1c>
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e041      	b.n	8003daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe fd8a 	bl	8002854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 fd40 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d001      	beq.n	8003dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e03a      	b.n	8003e42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a18      	ldr	r2, [pc, #96]	@ (8003e4c <HAL_TIM_Base_Start_IT+0x98>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00e      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df6:	d009      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a14      	ldr	r2, [pc, #80]	@ (8003e50 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_Base_Start_IT+0x58>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0307 	and.w	r3, r3, #7
 8003e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b06      	cmp	r3, #6
 8003e1c:	d010      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e007      	b.n	8003e40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40000400 	.word	0x40000400
 8003e54:	40000800 	.word	0x40000800

08003e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e041      	b.n	8003eee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe fcca 	bl	8002818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 fc9e 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_TIM_PWM_Start+0x24>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e022      	b.n	8003f62 <HAL_TIM_PWM_Start+0x6a>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d109      	bne.n	8003f36 <HAL_TIM_PWM_Start+0x3e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e015      	b.n	8003f62 <HAL_TIM_PWM_Start+0x6a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PWM_Start+0x58>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e008      	b.n	8003f62 <HAL_TIM_PWM_Start+0x6a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e05e      	b.n	8004028 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start+0x82>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f78:	e013      	b.n	8003fa2 <HAL_TIM_PWM_Start+0xaa>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x92>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f88:	e00b      	b.n	8003fa2 <HAL_TIM_PWM_Start+0xaa>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f98:	e003      	b.n	8003fa2 <HAL_TIM_PWM_Start+0xaa>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	6839      	ldr	r1, [r7, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fea0 	bl	8004cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <HAL_TIM_PWM_Start+0x138>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d107      	bne.n	8003fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <HAL_TIM_PWM_Start+0x138>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0xfa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fdc:	d009      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0xfa>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a14      	ldr	r2, [pc, #80]	@ (8004034 <HAL_TIM_PWM_Start+0x13c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d004      	beq.n	8003ff2 <HAL_TIM_PWM_Start+0xfa>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <HAL_TIM_PWM_Start+0x140>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d111      	bne.n	8004016 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b06      	cmp	r3, #6
 8004002:	d010      	beq.n	8004026 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004014:	e007      	b.n	8004026 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800

0800403c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e093      	b.n	8004178 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fe fc19 	bl	800289c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004080:	f023 0307 	bic.w	r3, r3, #7
 8004084:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 fba1 	bl	80047d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040be:	f023 0303 	bic.w	r3, r3, #3
 80040c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	4313      	orrs	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80040dc:	f023 030c 	bic.w	r3, r3, #12
 80040e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	4313      	orrs	r3, r2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	031b      	lsls	r3, r3, #12
 800410c:	4313      	orrs	r3, r2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	4313      	orrs	r3, r2
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004190:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004198:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d110      	bne.n	80041d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d102      	bne.n	80041bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e069      	b.n	8004294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d0:	e031      	b.n	8004236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d110      	bne.n	80041fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041de:	7b3b      	ldrb	r3, [r7, #12]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d001      	beq.n	80041e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e055      	b.n	8004294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f8:	e01d      	b.n	8004236 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d108      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004200:	7bbb      	ldrb	r3, [r7, #14]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d105      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004206:	7b7b      	ldrb	r3, [r7, #13]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800420c:	7b3b      	ldrb	r3, [r7, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e03e      	b.n	8004294 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_TIM_Encoder_Start+0xc4>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d008      	beq.n	8004254 <HAL_TIM_Encoder_Start+0xd4>
 8004242:	e00f      	b.n	8004264 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2201      	movs	r2, #1
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd4f 	bl	8004cf0 <TIM_CCxChannelCmd>
      break;
 8004252:	e016      	b.n	8004282 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	2104      	movs	r1, #4
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fd47 	bl	8004cf0 <TIM_CCxChannelCmd>
      break;
 8004262:	e00e      	b.n	8004282 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fd3f 	bl	8004cf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	2104      	movs	r1, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fd38 	bl	8004cf0 <TIM_CCxChannelCmd>
      break;
 8004280:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0202 	mvn.w	r2, #2
 80042d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa5a 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80042ec:	e005      	b.n	80042fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa4d 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa5c 	bl	80047b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d020      	beq.n	800434c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0204 	mvn.w	r2, #4
 800431c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa34 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004338:	e005      	b.n	8004346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa27 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa36 	bl	80047b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0208 	mvn.w	r2, #8
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa0e 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa01 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa10 	bl	80047b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d020      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d01b      	beq.n	80043e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f06f 0210 	mvn.w	r2, #16
 80043b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2208      	movs	r2, #8
 80043ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9e8 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80043d0:	e005      	b.n	80043de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9db 	bl	800478e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f9ea 	bl	80047b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0201 	mvn.w	r2, #1
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd fdf0 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00c      	beq.n	800442c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d007      	beq.n	800442c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fd3e 	bl	8004ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9ba 	bl	80047c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0220 	mvn.w	r2, #32
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fd11 	bl	8004e96 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004496:	2302      	movs	r3, #2
 8004498:	e0ae      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	f200 809f 	bhi.w	80045e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080045e9 	.word	0x080045e9
 80044b8:	080045e9 	.word	0x080045e9
 80044bc:	080045e9 	.word	0x080045e9
 80044c0:	08004525 	.word	0x08004525
 80044c4:	080045e9 	.word	0x080045e9
 80044c8:	080045e9 	.word	0x080045e9
 80044cc:	080045e9 	.word	0x080045e9
 80044d0:	08004567 	.word	0x08004567
 80044d4:	080045e9 	.word	0x080045e9
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	080045e9 	.word	0x080045e9
 80044e0:	080045a7 	.word	0x080045a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f9e2 	bl	80048b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	619a      	str	r2, [r3, #24]
      break;
 8004522:	e064      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa28 	bl	8004980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800453e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6999      	ldr	r1, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	619a      	str	r2, [r3, #24]
      break;
 8004564:	e043      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa71 	bl	8004a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0208 	orr.w	r2, r2, #8
 8004580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0204 	bic.w	r2, r2, #4
 8004590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	61da      	str	r2, [r3, #28]
      break;
 80045a4:	e023      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fabb 	bl	8004b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69d9      	ldr	r1, [r3, #28]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	61da      	str	r2, [r3, #28]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]
      break;
 80045ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIM_ConfigClockSource+0x1c>
 8004618:	2302      	movs	r3, #2
 800461a:	e0b4      	b.n	8004786 <HAL_TIM_ConfigClockSource+0x186>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800463a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004654:	d03e      	beq.n	80046d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465a:	f200 8087 	bhi.w	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004662:	f000 8086 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x172>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466a:	d87f      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b70      	cmp	r3, #112	@ 0x70
 800466e:	d01a      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004670:	2b70      	cmp	r3, #112	@ 0x70
 8004672:	d87b      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b60      	cmp	r3, #96	@ 0x60
 8004676:	d050      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x11a>
 8004678:	2b60      	cmp	r3, #96	@ 0x60
 800467a:	d877      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b50      	cmp	r3, #80	@ 0x50
 800467e:	d03c      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0xfa>
 8004680:	2b50      	cmp	r3, #80	@ 0x50
 8004682:	d873      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b40      	cmp	r3, #64	@ 0x40
 8004686:	d058      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x13a>
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d86f      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b30      	cmp	r3, #48	@ 0x30
 800468e:	d064      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b30      	cmp	r3, #48	@ 0x30
 8004692:	d86b      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d060      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d867      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05c      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d05a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	e062      	b.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046b6:	f000 fafc 	bl	8004cb2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]
      break;
 80046d2:	e04f      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e4:	f000 fae5 	bl	8004cb2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046f6:	609a      	str	r2, [r3, #8]
      break;
 80046f8:	e03c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004706:	461a      	mov	r2, r3
 8004708:	f000 fa5c 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2150      	movs	r1, #80	@ 0x50
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fab3 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004718:	e02c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004726:	461a      	mov	r2, r3
 8004728:	f000 fa7a 	bl	8004c20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2160      	movs	r1, #96	@ 0x60
 8004732:	4618      	mov	r0, r3
 8004734:	f000 faa3 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004738:	e01c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fa3c 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2140      	movs	r1, #64	@ 0x40
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa93 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004758:	e00c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f000 fa8a 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 800476a:	e003      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e000      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr

080047c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
	...

080047d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2f      	ldr	r2, [pc, #188]	@ (80048a8 <TIM_Base_SetConfig+0xd0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0x30>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0x30>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	@ (80048ac <TIM_Base_SetConfig+0xd4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0x30>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a2b      	ldr	r2, [pc, #172]	@ (80048b0 <TIM_Base_SetConfig+0xd8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d108      	bne.n	800481a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a22      	ldr	r2, [pc, #136]	@ (80048a8 <TIM_Base_SetConfig+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_Base_SetConfig+0x62>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d007      	beq.n	800483a <TIM_Base_SetConfig+0x62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <TIM_Base_SetConfig+0xd4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_Base_SetConfig+0x62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <TIM_Base_SetConfig+0xd8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0d      	ldr	r2, [pc, #52]	@ (80048a8 <TIM_Base_SetConfig+0xd0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800

080048b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0201 	bic.w	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1c      	ldr	r2, [pc, #112]	@ (800497c <TIM_OC1_SetConfig+0xc8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a13      	ldr	r2, [pc, #76]	@ (800497c <TIM_OC1_SetConfig+0xc8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d111      	bne.n	8004956 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00

08004980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0210 	bic.w	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0320 	bic.w	r3, r3, #32
 80049ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <TIM_OC2_SetConfig+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a14      	ldr	r2, [pc, #80]	@ (8004a50 <TIM_OC2_SetConfig+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d113      	bne.n	8004a2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	@ (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10d      	bne.n	8004ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	@ (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <TIM_OC4_SetConfig+0x98>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d109      	bne.n	8004b9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	40012c00 	.word	0x40012c00

08004bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 030a 	bic.w	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0210 	bic.w	r2, r3, #16
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	021a      	lsls	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2201      	movs	r2, #1
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	fa01 f303 	lsl.w	r3, r1, r3
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e046      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800

08004df4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e03d      	b.n	8004e8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e042      	b.n	8004f52 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fd fd7b 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2224      	movs	r2, #36	@ 0x24
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004efc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fdb8 	bl	8005a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b08a      	sub	sp, #40	@ 0x28
 8004f5e:	af02      	add	r7, sp, #8
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d175      	bne.n	8005066 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_UART_Transmit+0x2c>
 8004f80:	88fb      	ldrh	r3, [r7, #6]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e06e      	b.n	8005068 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	@ 0x21
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f98:	f7fd ff46 	bl	8002e28 <HAL_GetTick>
 8004f9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fb2:	d108      	bne.n	8004fc6 <HAL_UART_Transmit+0x6c>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d104      	bne.n	8004fc6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e003      	b.n	8004fce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fce:	e02e      	b.n	800502e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fb1d 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e03a      	b.n	8005068 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005006:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	3302      	adds	r3, #2
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	e007      	b.n	8005020 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	3301      	adds	r3, #1
 800501e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1cb      	bne.n	8004fd0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2200      	movs	r2, #0
 8005040:	2140      	movs	r1, #64	@ 0x40
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fae9 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e006      	b.n	8005068 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005066:	2302      	movs	r3, #2
  }
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	d112      	bne.n	80050b0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <HAL_UART_Receive_IT+0x26>
 8005090:	88fb      	ldrh	r3, [r7, #6]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e00b      	b.n	80050b2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fb10 	bl	80056cc <UART_Start_Receive_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	e000      	b.n	80050b2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b0ba      	sub	sp, #232	@ 0xe8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10f      	bne.n	8005122 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <HAL_UART_IRQHandler+0x66>
 800510e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fbec 	bl	80058f8 <UART_Receive_IT>
      return;
 8005120:	e25b      	b.n	80055da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80de 	beq.w	80052e8 <HAL_UART_IRQHandler+0x22c>
 800512c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800513c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 80d1 	beq.w	80052e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <HAL_UART_IRQHandler+0xae>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800515a:	2b00      	cmp	r3, #0
 800515c:	d005      	beq.n	800516a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	f043 0201 	orr.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00b      	beq.n	800518e <HAL_UART_IRQHandler+0xd2>
 8005176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005186:	f043 0202 	orr.w	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_UART_IRQHandler+0xf6>
 800519a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051aa:	f043 0204 	orr.w	r2, r3, #4
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <HAL_UART_IRQHandler+0x126>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	f043 0208 	orr.w	r2, r3, #8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 81f2 	beq.w	80055d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_UART_IRQHandler+0x14e>
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fb77 	bl	80058f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <HAL_UART_IRQHandler+0x17a>
 800522e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04f      	beq.n	80052d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa81 	bl	800573e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d041      	beq.n	80052ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005268:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005276:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800527a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800528e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1d9      	bne.n	800524a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d013      	beq.n	80052c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a2:	4a7e      	ldr	r2, [pc, #504]	@ (800549c <HAL_UART_IRQHandler+0x3e0>)
 80052a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd ff0e 	bl	80030cc <HAL_DMA_Abort_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052c0:	4610      	mov	r0, r2
 80052c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c4:	e00e      	b.n	80052e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f993 	bl	80055f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	e00a      	b.n	80052e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f98f 	bl	80055f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d4:	e006      	b.n	80052e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f98b 	bl	80055f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052e2:	e175      	b.n	80055d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e4:	bf00      	nop
    return;
 80052e6:	e173      	b.n	80055d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	f040 814f 	bne.w	8005590 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8148 	beq.w	8005590 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8141 	beq.w	8005590 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80b6 	beq.w	80054a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8145 	beq.w	80055d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800534e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005352:	429a      	cmp	r2, r3
 8005354:	f080 813e 	bcs.w	80055d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800535e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b20      	cmp	r3, #32
 8005368:	f000 8088 	beq.w	800547c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800538a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005398:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800539c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1d9      	bne.n	800536c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3314      	adds	r3, #20
 80053be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3314      	adds	r3, #20
 80053d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e1      	bne.n	80053b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005418:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800541a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800541e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800544a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800545e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005460:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800546c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	4618      	mov	r0, r3
 8005478:	f7fd fded 	bl	8003056 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800548a:	b29b      	uxth	r3, r3
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	b29b      	uxth	r3, r3
 8005490:	4619      	mov	r1, r3
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8b6 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005498:	e09c      	b.n	80055d4 <HAL_UART_IRQHandler+0x518>
 800549a:	bf00      	nop
 800549c:	08005803 	.word	0x08005803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 808e 	beq.w	80055d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8089 	beq.w	80055d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80054ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e3      	bne.n	80054c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3314      	adds	r3, #20
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	623b      	str	r3, [r7, #32]
   return(result);
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005522:	633a      	str	r2, [r7, #48]	@ 0x30
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e3      	bne.n	80054fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	60fb      	str	r3, [r7, #12]
   return(result);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0310 	bic.w	r3, r3, #16
 800555a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005568:	61fa      	str	r2, [r7, #28]
 800556a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	617b      	str	r3, [r7, #20]
   return(result);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e3      	bne.n	8005544 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005582:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f83b 	bl	8005604 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800558e:	e023      	b.n	80055d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	d009      	beq.n	80055b0 <HAL_UART_IRQHandler+0x4f4>
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f93e 	bl	800582a <UART_Transmit_IT>
    return;
 80055ae:	e014      	b.n	80055da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_UART_IRQHandler+0x51e>
 80055bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f97d 	bl	80058c8 <UART_EndTransmit_IT>
    return;
 80055ce:	e004      	b.n	80055da <HAL_UART_IRQHandler+0x51e>
    return;
 80055d0:	bf00      	nop
 80055d2:	e002      	b.n	80055da <HAL_UART_IRQHandler+0x51e>
      return;
 80055d4:	bf00      	nop
 80055d6:	e000      	b.n	80055da <HAL_UART_IRQHandler+0x51e>
      return;
 80055d8:	bf00      	nop
  }
}
 80055da:	37e8      	adds	r7, #232	@ 0xe8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b086      	sub	sp, #24
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	e03b      	b.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d037      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005634:	f7fd fbf8 	bl	8002e28 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	6a3a      	ldr	r2, [r7, #32]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <UART_WaitOnFlagUntilTimeout+0x30>
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e03a      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d023      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b80      	cmp	r3, #128	@ 0x80
 8005660:	d020      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	d01d      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d116      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f856 	bl	800573e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2208      	movs	r2, #8
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e00f      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d0b4      	beq.n	800562c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	88fa      	ldrh	r2, [r7, #6]
 80056ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2222      	movs	r2, #34	@ 0x22
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005710:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0220 	orr.w	r2, r2, #32
 8005730:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573e:	b480      	push	{r7}
 8005740:	b095      	sub	sp, #84	@ 0x54
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	330c      	adds	r3, #12
 8005764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005766:	643a      	str	r2, [r7, #64]	@ 0x40
 8005768:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	61fb      	str	r3, [r7, #28]
   return(result);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800579a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800579c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d119      	bne.n	80057ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057d6:	61ba      	str	r2, [r7, #24]
 80057d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6979      	ldr	r1, [r7, #20]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	613b      	str	r3, [r7, #16]
   return(result);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057f8:	bf00      	nop
 80057fa:	3754      	adds	r7, #84	@ 0x54
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr

08005802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff fee8 	bl	80055f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b21      	cmp	r3, #33	@ 0x21
 800583c:	d13e      	bne.n	80058bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005846:	d114      	bne.n	8005872 <UART_Transmit_IT+0x48>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d110      	bne.n	8005872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	1c9a      	adds	r2, r3, #2
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]
 8005870:	e008      	b.n	8005884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6211      	str	r1, [r2, #32]
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b01      	subs	r3, #1
 800588c:	b29b      	uxth	r3, r3
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4619      	mov	r1, r3
 8005892:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10f      	bne.n	80058b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fe79 	bl	80055e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	@ 0x30
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b22      	cmp	r3, #34	@ 0x22
 800590a:	f040 80ae 	bne.w	8005a6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005916:	d117      	bne.n	8005948 <UART_Receive_IT+0x50>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d113      	bne.n	8005948 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	b29a      	uxth	r2, r3
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
 8005946:	e026      	b.n	8005996 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800595a:	d007      	beq.n	800596c <UART_Receive_IT+0x74>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <UART_Receive_IT+0x82>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e008      	b.n	800598c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005986:	b2da      	uxtb	r2, r3
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4619      	mov	r1, r3
 80059a4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d15d      	bne.n	8005a66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0220 	bic.w	r2, r2, #32
 80059b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d135      	bne.n	8005a5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	613b      	str	r3, [r7, #16]
   return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a16:	623a      	str	r2, [r7, #32]
 8005a18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	69f9      	ldr	r1, [r7, #28]
 8005a1c:	6a3a      	ldr	r2, [r7, #32]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e5      	bne.n	80059f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d10a      	bne.n	8005a4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fdd5 	bl	8005604 <HAL_UARTEx_RxEventCallback>
 8005a5a:	e002      	b.n	8005a62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fc fb81 	bl	8002164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e002      	b.n	8005a6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	e000      	b.n	8005a6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a6a:	2302      	movs	r3, #2
  }
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3730      	adds	r7, #48	@ 0x30
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005aae:	f023 030c 	bic.w	r3, r3, #12
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b88 <UART_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d103      	bne.n	8005ae4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005adc:	f7fe f8e8 	bl	8003cb0 <HAL_RCC_GetPCLK2Freq>
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	e002      	b.n	8005aea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f7fe f8d0 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8005ae8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009a      	lsls	r2, r3, #2
 8005af4:	441a      	add	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	4a22      	ldr	r2, [pc, #136]	@ (8005b8c <UART_SetConfig+0x118>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	0119      	lsls	r1, r3, #4
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009a      	lsls	r2, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b20:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <UART_SetConfig+0x118>)
 8005b22:	fba3 0302 	umull	r0, r3, r3, r2
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	2064      	movs	r0, #100	@ 0x64
 8005b2a:	fb00 f303 	mul.w	r3, r0, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	3332      	adds	r3, #50	@ 0x32
 8005b34:	4a15      	ldr	r2, [pc, #84]	@ (8005b8c <UART_SetConfig+0x118>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b40:	4419      	add	r1, r3
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009a      	lsls	r2, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b58:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <UART_SetConfig+0x118>)
 8005b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2064      	movs	r0, #100	@ 0x64
 8005b62:	fb00 f303 	mul.w	r3, r0, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	@ 0x32
 8005b6c:	4a07      	ldr	r2, [pc, #28]	@ (8005b8c <UART_SetConfig+0x118>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40013800 	.word	0x40013800
 8005b8c:	51eb851f 	.word	0x51eb851f

08005b90 <atof>:
 8005b90:	2100      	movs	r1, #0
 8005b92:	f000 bdff 	b.w	8006794 <strtod>

08005b96 <sulp>:
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	4690      	mov	r8, r2
 8005b9e:	f003 fcd7 	bl	8009550 <__ulp>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	f1b8 0f00 	cmp.w	r8, #0
 8005baa:	d011      	beq.n	8005bd0 <sulp+0x3a>
 8005bac:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005bb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dd0b      	ble.n	8005bd0 <sulp+0x3a>
 8005bb8:	2400      	movs	r4, #0
 8005bba:	051b      	lsls	r3, r3, #20
 8005bbc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005bc0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	f7fa fc86 	bl	80004d8 <__aeabi_dmul>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005bd8 <_strtod_l>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	b09f      	sub	sp, #124	@ 0x7c
 8005bde:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005be0:	2200      	movs	r2, #0
 8005be2:	460c      	mov	r4, r1
 8005be4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005be6:	f04f 0a00 	mov.w	sl, #0
 8005bea:	f04f 0b00 	mov.w	fp, #0
 8005bee:	460a      	mov	r2, r1
 8005bf0:	9005      	str	r0, [sp, #20]
 8005bf2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bf4:	7811      	ldrb	r1, [r2, #0]
 8005bf6:	292b      	cmp	r1, #43	@ 0x2b
 8005bf8:	d048      	beq.n	8005c8c <_strtod_l+0xb4>
 8005bfa:	d836      	bhi.n	8005c6a <_strtod_l+0x92>
 8005bfc:	290d      	cmp	r1, #13
 8005bfe:	d830      	bhi.n	8005c62 <_strtod_l+0x8a>
 8005c00:	2908      	cmp	r1, #8
 8005c02:	d830      	bhi.n	8005c66 <_strtod_l+0x8e>
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d039      	beq.n	8005c7c <_strtod_l+0xa4>
 8005c08:	2200      	movs	r2, #0
 8005c0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005c0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005c0e:	782a      	ldrb	r2, [r5, #0]
 8005c10:	2a30      	cmp	r2, #48	@ 0x30
 8005c12:	f040 80b1 	bne.w	8005d78 <_strtod_l+0x1a0>
 8005c16:	786a      	ldrb	r2, [r5, #1]
 8005c18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c1c:	2a58      	cmp	r2, #88	@ 0x58
 8005c1e:	d16c      	bne.n	8005cfa <_strtod_l+0x122>
 8005c20:	9302      	str	r3, [sp, #8]
 8005c22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c24:	4a8e      	ldr	r2, [pc, #568]	@ (8005e60 <_strtod_l+0x288>)
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	ab1a      	add	r3, sp, #104	@ 0x68
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	9805      	ldr	r0, [sp, #20]
 8005c2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005c30:	a919      	add	r1, sp, #100	@ 0x64
 8005c32:	f002 fd81 	bl	8008738 <__gethex>
 8005c36:	f010 060f 	ands.w	r6, r0, #15
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	d005      	beq.n	8005c4a <_strtod_l+0x72>
 8005c3e:	2e06      	cmp	r6, #6
 8005c40:	d126      	bne.n	8005c90 <_strtod_l+0xb8>
 8005c42:	2300      	movs	r3, #0
 8005c44:	3501      	adds	r5, #1
 8005c46:	9519      	str	r5, [sp, #100]	@ 0x64
 8005c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8584 	bne.w	800675a <_strtod_l+0xb82>
 8005c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c54:	b1bb      	cbz	r3, 8005c86 <_strtod_l+0xae>
 8005c56:	4650      	mov	r0, sl
 8005c58:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005c5c:	b01f      	add	sp, #124	@ 0x7c
 8005c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c62:	2920      	cmp	r1, #32
 8005c64:	d1d0      	bne.n	8005c08 <_strtod_l+0x30>
 8005c66:	3201      	adds	r2, #1
 8005c68:	e7c3      	b.n	8005bf2 <_strtod_l+0x1a>
 8005c6a:	292d      	cmp	r1, #45	@ 0x2d
 8005c6c:	d1cc      	bne.n	8005c08 <_strtod_l+0x30>
 8005c6e:	2101      	movs	r1, #1
 8005c70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005c72:	1c51      	adds	r1, r2, #1
 8005c74:	9119      	str	r1, [sp, #100]	@ 0x64
 8005c76:	7852      	ldrb	r2, [r2, #1]
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	d1c7      	bne.n	8005c0c <_strtod_l+0x34>
 8005c7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c7e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 8568 	bne.w	8006756 <_strtod_l+0xb7e>
 8005c86:	4650      	mov	r0, sl
 8005c88:	4659      	mov	r1, fp
 8005c8a:	e7e7      	b.n	8005c5c <_strtod_l+0x84>
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	e7ef      	b.n	8005c70 <_strtod_l+0x98>
 8005c90:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005c92:	b13a      	cbz	r2, 8005ca4 <_strtod_l+0xcc>
 8005c94:	2135      	movs	r1, #53	@ 0x35
 8005c96:	a81c      	add	r0, sp, #112	@ 0x70
 8005c98:	f003 fd4a 	bl	8009730 <__copybits>
 8005c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c9e:	9805      	ldr	r0, [sp, #20]
 8005ca0:	f003 f924 	bl	8008eec <_Bfree>
 8005ca4:	3e01      	subs	r6, #1
 8005ca6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005ca8:	2e04      	cmp	r6, #4
 8005caa:	d806      	bhi.n	8005cba <_strtod_l+0xe2>
 8005cac:	e8df f006 	tbb	[pc, r6]
 8005cb0:	201d0314 	.word	0x201d0314
 8005cb4:	14          	.byte	0x14
 8005cb5:	00          	.byte	0x00
 8005cb6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005cba:	05e1      	lsls	r1, r4, #23
 8005cbc:	bf48      	it	mi
 8005cbe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005cc2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005cc6:	0d1b      	lsrs	r3, r3, #20
 8005cc8:	051b      	lsls	r3, r3, #20
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1bd      	bne.n	8005c4a <_strtod_l+0x72>
 8005cce:	f001 fdbf 	bl	8007850 <__errno>
 8005cd2:	2322      	movs	r3, #34	@ 0x22
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	e7b8      	b.n	8005c4a <_strtod_l+0x72>
 8005cd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005cdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ce0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ce4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ce8:	e7e7      	b.n	8005cba <_strtod_l+0xe2>
 8005cea:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005e64 <_strtod_l+0x28c>
 8005cee:	e7e4      	b.n	8005cba <_strtod_l+0xe2>
 8005cf0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005cf4:	f04f 3aff 	mov.w	sl, #4294967295
 8005cf8:	e7df      	b.n	8005cba <_strtod_l+0xe2>
 8005cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b30      	cmp	r3, #48	@ 0x30
 8005d04:	d0f9      	beq.n	8005cfa <_strtod_l+0x122>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d09f      	beq.n	8005c4a <_strtod_l+0x72>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d10:	220a      	movs	r2, #10
 8005d12:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d14:	2300      	movs	r3, #0
 8005d16:	461f      	mov	r7, r3
 8005d18:	9308      	str	r3, [sp, #32]
 8005d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d1c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005d1e:	7805      	ldrb	r5, [r0, #0]
 8005d20:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005d24:	b2d9      	uxtb	r1, r3
 8005d26:	2909      	cmp	r1, #9
 8005d28:	d928      	bls.n	8005d7c <_strtod_l+0x1a4>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	494e      	ldr	r1, [pc, #312]	@ (8005e68 <_strtod_l+0x290>)
 8005d2e:	f001 fcd6 	bl	80076de <strncmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d032      	beq.n	8005d9c <_strtod_l+0x1c4>
 8005d36:	2000      	movs	r0, #0
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4681      	mov	r9, r0
 8005d3c:	463d      	mov	r5, r7
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2a65      	cmp	r2, #101	@ 0x65
 8005d42:	d001      	beq.n	8005d48 <_strtod_l+0x170>
 8005d44:	2a45      	cmp	r2, #69	@ 0x45
 8005d46:	d114      	bne.n	8005d72 <_strtod_l+0x19a>
 8005d48:	b91d      	cbnz	r5, 8005d52 <_strtod_l+0x17a>
 8005d4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d4c:	4302      	orrs	r2, r0
 8005d4e:	d095      	beq.n	8005c7c <_strtod_l+0xa4>
 8005d50:	2500      	movs	r5, #0
 8005d52:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005d54:	1c62      	adds	r2, r4, #1
 8005d56:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d58:	7862      	ldrb	r2, [r4, #1]
 8005d5a:	2a2b      	cmp	r2, #43	@ 0x2b
 8005d5c:	d077      	beq.n	8005e4e <_strtod_l+0x276>
 8005d5e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005d60:	d07b      	beq.n	8005e5a <_strtod_l+0x282>
 8005d62:	f04f 0c00 	mov.w	ip, #0
 8005d66:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005d6a:	2909      	cmp	r1, #9
 8005d6c:	f240 8082 	bls.w	8005e74 <_strtod_l+0x29c>
 8005d70:	9419      	str	r4, [sp, #100]	@ 0x64
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	e0a2      	b.n	8005ebe <_strtod_l+0x2e6>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e7c7      	b.n	8005d0c <_strtod_l+0x134>
 8005d7c:	2f08      	cmp	r7, #8
 8005d7e:	bfd5      	itete	le
 8005d80:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005d82:	9908      	ldrgt	r1, [sp, #32]
 8005d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d88:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d8c:	f100 0001 	add.w	r0, r0, #1
 8005d90:	bfd4      	ite	le
 8005d92:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005d94:	9308      	strgt	r3, [sp, #32]
 8005d96:	3701      	adds	r7, #1
 8005d98:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d9a:	e7bf      	b.n	8005d1c <_strtod_l+0x144>
 8005d9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005da2:	785a      	ldrb	r2, [r3, #1]
 8005da4:	b37f      	cbz	r7, 8005e06 <_strtod_l+0x22e>
 8005da6:	4681      	mov	r9, r0
 8005da8:	463d      	mov	r5, r7
 8005daa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005dae:	2b09      	cmp	r3, #9
 8005db0:	d912      	bls.n	8005dd8 <_strtod_l+0x200>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e7c4      	b.n	8005d40 <_strtod_l+0x168>
 8005db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db8:	3001      	adds	r0, #1
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8005dbe:	785a      	ldrb	r2, [r3, #1]
 8005dc0:	2a30      	cmp	r2, #48	@ 0x30
 8005dc2:	d0f8      	beq.n	8005db6 <_strtod_l+0x1de>
 8005dc4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	f200 84cb 	bhi.w	8006764 <_strtod_l+0xb8c>
 8005dce:	4681      	mov	r9, r0
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8005dd8:	3a30      	subs	r2, #48	@ 0x30
 8005dda:	f100 0301 	add.w	r3, r0, #1
 8005dde:	d02a      	beq.n	8005e36 <_strtod_l+0x25e>
 8005de0:	4499      	add	r9, r3
 8005de2:	210a      	movs	r1, #10
 8005de4:	462b      	mov	r3, r5
 8005de6:	eb00 0c05 	add.w	ip, r0, r5
 8005dea:	4563      	cmp	r3, ip
 8005dec:	d10d      	bne.n	8005e0a <_strtod_l+0x232>
 8005dee:	1c69      	adds	r1, r5, #1
 8005df0:	4401      	add	r1, r0
 8005df2:	4428      	add	r0, r5
 8005df4:	2808      	cmp	r0, #8
 8005df6:	dc16      	bgt.n	8005e26 <_strtod_l+0x24e>
 8005df8:	230a      	movs	r3, #10
 8005dfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005dfc:	fb03 2300 	mla	r3, r3, r0, r2
 8005e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e02:	2300      	movs	r3, #0
 8005e04:	e018      	b.n	8005e38 <_strtod_l+0x260>
 8005e06:	4638      	mov	r0, r7
 8005e08:	e7da      	b.n	8005dc0 <_strtod_l+0x1e8>
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	f103 0301 	add.w	r3, r3, #1
 8005e10:	dc03      	bgt.n	8005e1a <_strtod_l+0x242>
 8005e12:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005e14:	434e      	muls	r6, r1
 8005e16:	960a      	str	r6, [sp, #40]	@ 0x28
 8005e18:	e7e7      	b.n	8005dea <_strtod_l+0x212>
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	bfde      	ittt	le
 8005e1e:	9e08      	ldrle	r6, [sp, #32]
 8005e20:	434e      	mulle	r6, r1
 8005e22:	9608      	strle	r6, [sp, #32]
 8005e24:	e7e1      	b.n	8005dea <_strtod_l+0x212>
 8005e26:	280f      	cmp	r0, #15
 8005e28:	dceb      	bgt.n	8005e02 <_strtod_l+0x22a>
 8005e2a:	230a      	movs	r3, #10
 8005e2c:	9808      	ldr	r0, [sp, #32]
 8005e2e:	fb03 2300 	mla	r3, r3, r0, r2
 8005e32:	9308      	str	r3, [sp, #32]
 8005e34:	e7e5      	b.n	8005e02 <_strtod_l+0x22a>
 8005e36:	4629      	mov	r1, r5
 8005e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	1c50      	adds	r0, r2, #1
 8005e3e:	9019      	str	r0, [sp, #100]	@ 0x64
 8005e40:	7852      	ldrb	r2, [r2, #1]
 8005e42:	4618      	mov	r0, r3
 8005e44:	e7b1      	b.n	8005daa <_strtod_l+0x1d2>
 8005e46:	f04f 0900 	mov.w	r9, #0
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e77d      	b.n	8005d4a <_strtod_l+0x172>
 8005e4e:	f04f 0c00 	mov.w	ip, #0
 8005e52:	1ca2      	adds	r2, r4, #2
 8005e54:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e56:	78a2      	ldrb	r2, [r4, #2]
 8005e58:	e785      	b.n	8005d66 <_strtod_l+0x18e>
 8005e5a:	f04f 0c01 	mov.w	ip, #1
 8005e5e:	e7f8      	b.n	8005e52 <_strtod_l+0x27a>
 8005e60:	0800afb0 	.word	0x0800afb0
 8005e64:	7ff00000 	.word	0x7ff00000
 8005e68:	0800af9a 	.word	0x0800af9a
 8005e6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e6e:	1c51      	adds	r1, r2, #1
 8005e70:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e72:	7852      	ldrb	r2, [r2, #1]
 8005e74:	2a30      	cmp	r2, #48	@ 0x30
 8005e76:	d0f9      	beq.n	8005e6c <_strtod_l+0x294>
 8005e78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005e7c:	2908      	cmp	r1, #8
 8005e7e:	f63f af78 	bhi.w	8005d72 <_strtod_l+0x19a>
 8005e82:	f04f 080a 	mov.w	r8, #10
 8005e86:	3a30      	subs	r2, #48	@ 0x30
 8005e88:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005e8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e90:	1c56      	adds	r6, r2, #1
 8005e92:	9619      	str	r6, [sp, #100]	@ 0x64
 8005e94:	7852      	ldrb	r2, [r2, #1]
 8005e96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005e9a:	f1be 0f09 	cmp.w	lr, #9
 8005e9e:	d939      	bls.n	8005f14 <_strtod_l+0x33c>
 8005ea0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ea2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005ea6:	1a76      	subs	r6, r6, r1
 8005ea8:	2e08      	cmp	r6, #8
 8005eaa:	dc03      	bgt.n	8005eb4 <_strtod_l+0x2dc>
 8005eac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005eae:	4588      	cmp	r8, r1
 8005eb0:	bfa8      	it	ge
 8005eb2:	4688      	movge	r8, r1
 8005eb4:	f1bc 0f00 	cmp.w	ip, #0
 8005eb8:	d001      	beq.n	8005ebe <_strtod_l+0x2e6>
 8005eba:	f1c8 0800 	rsb	r8, r8, #0
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	d14e      	bne.n	8005f60 <_strtod_l+0x388>
 8005ec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ec4:	4308      	orrs	r0, r1
 8005ec6:	f47f aec0 	bne.w	8005c4a <_strtod_l+0x72>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f aed6 	bne.w	8005c7c <_strtod_l+0xa4>
 8005ed0:	2a69      	cmp	r2, #105	@ 0x69
 8005ed2:	d028      	beq.n	8005f26 <_strtod_l+0x34e>
 8005ed4:	dc25      	bgt.n	8005f22 <_strtod_l+0x34a>
 8005ed6:	2a49      	cmp	r2, #73	@ 0x49
 8005ed8:	d025      	beq.n	8005f26 <_strtod_l+0x34e>
 8005eda:	2a4e      	cmp	r2, #78	@ 0x4e
 8005edc:	f47f aece 	bne.w	8005c7c <_strtod_l+0xa4>
 8005ee0:	499a      	ldr	r1, [pc, #616]	@ (800614c <_strtod_l+0x574>)
 8005ee2:	a819      	add	r0, sp, #100	@ 0x64
 8005ee4:	f002 fe4a 	bl	8008b7c <__match>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f43f aec7 	beq.w	8005c7c <_strtod_l+0xa4>
 8005eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b28      	cmp	r3, #40	@ 0x28
 8005ef4:	d12e      	bne.n	8005f54 <_strtod_l+0x37c>
 8005ef6:	4996      	ldr	r1, [pc, #600]	@ (8006150 <_strtod_l+0x578>)
 8005ef8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005efa:	a819      	add	r0, sp, #100	@ 0x64
 8005efc:	f002 fe52 	bl	8008ba4 <__hexnan>
 8005f00:	2805      	cmp	r0, #5
 8005f02:	d127      	bne.n	8005f54 <_strtod_l+0x37c>
 8005f04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005f0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005f0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005f12:	e69a      	b.n	8005c4a <_strtod_l+0x72>
 8005f14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005f16:	fb08 2101 	mla	r1, r8, r1, r2
 8005f1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005f1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f20:	e7b5      	b.n	8005e8e <_strtod_l+0x2b6>
 8005f22:	2a6e      	cmp	r2, #110	@ 0x6e
 8005f24:	e7da      	b.n	8005edc <_strtod_l+0x304>
 8005f26:	498b      	ldr	r1, [pc, #556]	@ (8006154 <_strtod_l+0x57c>)
 8005f28:	a819      	add	r0, sp, #100	@ 0x64
 8005f2a:	f002 fe27 	bl	8008b7c <__match>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f43f aea4 	beq.w	8005c7c <_strtod_l+0xa4>
 8005f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f36:	4988      	ldr	r1, [pc, #544]	@ (8006158 <_strtod_l+0x580>)
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	a819      	add	r0, sp, #100	@ 0x64
 8005f3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f3e:	f002 fe1d 	bl	8008b7c <__match>
 8005f42:	b910      	cbnz	r0, 8005f4a <_strtod_l+0x372>
 8005f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f46:	3301      	adds	r3, #1
 8005f48:	9319      	str	r3, [sp, #100]	@ 0x64
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800615c <_strtod_l+0x584>
 8005f52:	e67a      	b.n	8005c4a <_strtod_l+0x72>
 8005f54:	4882      	ldr	r0, [pc, #520]	@ (8006160 <_strtod_l+0x588>)
 8005f56:	f001 fcc5 	bl	80078e4 <nan>
 8005f5a:	4682      	mov	sl, r0
 8005f5c:	468b      	mov	fp, r1
 8005f5e:	e674      	b.n	8005c4a <_strtod_l+0x72>
 8005f60:	eba8 0309 	sub.w	r3, r8, r9
 8005f64:	2f00      	cmp	r7, #0
 8005f66:	bf08      	it	eq
 8005f68:	462f      	moveq	r7, r5
 8005f6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f6c:	2d10      	cmp	r5, #16
 8005f6e:	462c      	mov	r4, r5
 8005f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f72:	bfa8      	it	ge
 8005f74:	2410      	movge	r4, #16
 8005f76:	f7fa fa35 	bl	80003e4 <__aeabi_ui2d>
 8005f7a:	2d09      	cmp	r5, #9
 8005f7c:	4682      	mov	sl, r0
 8005f7e:	468b      	mov	fp, r1
 8005f80:	dc11      	bgt.n	8005fa6 <_strtod_l+0x3ce>
 8005f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f43f ae60 	beq.w	8005c4a <_strtod_l+0x72>
 8005f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8c:	dd76      	ble.n	800607c <_strtod_l+0x4a4>
 8005f8e:	2b16      	cmp	r3, #22
 8005f90:	dc5d      	bgt.n	800604e <_strtod_l+0x476>
 8005f92:	4974      	ldr	r1, [pc, #464]	@ (8006164 <_strtod_l+0x58c>)
 8005f94:	4652      	mov	r2, sl
 8005f96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa0:	f7fa fa9a 	bl	80004d8 <__aeabi_dmul>
 8005fa4:	e7d9      	b.n	8005f5a <_strtod_l+0x382>
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	@ (8006164 <_strtod_l+0x58c>)
 8005fa8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005fb0:	f7fa fa92 	bl	80004d8 <__aeabi_dmul>
 8005fb4:	4682      	mov	sl, r0
 8005fb6:	9808      	ldr	r0, [sp, #32]
 8005fb8:	468b      	mov	fp, r1
 8005fba:	f7fa fa13 	bl	80003e4 <__aeabi_ui2d>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	f7fa f8d1 	bl	800016c <__adddf3>
 8005fca:	2d0f      	cmp	r5, #15
 8005fcc:	4682      	mov	sl, r0
 8005fce:	468b      	mov	fp, r1
 8005fd0:	ddd7      	ble.n	8005f82 <_strtod_l+0x3aa>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	1b2c      	subs	r4, r5, r4
 8005fd6:	441c      	add	r4, r3
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	f340 8096 	ble.w	800610a <_strtod_l+0x532>
 8005fde:	f014 030f 	ands.w	r3, r4, #15
 8005fe2:	d00a      	beq.n	8005ffa <_strtod_l+0x422>
 8005fe4:	495f      	ldr	r1, [pc, #380]	@ (8006164 <_strtod_l+0x58c>)
 8005fe6:	4652      	mov	r2, sl
 8005fe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005fec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff0:	465b      	mov	r3, fp
 8005ff2:	f7fa fa71 	bl	80004d8 <__aeabi_dmul>
 8005ff6:	4682      	mov	sl, r0
 8005ff8:	468b      	mov	fp, r1
 8005ffa:	f034 040f 	bics.w	r4, r4, #15
 8005ffe:	d073      	beq.n	80060e8 <_strtod_l+0x510>
 8006000:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006004:	dd48      	ble.n	8006098 <_strtod_l+0x4c0>
 8006006:	2400      	movs	r4, #0
 8006008:	46a0      	mov	r8, r4
 800600a:	46a1      	mov	r9, r4
 800600c:	940a      	str	r4, [sp, #40]	@ 0x28
 800600e:	2322      	movs	r3, #34	@ 0x22
 8006010:	f04f 0a00 	mov.w	sl, #0
 8006014:	9a05      	ldr	r2, [sp, #20]
 8006016:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800615c <_strtod_l+0x584>
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800601e:	2b00      	cmp	r3, #0
 8006020:	f43f ae13 	beq.w	8005c4a <_strtod_l+0x72>
 8006024:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006026:	9805      	ldr	r0, [sp, #20]
 8006028:	f002 ff60 	bl	8008eec <_Bfree>
 800602c:	4649      	mov	r1, r9
 800602e:	9805      	ldr	r0, [sp, #20]
 8006030:	f002 ff5c 	bl	8008eec <_Bfree>
 8006034:	4641      	mov	r1, r8
 8006036:	9805      	ldr	r0, [sp, #20]
 8006038:	f002 ff58 	bl	8008eec <_Bfree>
 800603c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800603e:	9805      	ldr	r0, [sp, #20]
 8006040:	f002 ff54 	bl	8008eec <_Bfree>
 8006044:	4621      	mov	r1, r4
 8006046:	9805      	ldr	r0, [sp, #20]
 8006048:	f002 ff50 	bl	8008eec <_Bfree>
 800604c:	e5fd      	b.n	8005c4a <_strtod_l+0x72>
 800604e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006050:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006054:	4293      	cmp	r3, r2
 8006056:	dbbc      	blt.n	8005fd2 <_strtod_l+0x3fa>
 8006058:	4c42      	ldr	r4, [pc, #264]	@ (8006164 <_strtod_l+0x58c>)
 800605a:	f1c5 050f 	rsb	r5, r5, #15
 800605e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006062:	4652      	mov	r2, sl
 8006064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006068:	465b      	mov	r3, fp
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006070:	1b5d      	subs	r5, r3, r5
 8006072:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006076:	e9d4 2300 	ldrd	r2, r3, [r4]
 800607a:	e791      	b.n	8005fa0 <_strtod_l+0x3c8>
 800607c:	3316      	adds	r3, #22
 800607e:	dba8      	blt.n	8005fd2 <_strtod_l+0x3fa>
 8006080:	4b38      	ldr	r3, [pc, #224]	@ (8006164 <_strtod_l+0x58c>)
 8006082:	eba9 0808 	sub.w	r8, r9, r8
 8006086:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800608a:	4650      	mov	r0, sl
 800608c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006090:	4659      	mov	r1, fp
 8006092:	f7fa fb4b 	bl	800072c <__aeabi_ddiv>
 8006096:	e760      	b.n	8005f5a <_strtod_l+0x382>
 8006098:	4b33      	ldr	r3, [pc, #204]	@ (8006168 <_strtod_l+0x590>)
 800609a:	4650      	mov	r0, sl
 800609c:	9308      	str	r3, [sp, #32]
 800609e:	2300      	movs	r3, #0
 80060a0:	4659      	mov	r1, fp
 80060a2:	461e      	mov	r6, r3
 80060a4:	1124      	asrs	r4, r4, #4
 80060a6:	2c01      	cmp	r4, #1
 80060a8:	dc21      	bgt.n	80060ee <_strtod_l+0x516>
 80060aa:	b10b      	cbz	r3, 80060b0 <_strtod_l+0x4d8>
 80060ac:	4682      	mov	sl, r0
 80060ae:	468b      	mov	fp, r1
 80060b0:	492d      	ldr	r1, [pc, #180]	@ (8006168 <_strtod_l+0x590>)
 80060b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80060b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80060ba:	4652      	mov	r2, sl
 80060bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c0:	465b      	mov	r3, fp
 80060c2:	f7fa fa09 	bl	80004d8 <__aeabi_dmul>
 80060c6:	4b25      	ldr	r3, [pc, #148]	@ (800615c <_strtod_l+0x584>)
 80060c8:	460a      	mov	r2, r1
 80060ca:	400b      	ands	r3, r1
 80060cc:	4927      	ldr	r1, [pc, #156]	@ (800616c <_strtod_l+0x594>)
 80060ce:	4682      	mov	sl, r0
 80060d0:	428b      	cmp	r3, r1
 80060d2:	d898      	bhi.n	8006006 <_strtod_l+0x42e>
 80060d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf86      	itte	hi
 80060dc:	f04f 3aff 	movhi.w	sl, #4294967295
 80060e0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006170 <_strtod_l+0x598>
 80060e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80060e8:	2300      	movs	r3, #0
 80060ea:	9308      	str	r3, [sp, #32]
 80060ec:	e07a      	b.n	80061e4 <_strtod_l+0x60c>
 80060ee:	07e2      	lsls	r2, r4, #31
 80060f0:	d505      	bpl.n	80060fe <_strtod_l+0x526>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa f9ee 	bl	80004d8 <__aeabi_dmul>
 80060fc:	2301      	movs	r3, #1
 80060fe:	9a08      	ldr	r2, [sp, #32]
 8006100:	3601      	adds	r6, #1
 8006102:	3208      	adds	r2, #8
 8006104:	1064      	asrs	r4, r4, #1
 8006106:	9208      	str	r2, [sp, #32]
 8006108:	e7cd      	b.n	80060a6 <_strtod_l+0x4ce>
 800610a:	d0ed      	beq.n	80060e8 <_strtod_l+0x510>
 800610c:	4264      	negs	r4, r4
 800610e:	f014 020f 	ands.w	r2, r4, #15
 8006112:	d00a      	beq.n	800612a <_strtod_l+0x552>
 8006114:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <_strtod_l+0x58c>)
 8006116:	4650      	mov	r0, sl
 8006118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800611c:	4659      	mov	r1, fp
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa fb03 	bl	800072c <__aeabi_ddiv>
 8006126:	4682      	mov	sl, r0
 8006128:	468b      	mov	fp, r1
 800612a:	1124      	asrs	r4, r4, #4
 800612c:	d0dc      	beq.n	80060e8 <_strtod_l+0x510>
 800612e:	2c1f      	cmp	r4, #31
 8006130:	dd20      	ble.n	8006174 <_strtod_l+0x59c>
 8006132:	2400      	movs	r4, #0
 8006134:	46a0      	mov	r8, r4
 8006136:	46a1      	mov	r9, r4
 8006138:	940a      	str	r4, [sp, #40]	@ 0x28
 800613a:	2322      	movs	r3, #34	@ 0x22
 800613c:	9a05      	ldr	r2, [sp, #20]
 800613e:	f04f 0a00 	mov.w	sl, #0
 8006142:	f04f 0b00 	mov.w	fp, #0
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e768      	b.n	800601c <_strtod_l+0x444>
 800614a:	bf00      	nop
 800614c:	0800affd 	.word	0x0800affd
 8006150:	0800af9c 	.word	0x0800af9c
 8006154:	0800aff5 	.word	0x0800aff5
 8006158:	0800b0e1 	.word	0x0800b0e1
 800615c:	7ff00000 	.word	0x7ff00000
 8006160:	0800b0dd 	.word	0x0800b0dd
 8006164:	0800b248 	.word	0x0800b248
 8006168:	0800b220 	.word	0x0800b220
 800616c:	7ca00000 	.word	0x7ca00000
 8006170:	7fefffff 	.word	0x7fefffff
 8006174:	f014 0310 	ands.w	r3, r4, #16
 8006178:	bf18      	it	ne
 800617a:	236a      	movne	r3, #106	@ 0x6a
 800617c:	4650      	mov	r0, sl
 800617e:	9308      	str	r3, [sp, #32]
 8006180:	4659      	mov	r1, fp
 8006182:	2300      	movs	r3, #0
 8006184:	4ea9      	ldr	r6, [pc, #676]	@ (800642c <_strtod_l+0x854>)
 8006186:	07e2      	lsls	r2, r4, #31
 8006188:	d504      	bpl.n	8006194 <_strtod_l+0x5bc>
 800618a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800618e:	f7fa f9a3 	bl	80004d8 <__aeabi_dmul>
 8006192:	2301      	movs	r3, #1
 8006194:	1064      	asrs	r4, r4, #1
 8006196:	f106 0608 	add.w	r6, r6, #8
 800619a:	d1f4      	bne.n	8006186 <_strtod_l+0x5ae>
 800619c:	b10b      	cbz	r3, 80061a2 <_strtod_l+0x5ca>
 800619e:	4682      	mov	sl, r0
 80061a0:	468b      	mov	fp, r1
 80061a2:	9b08      	ldr	r3, [sp, #32]
 80061a4:	b1b3      	cbz	r3, 80061d4 <_strtod_l+0x5fc>
 80061a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80061aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	4659      	mov	r1, fp
 80061b2:	dd0f      	ble.n	80061d4 <_strtod_l+0x5fc>
 80061b4:	2b1f      	cmp	r3, #31
 80061b6:	dd57      	ble.n	8006268 <_strtod_l+0x690>
 80061b8:	2b34      	cmp	r3, #52	@ 0x34
 80061ba:	bfd8      	it	le
 80061bc:	f04f 33ff 	movle.w	r3, #4294967295
 80061c0:	f04f 0a00 	mov.w	sl, #0
 80061c4:	bfcf      	iteee	gt
 80061c6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80061ca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80061ce:	4093      	lslle	r3, r2
 80061d0:	ea03 0b01 	andle.w	fp, r3, r1
 80061d4:	2200      	movs	r2, #0
 80061d6:	2300      	movs	r3, #0
 80061d8:	4650      	mov	r0, sl
 80061da:	4659      	mov	r1, fp
 80061dc:	f7fa fbe4 	bl	80009a8 <__aeabi_dcmpeq>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d1a6      	bne.n	8006132 <_strtod_l+0x55a>
 80061e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061e6:	463a      	mov	r2, r7
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80061ec:	462b      	mov	r3, r5
 80061ee:	9805      	ldr	r0, [sp, #20]
 80061f0:	f002 fee4 	bl	8008fbc <__s2b>
 80061f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f43f af05 	beq.w	8006006 <_strtod_l+0x42e>
 80061fc:	2400      	movs	r4, #0
 80061fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006200:	eba9 0308 	sub.w	r3, r9, r8
 8006204:	2a00      	cmp	r2, #0
 8006206:	bfa8      	it	ge
 8006208:	2300      	movge	r3, #0
 800620a:	46a0      	mov	r8, r4
 800620c:	9312      	str	r3, [sp, #72]	@ 0x48
 800620e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006212:	9316      	str	r3, [sp, #88]	@ 0x58
 8006214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006216:	9805      	ldr	r0, [sp, #20]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	f002 fe27 	bl	8008e6c <_Balloc>
 800621e:	4681      	mov	r9, r0
 8006220:	2800      	cmp	r0, #0
 8006222:	f43f aef4 	beq.w	800600e <_strtod_l+0x436>
 8006226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006228:	300c      	adds	r0, #12
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	f103 010c 	add.w	r1, r3, #12
 8006230:	3202      	adds	r2, #2
 8006232:	0092      	lsls	r2, r2, #2
 8006234:	f001 fb47 	bl	80078c6 <memcpy>
 8006238:	ab1c      	add	r3, sp, #112	@ 0x70
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4652      	mov	r2, sl
 8006242:	465b      	mov	r3, fp
 8006244:	9805      	ldr	r0, [sp, #20]
 8006246:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800624a:	f003 f9e9 	bl	8009620 <__d2b>
 800624e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006250:	2800      	cmp	r0, #0
 8006252:	f43f aedc 	beq.w	800600e <_strtod_l+0x436>
 8006256:	2101      	movs	r1, #1
 8006258:	9805      	ldr	r0, [sp, #20]
 800625a:	f002 ff45 	bl	80090e8 <__i2b>
 800625e:	4680      	mov	r8, r0
 8006260:	b948      	cbnz	r0, 8006276 <_strtod_l+0x69e>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	e6d2      	b.n	800600e <_strtod_l+0x436>
 8006268:	f04f 32ff 	mov.w	r2, #4294967295
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	ea03 0a0a 	and.w	sl, r3, sl
 8006274:	e7ae      	b.n	80061d4 <_strtod_l+0x5fc>
 8006276:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006278:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800627a:	2d00      	cmp	r5, #0
 800627c:	bfab      	itete	ge
 800627e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006280:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006282:	18ef      	addge	r7, r5, r3
 8006284:	1b5e      	sublt	r6, r3, r5
 8006286:	9b08      	ldr	r3, [sp, #32]
 8006288:	bfa8      	it	ge
 800628a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800628c:	eba5 0503 	sub.w	r5, r5, r3
 8006290:	4415      	add	r5, r2
 8006292:	4b67      	ldr	r3, [pc, #412]	@ (8006430 <_strtod_l+0x858>)
 8006294:	f105 35ff 	add.w	r5, r5, #4294967295
 8006298:	bfb8      	it	lt
 800629a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800629c:	429d      	cmp	r5, r3
 800629e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80062a2:	da50      	bge.n	8006346 <_strtod_l+0x76e>
 80062a4:	1b5b      	subs	r3, r3, r5
 80062a6:	2b1f      	cmp	r3, #31
 80062a8:	f04f 0101 	mov.w	r1, #1
 80062ac:	eba2 0203 	sub.w	r2, r2, r3
 80062b0:	dc3d      	bgt.n	800632e <_strtod_l+0x756>
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80062b8:	2300      	movs	r3, #0
 80062ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80062bc:	18bd      	adds	r5, r7, r2
 80062be:	9b08      	ldr	r3, [sp, #32]
 80062c0:	42af      	cmp	r7, r5
 80062c2:	4416      	add	r6, r2
 80062c4:	441e      	add	r6, r3
 80062c6:	463b      	mov	r3, r7
 80062c8:	bfa8      	it	ge
 80062ca:	462b      	movge	r3, r5
 80062cc:	42b3      	cmp	r3, r6
 80062ce:	bfa8      	it	ge
 80062d0:	4633      	movge	r3, r6
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfc2      	ittt	gt
 80062d6:	1aed      	subgt	r5, r5, r3
 80062d8:	1af6      	subgt	r6, r6, r3
 80062da:	1aff      	subgt	r7, r7, r3
 80062dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062de:	2b00      	cmp	r3, #0
 80062e0:	dd16      	ble.n	8006310 <_strtod_l+0x738>
 80062e2:	4641      	mov	r1, r8
 80062e4:	461a      	mov	r2, r3
 80062e6:	9805      	ldr	r0, [sp, #20]
 80062e8:	f002 ffbc 	bl	8009264 <__pow5mult>
 80062ec:	4680      	mov	r8, r0
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0b7      	beq.n	8006262 <_strtod_l+0x68a>
 80062f2:	4601      	mov	r1, r0
 80062f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80062f6:	9805      	ldr	r0, [sp, #20]
 80062f8:	f002 ff0c 	bl	8009114 <__multiply>
 80062fc:	900e      	str	r0, [sp, #56]	@ 0x38
 80062fe:	2800      	cmp	r0, #0
 8006300:	f43f ae85 	beq.w	800600e <_strtod_l+0x436>
 8006304:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006306:	9805      	ldr	r0, [sp, #20]
 8006308:	f002 fdf0 	bl	8008eec <_Bfree>
 800630c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800630e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006310:	2d00      	cmp	r5, #0
 8006312:	dc1d      	bgt.n	8006350 <_strtod_l+0x778>
 8006314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	dd23      	ble.n	8006362 <_strtod_l+0x78a>
 800631a:	4649      	mov	r1, r9
 800631c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800631e:	9805      	ldr	r0, [sp, #20]
 8006320:	f002 ffa0 	bl	8009264 <__pow5mult>
 8006324:	4681      	mov	r9, r0
 8006326:	b9e0      	cbnz	r0, 8006362 <_strtod_l+0x78a>
 8006328:	f04f 0900 	mov.w	r9, #0
 800632c:	e66f      	b.n	800600e <_strtod_l+0x436>
 800632e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006332:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006336:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800633a:	35e2      	adds	r5, #226	@ 0xe2
 800633c:	fa01 f305 	lsl.w	r3, r1, r5
 8006340:	9310      	str	r3, [sp, #64]	@ 0x40
 8006342:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006344:	e7ba      	b.n	80062bc <_strtod_l+0x6e4>
 8006346:	2300      	movs	r3, #0
 8006348:	9310      	str	r3, [sp, #64]	@ 0x40
 800634a:	2301      	movs	r3, #1
 800634c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800634e:	e7b5      	b.n	80062bc <_strtod_l+0x6e4>
 8006350:	462a      	mov	r2, r5
 8006352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006354:	9805      	ldr	r0, [sp, #20]
 8006356:	f002 ffdf 	bl	8009318 <__lshift>
 800635a:	901a      	str	r0, [sp, #104]	@ 0x68
 800635c:	2800      	cmp	r0, #0
 800635e:	d1d9      	bne.n	8006314 <_strtod_l+0x73c>
 8006360:	e655      	b.n	800600e <_strtod_l+0x436>
 8006362:	2e00      	cmp	r6, #0
 8006364:	dd07      	ble.n	8006376 <_strtod_l+0x79e>
 8006366:	4649      	mov	r1, r9
 8006368:	4632      	mov	r2, r6
 800636a:	9805      	ldr	r0, [sp, #20]
 800636c:	f002 ffd4 	bl	8009318 <__lshift>
 8006370:	4681      	mov	r9, r0
 8006372:	2800      	cmp	r0, #0
 8006374:	d0d8      	beq.n	8006328 <_strtod_l+0x750>
 8006376:	2f00      	cmp	r7, #0
 8006378:	dd08      	ble.n	800638c <_strtod_l+0x7b4>
 800637a:	4641      	mov	r1, r8
 800637c:	463a      	mov	r2, r7
 800637e:	9805      	ldr	r0, [sp, #20]
 8006380:	f002 ffca 	bl	8009318 <__lshift>
 8006384:	4680      	mov	r8, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	f43f ae41 	beq.w	800600e <_strtod_l+0x436>
 800638c:	464a      	mov	r2, r9
 800638e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006390:	9805      	ldr	r0, [sp, #20]
 8006392:	f003 f849 	bl	8009428 <__mdiff>
 8006396:	4604      	mov	r4, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	f43f ae38 	beq.w	800600e <_strtod_l+0x436>
 800639e:	68c3      	ldr	r3, [r0, #12]
 80063a0:	4641      	mov	r1, r8
 80063a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063a4:	2300      	movs	r3, #0
 80063a6:	60c3      	str	r3, [r0, #12]
 80063a8:	f003 f822 	bl	80093f0 <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	da45      	bge.n	800643c <_strtod_l+0x864>
 80063b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063b2:	ea53 030a 	orrs.w	r3, r3, sl
 80063b6:	d16b      	bne.n	8006490 <_strtod_l+0x8b8>
 80063b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d167      	bne.n	8006490 <_strtod_l+0x8b8>
 80063c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063c4:	0d1b      	lsrs	r3, r3, #20
 80063c6:	051b      	lsls	r3, r3, #20
 80063c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80063cc:	d960      	bls.n	8006490 <_strtod_l+0x8b8>
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	b913      	cbnz	r3, 80063d8 <_strtod_l+0x800>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	dd5b      	ble.n	8006490 <_strtod_l+0x8b8>
 80063d8:	4621      	mov	r1, r4
 80063da:	2201      	movs	r2, #1
 80063dc:	9805      	ldr	r0, [sp, #20]
 80063de:	f002 ff9b 	bl	8009318 <__lshift>
 80063e2:	4641      	mov	r1, r8
 80063e4:	4604      	mov	r4, r0
 80063e6:	f003 f803 	bl	80093f0 <__mcmp>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	dd50      	ble.n	8006490 <_strtod_l+0x8b8>
 80063ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80063f2:	9a08      	ldr	r2, [sp, #32]
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	d06a      	beq.n	80064d2 <_strtod_l+0x8fa>
 80063fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006400:	d867      	bhi.n	80064d2 <_strtod_l+0x8fa>
 8006402:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006406:	f67f ae98 	bls.w	800613a <_strtod_l+0x562>
 800640a:	4650      	mov	r0, sl
 800640c:	4659      	mov	r1, fp
 800640e:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <_strtod_l+0x85c>)
 8006410:	2200      	movs	r2, #0
 8006412:	f7fa f861 	bl	80004d8 <__aeabi_dmul>
 8006416:	4b08      	ldr	r3, [pc, #32]	@ (8006438 <_strtod_l+0x860>)
 8006418:	4682      	mov	sl, r0
 800641a:	400b      	ands	r3, r1
 800641c:	468b      	mov	fp, r1
 800641e:	2b00      	cmp	r3, #0
 8006420:	f47f ae00 	bne.w	8006024 <_strtod_l+0x44c>
 8006424:	2322      	movs	r3, #34	@ 0x22
 8006426:	9a05      	ldr	r2, [sp, #20]
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e5fb      	b.n	8006024 <_strtod_l+0x44c>
 800642c:	0800afc8 	.word	0x0800afc8
 8006430:	fffffc02 	.word	0xfffffc02
 8006434:	39500000 	.word	0x39500000
 8006438:	7ff00000 	.word	0x7ff00000
 800643c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006440:	d165      	bne.n	800650e <_strtod_l+0x936>
 8006442:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006448:	b35a      	cbz	r2, 80064a2 <_strtod_l+0x8ca>
 800644a:	4a99      	ldr	r2, [pc, #612]	@ (80066b0 <_strtod_l+0xad8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d12b      	bne.n	80064a8 <_strtod_l+0x8d0>
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	4651      	mov	r1, sl
 8006454:	b303      	cbz	r3, 8006498 <_strtod_l+0x8c0>
 8006456:	465a      	mov	r2, fp
 8006458:	4b96      	ldr	r3, [pc, #600]	@ (80066b4 <_strtod_l+0xadc>)
 800645a:	4013      	ands	r3, r2
 800645c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	d81b      	bhi.n	800649e <_strtod_l+0x8c6>
 8006466:	0d1b      	lsrs	r3, r3, #20
 8006468:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	4299      	cmp	r1, r3
 8006472:	d119      	bne.n	80064a8 <_strtod_l+0x8d0>
 8006474:	4b90      	ldr	r3, [pc, #576]	@ (80066b8 <_strtod_l+0xae0>)
 8006476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006478:	429a      	cmp	r2, r3
 800647a:	d102      	bne.n	8006482 <_strtod_l+0x8aa>
 800647c:	3101      	adds	r1, #1
 800647e:	f43f adc6 	beq.w	800600e <_strtod_l+0x436>
 8006482:	f04f 0a00 	mov.w	sl, #0
 8006486:	4b8b      	ldr	r3, [pc, #556]	@ (80066b4 <_strtod_l+0xadc>)
 8006488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800648a:	401a      	ands	r2, r3
 800648c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006490:	9b08      	ldr	r3, [sp, #32]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1b9      	bne.n	800640a <_strtod_l+0x832>
 8006496:	e5c5      	b.n	8006024 <_strtod_l+0x44c>
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	e7e8      	b.n	8006470 <_strtod_l+0x898>
 800649e:	4613      	mov	r3, r2
 80064a0:	e7e6      	b.n	8006470 <_strtod_l+0x898>
 80064a2:	ea53 030a 	orrs.w	r3, r3, sl
 80064a6:	d0a2      	beq.n	80063ee <_strtod_l+0x816>
 80064a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064aa:	b1db      	cbz	r3, 80064e4 <_strtod_l+0x90c>
 80064ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ae:	4213      	tst	r3, r2
 80064b0:	d0ee      	beq.n	8006490 <_strtod_l+0x8b8>
 80064b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064b4:	4650      	mov	r0, sl
 80064b6:	4659      	mov	r1, fp
 80064b8:	9a08      	ldr	r2, [sp, #32]
 80064ba:	b1bb      	cbz	r3, 80064ec <_strtod_l+0x914>
 80064bc:	f7ff fb6b 	bl	8005b96 <sulp>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064c8:	f7f9 fe50 	bl	800016c <__adddf3>
 80064cc:	4682      	mov	sl, r0
 80064ce:	468b      	mov	fp, r1
 80064d0:	e7de      	b.n	8006490 <_strtod_l+0x8b8>
 80064d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80064d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064da:	f04f 3aff 	mov.w	sl, #4294967295
 80064de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80064e2:	e7d5      	b.n	8006490 <_strtod_l+0x8b8>
 80064e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064e6:	ea13 0f0a 	tst.w	r3, sl
 80064ea:	e7e1      	b.n	80064b0 <_strtod_l+0x8d8>
 80064ec:	f7ff fb53 	bl	8005b96 <sulp>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f8:	f7f9 fe36 	bl	8000168 <__aeabi_dsub>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	4682      	mov	sl, r0
 8006502:	468b      	mov	fp, r1
 8006504:	f7fa fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8006508:	2800      	cmp	r0, #0
 800650a:	d0c1      	beq.n	8006490 <_strtod_l+0x8b8>
 800650c:	e615      	b.n	800613a <_strtod_l+0x562>
 800650e:	4641      	mov	r1, r8
 8006510:	4620      	mov	r0, r4
 8006512:	f003 f8dd 	bl	80096d0 <__ratio>
 8006516:	2200      	movs	r2, #0
 8006518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800651c:	4606      	mov	r6, r0
 800651e:	460f      	mov	r7, r1
 8006520:	f7fa fa56 	bl	80009d0 <__aeabi_dcmple>
 8006524:	2800      	cmp	r0, #0
 8006526:	d06d      	beq.n	8006604 <_strtod_l+0xa2c>
 8006528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d178      	bne.n	8006620 <_strtod_l+0xa48>
 800652e:	f1ba 0f00 	cmp.w	sl, #0
 8006532:	d156      	bne.n	80065e2 <_strtod_l+0xa0a>
 8006534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653a:	2b00      	cmp	r3, #0
 800653c:	d158      	bne.n	80065f0 <_strtod_l+0xa18>
 800653e:	2200      	movs	r2, #0
 8006540:	4630      	mov	r0, r6
 8006542:	4639      	mov	r1, r7
 8006544:	4b5d      	ldr	r3, [pc, #372]	@ (80066bc <_strtod_l+0xae4>)
 8006546:	f7fa fa39 	bl	80009bc <__aeabi_dcmplt>
 800654a:	2800      	cmp	r0, #0
 800654c:	d157      	bne.n	80065fe <_strtod_l+0xa26>
 800654e:	4630      	mov	r0, r6
 8006550:	4639      	mov	r1, r7
 8006552:	2200      	movs	r2, #0
 8006554:	4b5a      	ldr	r3, [pc, #360]	@ (80066c0 <_strtod_l+0xae8>)
 8006556:	f7f9 ffbf 	bl	80004d8 <__aeabi_dmul>
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006562:	9606      	str	r6, [sp, #24]
 8006564:	9307      	str	r3, [sp, #28]
 8006566:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800656a:	4d52      	ldr	r5, [pc, #328]	@ (80066b4 <_strtod_l+0xadc>)
 800656c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006572:	401d      	ands	r5, r3
 8006574:	4b53      	ldr	r3, [pc, #332]	@ (80066c4 <_strtod_l+0xaec>)
 8006576:	429d      	cmp	r5, r3
 8006578:	f040 80aa 	bne.w	80066d0 <_strtod_l+0xaf8>
 800657c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800657e:	4650      	mov	r0, sl
 8006580:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006584:	4659      	mov	r1, fp
 8006586:	f002 ffe3 	bl	8009550 <__ulp>
 800658a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800658e:	f7f9 ffa3 	bl	80004d8 <__aeabi_dmul>
 8006592:	4652      	mov	r2, sl
 8006594:	465b      	mov	r3, fp
 8006596:	f7f9 fde9 	bl	800016c <__adddf3>
 800659a:	460b      	mov	r3, r1
 800659c:	4945      	ldr	r1, [pc, #276]	@ (80066b4 <_strtod_l+0xadc>)
 800659e:	4a4a      	ldr	r2, [pc, #296]	@ (80066c8 <_strtod_l+0xaf0>)
 80065a0:	4019      	ands	r1, r3
 80065a2:	4291      	cmp	r1, r2
 80065a4:	4682      	mov	sl, r0
 80065a6:	d942      	bls.n	800662e <_strtod_l+0xa56>
 80065a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065aa:	4b43      	ldr	r3, [pc, #268]	@ (80066b8 <_strtod_l+0xae0>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d103      	bne.n	80065b8 <_strtod_l+0x9e0>
 80065b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80065b2:	3301      	adds	r3, #1
 80065b4:	f43f ad2b 	beq.w	800600e <_strtod_l+0x436>
 80065b8:	f04f 3aff 	mov.w	sl, #4294967295
 80065bc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80066b8 <_strtod_l+0xae0>
 80065c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065c2:	9805      	ldr	r0, [sp, #20]
 80065c4:	f002 fc92 	bl	8008eec <_Bfree>
 80065c8:	4649      	mov	r1, r9
 80065ca:	9805      	ldr	r0, [sp, #20]
 80065cc:	f002 fc8e 	bl	8008eec <_Bfree>
 80065d0:	4641      	mov	r1, r8
 80065d2:	9805      	ldr	r0, [sp, #20]
 80065d4:	f002 fc8a 	bl	8008eec <_Bfree>
 80065d8:	4621      	mov	r1, r4
 80065da:	9805      	ldr	r0, [sp, #20]
 80065dc:	f002 fc86 	bl	8008eec <_Bfree>
 80065e0:	e618      	b.n	8006214 <_strtod_l+0x63c>
 80065e2:	f1ba 0f01 	cmp.w	sl, #1
 80065e6:	d103      	bne.n	80065f0 <_strtod_l+0xa18>
 80065e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f43f ada5 	beq.w	800613a <_strtod_l+0x562>
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <_strtod_l+0xaf4>)
 80065f4:	2600      	movs	r6, #0
 80065f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065fa:	4f30      	ldr	r7, [pc, #192]	@ (80066bc <_strtod_l+0xae4>)
 80065fc:	e7b3      	b.n	8006566 <_strtod_l+0x98e>
 80065fe:	2600      	movs	r6, #0
 8006600:	4f2f      	ldr	r7, [pc, #188]	@ (80066c0 <_strtod_l+0xae8>)
 8006602:	e7ac      	b.n	800655e <_strtod_l+0x986>
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	4b2d      	ldr	r3, [pc, #180]	@ (80066c0 <_strtod_l+0xae8>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006612:	4606      	mov	r6, r0
 8006614:	460f      	mov	r7, r1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0a1      	beq.n	800655e <_strtod_l+0x986>
 800661a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800661e:	e7a2      	b.n	8006566 <_strtod_l+0x98e>
 8006620:	2200      	movs	r2, #0
 8006622:	4b26      	ldr	r3, [pc, #152]	@ (80066bc <_strtod_l+0xae4>)
 8006624:	4616      	mov	r6, r2
 8006626:	461f      	mov	r7, r3
 8006628:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800662c:	e79b      	b.n	8006566 <_strtod_l+0x98e>
 800662e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006632:	9b08      	ldr	r3, [sp, #32]
 8006634:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1c1      	bne.n	80065c0 <_strtod_l+0x9e8>
 800663c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006640:	0d1b      	lsrs	r3, r3, #20
 8006642:	051b      	lsls	r3, r3, #20
 8006644:	429d      	cmp	r5, r3
 8006646:	d1bb      	bne.n	80065c0 <_strtod_l+0x9e8>
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7fa fdbc 	bl	80011c8 <__aeabi_d2lz>
 8006650:	f7f9 ff14 	bl	800047c <__aeabi_l2d>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7f9 fd84 	bl	8000168 <__aeabi_dsub>
 8006660:	460b      	mov	r3, r1
 8006662:	4602      	mov	r2, r0
 8006664:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006668:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800666c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666e:	ea46 060a 	orr.w	r6, r6, sl
 8006672:	431e      	orrs	r6, r3
 8006674:	d069      	beq.n	800674a <_strtod_l+0xb72>
 8006676:	a30a      	add	r3, pc, #40	@ (adr r3, 80066a0 <_strtod_l+0xac8>)
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7fa f99e 	bl	80009bc <__aeabi_dcmplt>
 8006680:	2800      	cmp	r0, #0
 8006682:	f47f accf 	bne.w	8006024 <_strtod_l+0x44c>
 8006686:	a308      	add	r3, pc, #32	@ (adr r3, 80066a8 <_strtod_l+0xad0>)
 8006688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006690:	f7fa f9b2 	bl	80009f8 <__aeabi_dcmpgt>
 8006694:	2800      	cmp	r0, #0
 8006696:	d093      	beq.n	80065c0 <_strtod_l+0x9e8>
 8006698:	e4c4      	b.n	8006024 <_strtod_l+0x44c>
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	94a03595 	.word	0x94a03595
 80066a4:	3fdfffff 	.word	0x3fdfffff
 80066a8:	35afe535 	.word	0x35afe535
 80066ac:	3fe00000 	.word	0x3fe00000
 80066b0:	000fffff 	.word	0x000fffff
 80066b4:	7ff00000 	.word	0x7ff00000
 80066b8:	7fefffff 	.word	0x7fefffff
 80066bc:	3ff00000 	.word	0x3ff00000
 80066c0:	3fe00000 	.word	0x3fe00000
 80066c4:	7fe00000 	.word	0x7fe00000
 80066c8:	7c9fffff 	.word	0x7c9fffff
 80066cc:	bff00000 	.word	0xbff00000
 80066d0:	9b08      	ldr	r3, [sp, #32]
 80066d2:	b323      	cbz	r3, 800671e <_strtod_l+0xb46>
 80066d4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80066d8:	d821      	bhi.n	800671e <_strtod_l+0xb46>
 80066da:	a327      	add	r3, pc, #156	@ (adr r3, 8006778 <_strtod_l+0xba0>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa f974 	bl	80009d0 <__aeabi_dcmple>
 80066e8:	b1a0      	cbz	r0, 8006714 <_strtod_l+0xb3c>
 80066ea:	4639      	mov	r1, r7
 80066ec:	4630      	mov	r0, r6
 80066ee:	f7fa f9cb 	bl	8000a88 <__aeabi_d2uiz>
 80066f2:	2801      	cmp	r0, #1
 80066f4:	bf38      	it	cc
 80066f6:	2001      	movcc	r0, #1
 80066f8:	f7f9 fe74 	bl	80003e4 <__aeabi_ui2d>
 80066fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	b9fb      	cbnz	r3, 8006744 <_strtod_l+0xb6c>
 8006704:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006708:	9014      	str	r0, [sp, #80]	@ 0x50
 800670a:	9315      	str	r3, [sp, #84]	@ 0x54
 800670c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006710:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006714:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006716:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800671a:	1b5b      	subs	r3, r3, r5
 800671c:	9311      	str	r3, [sp, #68]	@ 0x44
 800671e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006722:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006726:	f002 ff13 	bl	8009550 <__ulp>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4650      	mov	r0, sl
 8006730:	4659      	mov	r1, fp
 8006732:	f7f9 fed1 	bl	80004d8 <__aeabi_dmul>
 8006736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800673a:	f7f9 fd17 	bl	800016c <__adddf3>
 800673e:	4682      	mov	sl, r0
 8006740:	468b      	mov	fp, r1
 8006742:	e776      	b.n	8006632 <_strtod_l+0xa5a>
 8006744:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006748:	e7e0      	b.n	800670c <_strtod_l+0xb34>
 800674a:	a30d      	add	r3, pc, #52	@ (adr r3, 8006780 <_strtod_l+0xba8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7fa f934 	bl	80009bc <__aeabi_dcmplt>
 8006754:	e79e      	b.n	8006694 <_strtod_l+0xabc>
 8006756:	2300      	movs	r3, #0
 8006758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800675a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800675c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	f7ff ba77 	b.w	8005c52 <_strtod_l+0x7a>
 8006764:	2a65      	cmp	r2, #101	@ 0x65
 8006766:	f43f ab6e 	beq.w	8005e46 <_strtod_l+0x26e>
 800676a:	2a45      	cmp	r2, #69	@ 0x45
 800676c:	f43f ab6b 	beq.w	8005e46 <_strtod_l+0x26e>
 8006770:	2301      	movs	r3, #1
 8006772:	f7ff bba6 	b.w	8005ec2 <_strtod_l+0x2ea>
 8006776:	bf00      	nop
 8006778:	ffc00000 	.word	0xffc00000
 800677c:	41dfffff 	.word	0x41dfffff
 8006780:	94a03595 	.word	0x94a03595
 8006784:	3fcfffff 	.word	0x3fcfffff

08006788 <_strtod_r>:
 8006788:	4b01      	ldr	r3, [pc, #4]	@ (8006790 <_strtod_r+0x8>)
 800678a:	f7ff ba25 	b.w	8005bd8 <_strtod_l>
 800678e:	bf00      	nop
 8006790:	20000018 	.word	0x20000018

08006794 <strtod>:
 8006794:	460a      	mov	r2, r1
 8006796:	4601      	mov	r1, r0
 8006798:	4802      	ldr	r0, [pc, #8]	@ (80067a4 <strtod+0x10>)
 800679a:	4b03      	ldr	r3, [pc, #12]	@ (80067a8 <strtod+0x14>)
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f7ff ba1b 	b.w	8005bd8 <_strtod_l>
 80067a2:	bf00      	nop
 80067a4:	20000184 	.word	0x20000184
 80067a8:	20000018 	.word	0x20000018

080067ac <__cvt>:
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b2:	461d      	mov	r5, r3
 80067b4:	bfbb      	ittet	lt
 80067b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80067ba:	461d      	movlt	r5, r3
 80067bc:	2300      	movge	r3, #0
 80067be:	232d      	movlt	r3, #45	@ 0x2d
 80067c0:	b088      	sub	sp, #32
 80067c2:	4614      	mov	r4, r2
 80067c4:	bfb8      	it	lt
 80067c6:	4614      	movlt	r4, r2
 80067c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80067cc:	7013      	strb	r3, [r2, #0]
 80067ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80067d4:	f023 0820 	bic.w	r8, r3, #32
 80067d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067dc:	d005      	beq.n	80067ea <__cvt+0x3e>
 80067de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067e2:	d100      	bne.n	80067e6 <__cvt+0x3a>
 80067e4:	3601      	adds	r6, #1
 80067e6:	2302      	movs	r3, #2
 80067e8:	e000      	b.n	80067ec <__cvt+0x40>
 80067ea:	2303      	movs	r3, #3
 80067ec:	aa07      	add	r2, sp, #28
 80067ee:	9204      	str	r2, [sp, #16]
 80067f0:	aa06      	add	r2, sp, #24
 80067f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80067f6:	e9cd 3600 	strd	r3, r6, [sp]
 80067fa:	4622      	mov	r2, r4
 80067fc:	462b      	mov	r3, r5
 80067fe:	f001 f923 	bl	8007a48 <_dtoa_r>
 8006802:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006806:	4607      	mov	r7, r0
 8006808:	d119      	bne.n	800683e <__cvt+0x92>
 800680a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800680c:	07db      	lsls	r3, r3, #31
 800680e:	d50e      	bpl.n	800682e <__cvt+0x82>
 8006810:	eb00 0906 	add.w	r9, r0, r6
 8006814:	2200      	movs	r2, #0
 8006816:	2300      	movs	r3, #0
 8006818:	4620      	mov	r0, r4
 800681a:	4629      	mov	r1, r5
 800681c:	f7fa f8c4 	bl	80009a8 <__aeabi_dcmpeq>
 8006820:	b108      	cbz	r0, 8006826 <__cvt+0x7a>
 8006822:	f8cd 901c 	str.w	r9, [sp, #28]
 8006826:	2230      	movs	r2, #48	@ 0x30
 8006828:	9b07      	ldr	r3, [sp, #28]
 800682a:	454b      	cmp	r3, r9
 800682c:	d31e      	bcc.n	800686c <__cvt+0xc0>
 800682e:	4638      	mov	r0, r7
 8006830:	9b07      	ldr	r3, [sp, #28]
 8006832:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006834:	1bdb      	subs	r3, r3, r7
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	b008      	add	sp, #32
 800683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006842:	eb00 0906 	add.w	r9, r0, r6
 8006846:	d1e5      	bne.n	8006814 <__cvt+0x68>
 8006848:	7803      	ldrb	r3, [r0, #0]
 800684a:	2b30      	cmp	r3, #48	@ 0x30
 800684c:	d10a      	bne.n	8006864 <__cvt+0xb8>
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7fa f8a7 	bl	80009a8 <__aeabi_dcmpeq>
 800685a:	b918      	cbnz	r0, 8006864 <__cvt+0xb8>
 800685c:	f1c6 0601 	rsb	r6, r6, #1
 8006860:	f8ca 6000 	str.w	r6, [sl]
 8006864:	f8da 3000 	ldr.w	r3, [sl]
 8006868:	4499      	add	r9, r3
 800686a:	e7d3      	b.n	8006814 <__cvt+0x68>
 800686c:	1c59      	adds	r1, r3, #1
 800686e:	9107      	str	r1, [sp, #28]
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e7d9      	b.n	8006828 <__cvt+0x7c>

08006874 <__exponent>:
 8006874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006876:	2900      	cmp	r1, #0
 8006878:	bfb6      	itet	lt
 800687a:	232d      	movlt	r3, #45	@ 0x2d
 800687c:	232b      	movge	r3, #43	@ 0x2b
 800687e:	4249      	neglt	r1, r1
 8006880:	2909      	cmp	r1, #9
 8006882:	7002      	strb	r2, [r0, #0]
 8006884:	7043      	strb	r3, [r0, #1]
 8006886:	dd29      	ble.n	80068dc <__exponent+0x68>
 8006888:	f10d 0307 	add.w	r3, sp, #7
 800688c:	461d      	mov	r5, r3
 800688e:	270a      	movs	r7, #10
 8006890:	fbb1 f6f7 	udiv	r6, r1, r7
 8006894:	461a      	mov	r2, r3
 8006896:	fb07 1416 	mls	r4, r7, r6, r1
 800689a:	3430      	adds	r4, #48	@ 0x30
 800689c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068a0:	460c      	mov	r4, r1
 80068a2:	2c63      	cmp	r4, #99	@ 0x63
 80068a4:	4631      	mov	r1, r6
 80068a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80068aa:	dcf1      	bgt.n	8006890 <__exponent+0x1c>
 80068ac:	3130      	adds	r1, #48	@ 0x30
 80068ae:	1e94      	subs	r4, r2, #2
 80068b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80068b4:	4623      	mov	r3, r4
 80068b6:	1c41      	adds	r1, r0, #1
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	d30a      	bcc.n	80068d2 <__exponent+0x5e>
 80068bc:	f10d 0309 	add.w	r3, sp, #9
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	42ac      	cmp	r4, r5
 80068c4:	bf88      	it	hi
 80068c6:	2300      	movhi	r3, #0
 80068c8:	3302      	adds	r3, #2
 80068ca:	4403      	add	r3, r0
 80068cc:	1a18      	subs	r0, r3, r0
 80068ce:	b003      	add	sp, #12
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80068d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068da:	e7ed      	b.n	80068b8 <__exponent+0x44>
 80068dc:	2330      	movs	r3, #48	@ 0x30
 80068de:	3130      	adds	r1, #48	@ 0x30
 80068e0:	7083      	strb	r3, [r0, #2]
 80068e2:	70c1      	strb	r1, [r0, #3]
 80068e4:	1d03      	adds	r3, r0, #4
 80068e6:	e7f1      	b.n	80068cc <__exponent+0x58>

080068e8 <_printf_float>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	b091      	sub	sp, #68	@ 0x44
 80068ee:	460c      	mov	r4, r1
 80068f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80068f4:	4616      	mov	r6, r2
 80068f6:	461f      	mov	r7, r3
 80068f8:	4605      	mov	r5, r0
 80068fa:	f000 ff5f 	bl	80077bc <_localeconv_r>
 80068fe:	6803      	ldr	r3, [r0, #0]
 8006900:	4618      	mov	r0, r3
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	f7f9 fc24 	bl	8000150 <strlen>
 8006908:	2300      	movs	r3, #0
 800690a:	930e      	str	r3, [sp, #56]	@ 0x38
 800690c:	f8d8 3000 	ldr.w	r3, [r8]
 8006910:	9009      	str	r0, [sp, #36]	@ 0x24
 8006912:	3307      	adds	r3, #7
 8006914:	f023 0307 	bic.w	r3, r3, #7
 8006918:	f103 0208 	add.w	r2, r3, #8
 800691c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006920:	f8d4 b000 	ldr.w	fp, [r4]
 8006924:	f8c8 2000 	str.w	r2, [r8]
 8006928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006932:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800693e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006942:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb4 <_printf_float+0x2cc>)
 8006944:	f7fa f862 	bl	8000a0c <__aeabi_dcmpun>
 8006948:	bb70      	cbnz	r0, 80069a8 <_printf_float+0xc0>
 800694a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800694e:	f04f 32ff 	mov.w	r2, #4294967295
 8006952:	4b98      	ldr	r3, [pc, #608]	@ (8006bb4 <_printf_float+0x2cc>)
 8006954:	f7fa f83c 	bl	80009d0 <__aeabi_dcmple>
 8006958:	bb30      	cbnz	r0, 80069a8 <_printf_float+0xc0>
 800695a:	2200      	movs	r2, #0
 800695c:	2300      	movs	r3, #0
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f82b 	bl	80009bc <__aeabi_dcmplt>
 8006966:	b110      	cbz	r0, 800696e <_printf_float+0x86>
 8006968:	232d      	movs	r3, #45	@ 0x2d
 800696a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800696e:	4a92      	ldr	r2, [pc, #584]	@ (8006bb8 <_printf_float+0x2d0>)
 8006970:	4b92      	ldr	r3, [pc, #584]	@ (8006bbc <_printf_float+0x2d4>)
 8006972:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006976:	bf94      	ite	ls
 8006978:	4690      	movls	r8, r2
 800697a:	4698      	movhi	r8, r3
 800697c:	2303      	movs	r3, #3
 800697e:	f04f 0900 	mov.w	r9, #0
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	f02b 0304 	bic.w	r3, fp, #4
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	4633      	mov	r3, r6
 800698c:	4621      	mov	r1, r4
 800698e:	4628      	mov	r0, r5
 8006990:	9700      	str	r7, [sp, #0]
 8006992:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006994:	f000 f9d4 	bl	8006d40 <_printf_common>
 8006998:	3001      	adds	r0, #1
 800699a:	f040 8090 	bne.w	8006abe <_printf_float+0x1d6>
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	b011      	add	sp, #68	@ 0x44
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	4642      	mov	r2, r8
 80069aa:	464b      	mov	r3, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f82c 	bl	8000a0c <__aeabi_dcmpun>
 80069b4:	b148      	cbz	r0, 80069ca <_printf_float+0xe2>
 80069b6:	464b      	mov	r3, r9
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bfb8      	it	lt
 80069bc:	232d      	movlt	r3, #45	@ 0x2d
 80069be:	4a80      	ldr	r2, [pc, #512]	@ (8006bc0 <_printf_float+0x2d8>)
 80069c0:	bfb8      	it	lt
 80069c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80069c6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bc4 <_printf_float+0x2dc>)
 80069c8:	e7d3      	b.n	8006972 <_printf_float+0x8a>
 80069ca:	6863      	ldr	r3, [r4, #4]
 80069cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	d13f      	bne.n	8006a54 <_printf_float+0x16c>
 80069d4:	2306      	movs	r3, #6
 80069d6:	6063      	str	r3, [r4, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	9206      	str	r2, [sp, #24]
 80069e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80069e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80069e8:	aa0d      	add	r2, sp, #52	@ 0x34
 80069ea:	9203      	str	r2, [sp, #12]
 80069ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80069f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80069f4:	6863      	ldr	r3, [r4, #4]
 80069f6:	4642      	mov	r2, r8
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	4628      	mov	r0, r5
 80069fc:	464b      	mov	r3, r9
 80069fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8006a00:	f7ff fed4 	bl	80067ac <__cvt>
 8006a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a06:	4680      	mov	r8, r0
 8006a08:	2947      	cmp	r1, #71	@ 0x47
 8006a0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006a0c:	d128      	bne.n	8006a60 <_printf_float+0x178>
 8006a0e:	1cc8      	adds	r0, r1, #3
 8006a10:	db02      	blt.n	8006a18 <_printf_float+0x130>
 8006a12:	6863      	ldr	r3, [r4, #4]
 8006a14:	4299      	cmp	r1, r3
 8006a16:	dd40      	ble.n	8006a9a <_printf_float+0x1b2>
 8006a18:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a1c:	fa5f fa8a 	uxtb.w	sl, sl
 8006a20:	4652      	mov	r2, sl
 8006a22:	3901      	subs	r1, #1
 8006a24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a28:	910d      	str	r1, [sp, #52]	@ 0x34
 8006a2a:	f7ff ff23 	bl	8006874 <__exponent>
 8006a2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a30:	4681      	mov	r9, r0
 8006a32:	1813      	adds	r3, r2, r0
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	dc02      	bgt.n	8006a40 <_printf_float+0x158>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	07d2      	lsls	r2, r2, #31
 8006a3e:	d501      	bpl.n	8006a44 <_printf_float+0x15c>
 8006a40:	3301      	adds	r3, #1
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d09e      	beq.n	800698a <_printf_float+0xa2>
 8006a4c:	232d      	movs	r3, #45	@ 0x2d
 8006a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a52:	e79a      	b.n	800698a <_printf_float+0xa2>
 8006a54:	2947      	cmp	r1, #71	@ 0x47
 8006a56:	d1bf      	bne.n	80069d8 <_printf_float+0xf0>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1bd      	bne.n	80069d8 <_printf_float+0xf0>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e7ba      	b.n	80069d6 <_printf_float+0xee>
 8006a60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a64:	d9dc      	bls.n	8006a20 <_printf_float+0x138>
 8006a66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a6a:	d118      	bne.n	8006a9e <_printf_float+0x1b6>
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	6863      	ldr	r3, [r4, #4]
 8006a70:	dd0b      	ble.n	8006a8a <_printf_float+0x1a2>
 8006a72:	6121      	str	r1, [r4, #16]
 8006a74:	b913      	cbnz	r3, 8006a7c <_printf_float+0x194>
 8006a76:	6822      	ldr	r2, [r4, #0]
 8006a78:	07d0      	lsls	r0, r2, #31
 8006a7a:	d502      	bpl.n	8006a82 <_printf_float+0x19a>
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	440b      	add	r3, r1
 8006a80:	6123      	str	r3, [r4, #16]
 8006a82:	f04f 0900 	mov.w	r9, #0
 8006a86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a88:	e7dc      	b.n	8006a44 <_printf_float+0x15c>
 8006a8a:	b913      	cbnz	r3, 8006a92 <_printf_float+0x1aa>
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	07d2      	lsls	r2, r2, #31
 8006a90:	d501      	bpl.n	8006a96 <_printf_float+0x1ae>
 8006a92:	3302      	adds	r3, #2
 8006a94:	e7f4      	b.n	8006a80 <_printf_float+0x198>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e7f2      	b.n	8006a80 <_printf_float+0x198>
 8006a9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aa0:	4299      	cmp	r1, r3
 8006aa2:	db05      	blt.n	8006ab0 <_printf_float+0x1c8>
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	6121      	str	r1, [r4, #16]
 8006aa8:	07d8      	lsls	r0, r3, #31
 8006aaa:	d5ea      	bpl.n	8006a82 <_printf_float+0x19a>
 8006aac:	1c4b      	adds	r3, r1, #1
 8006aae:	e7e7      	b.n	8006a80 <_printf_float+0x198>
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	bfcc      	ite	gt
 8006ab4:	2201      	movgt	r2, #1
 8006ab6:	f1c1 0202 	rsble	r2, r1, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	e7e0      	b.n	8006a80 <_printf_float+0x198>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	055a      	lsls	r2, r3, #21
 8006ac2:	d407      	bmi.n	8006ad4 <_printf_float+0x1ec>
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d12b      	bne.n	8006b2a <_printf_float+0x242>
 8006ad2:	e764      	b.n	800699e <_printf_float+0xb6>
 8006ad4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ad8:	f240 80dc 	bls.w	8006c94 <_printf_float+0x3ac>
 8006adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f7f9 ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d033      	beq.n	8006b54 <_printf_float+0x26c>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	4a35      	ldr	r2, [pc, #212]	@ (8006bc8 <_printf_float+0x2e0>)
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af51 	beq.w	800699e <_printf_float+0xb6>
 8006afc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006b00:	4543      	cmp	r3, r8
 8006b02:	db02      	blt.n	8006b0a <_printf_float+0x222>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	07d8      	lsls	r0, r3, #31
 8006b08:	d50f      	bpl.n	8006b2a <_printf_float+0x242>
 8006b0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b8      	blx	r7
 8006b14:	3001      	adds	r0, #1
 8006b16:	f43f af42 	beq.w	800699e <_printf_float+0xb6>
 8006b1a:	f04f 0900 	mov.w	r9, #0
 8006b1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b22:	f104 0a1a 	add.w	sl, r4, #26
 8006b26:	45c8      	cmp	r8, r9
 8006b28:	dc09      	bgt.n	8006b3e <_printf_float+0x256>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	079b      	lsls	r3, r3, #30
 8006b2e:	f100 8102 	bmi.w	8006d36 <_printf_float+0x44e>
 8006b32:	68e0      	ldr	r0, [r4, #12]
 8006b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b36:	4298      	cmp	r0, r3
 8006b38:	bfb8      	it	lt
 8006b3a:	4618      	movlt	r0, r3
 8006b3c:	e731      	b.n	80069a2 <_printf_float+0xba>
 8006b3e:	2301      	movs	r3, #1
 8006b40:	4652      	mov	r2, sl
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	47b8      	blx	r7
 8006b48:	3001      	adds	r0, #1
 8006b4a:	f43f af28 	beq.w	800699e <_printf_float+0xb6>
 8006b4e:	f109 0901 	add.w	r9, r9, #1
 8006b52:	e7e8      	b.n	8006b26 <_printf_float+0x23e>
 8006b54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc38      	bgt.n	8006bcc <_printf_float+0x2e4>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	4a19      	ldr	r2, [pc, #100]	@ (8006bc8 <_printf_float+0x2e0>)
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f af1a 	beq.w	800699e <_printf_float+0xb6>
 8006b6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006b6e:	ea59 0303 	orrs.w	r3, r9, r3
 8006b72:	d102      	bne.n	8006b7a <_printf_float+0x292>
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	07d9      	lsls	r1, r3, #31
 8006b78:	d5d7      	bpl.n	8006b2a <_printf_float+0x242>
 8006b7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b7e:	4631      	mov	r1, r6
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b8      	blx	r7
 8006b84:	3001      	adds	r0, #1
 8006b86:	f43f af0a 	beq.w	800699e <_printf_float+0xb6>
 8006b8a:	f04f 0a00 	mov.w	sl, #0
 8006b8e:	f104 0b1a 	add.w	fp, r4, #26
 8006b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b94:	425b      	negs	r3, r3
 8006b96:	4553      	cmp	r3, sl
 8006b98:	dc01      	bgt.n	8006b9e <_printf_float+0x2b6>
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	e793      	b.n	8006ac6 <_printf_float+0x1de>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	465a      	mov	r2, fp
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f aef8 	beq.w	800699e <_printf_float+0xb6>
 8006bae:	f10a 0a01 	add.w	sl, sl, #1
 8006bb2:	e7ee      	b.n	8006b92 <_printf_float+0x2aa>
 8006bb4:	7fefffff 	.word	0x7fefffff
 8006bb8:	0800aff0 	.word	0x0800aff0
 8006bbc:	0800aff4 	.word	0x0800aff4
 8006bc0:	0800aff8 	.word	0x0800aff8
 8006bc4:	0800affc 	.word	0x0800affc
 8006bc8:	0800b000 	.word	0x0800b000
 8006bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006bd2:	4553      	cmp	r3, sl
 8006bd4:	bfa8      	it	ge
 8006bd6:	4653      	movge	r3, sl
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	4699      	mov	r9, r3
 8006bdc:	dc36      	bgt.n	8006c4c <_printf_float+0x364>
 8006bde:	f04f 0b00 	mov.w	fp, #0
 8006be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be6:	f104 021a 	add.w	r2, r4, #26
 8006bea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bee:	eba3 0309 	sub.w	r3, r3, r9
 8006bf2:	455b      	cmp	r3, fp
 8006bf4:	dc31      	bgt.n	8006c5a <_printf_float+0x372>
 8006bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf8:	459a      	cmp	sl, r3
 8006bfa:	dc3a      	bgt.n	8006c72 <_printf_float+0x38a>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	07da      	lsls	r2, r3, #31
 8006c00:	d437      	bmi.n	8006c72 <_printf_float+0x38a>
 8006c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c04:	ebaa 0903 	sub.w	r9, sl, r3
 8006c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006c0e:	4599      	cmp	r9, r3
 8006c10:	bfa8      	it	ge
 8006c12:	4699      	movge	r9, r3
 8006c14:	f1b9 0f00 	cmp.w	r9, #0
 8006c18:	dc33      	bgt.n	8006c82 <_printf_float+0x39a>
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c22:	f104 0b1a 	add.w	fp, r4, #26
 8006c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c28:	ebaa 0303 	sub.w	r3, sl, r3
 8006c2c:	eba3 0309 	sub.w	r3, r3, r9
 8006c30:	4543      	cmp	r3, r8
 8006c32:	f77f af7a 	ble.w	8006b2a <_printf_float+0x242>
 8006c36:	2301      	movs	r3, #1
 8006c38:	465a      	mov	r2, fp
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f aeac 	beq.w	800699e <_printf_float+0xb6>
 8006c46:	f108 0801 	add.w	r8, r8, #1
 8006c4a:	e7ec      	b.n	8006c26 <_printf_float+0x33e>
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	d1c2      	bne.n	8006bde <_printf_float+0x2f6>
 8006c58:	e6a1      	b.n	800699e <_printf_float+0xb6>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	920a      	str	r2, [sp, #40]	@ 0x28
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f ae9a 	beq.w	800699e <_printf_float+0xb6>
 8006c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c6c:	f10b 0b01 	add.w	fp, fp, #1
 8006c70:	e7bb      	b.n	8006bea <_printf_float+0x302>
 8006c72:	4631      	mov	r1, r6
 8006c74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d1c0      	bne.n	8006c02 <_printf_float+0x31a>
 8006c80:	e68d      	b.n	800699e <_printf_float+0xb6>
 8006c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c84:	464b      	mov	r3, r9
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	4442      	add	r2, r8
 8006c8c:	47b8      	blx	r7
 8006c8e:	3001      	adds	r0, #1
 8006c90:	d1c3      	bne.n	8006c1a <_printf_float+0x332>
 8006c92:	e684      	b.n	800699e <_printf_float+0xb6>
 8006c94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c98:	f1ba 0f01 	cmp.w	sl, #1
 8006c9c:	dc01      	bgt.n	8006ca2 <_printf_float+0x3ba>
 8006c9e:	07db      	lsls	r3, r3, #31
 8006ca0:	d536      	bpl.n	8006d10 <_printf_float+0x428>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f ae76 	beq.w	800699e <_printf_float+0xb6>
 8006cb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f ae6e 	beq.w	800699e <_printf_float+0xb6>
 8006cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cce:	f7f9 fe6b 	bl	80009a8 <__aeabi_dcmpeq>
 8006cd2:	b9c0      	cbnz	r0, 8006d06 <_printf_float+0x41e>
 8006cd4:	4653      	mov	r3, sl
 8006cd6:	f108 0201 	add.w	r2, r8, #1
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d10c      	bne.n	8006cfe <_printf_float+0x416>
 8006ce4:	e65b      	b.n	800699e <_printf_float+0xb6>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	465a      	mov	r2, fp
 8006cea:	4631      	mov	r1, r6
 8006cec:	4628      	mov	r0, r5
 8006cee:	47b8      	blx	r7
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	f43f ae54 	beq.w	800699e <_printf_float+0xb6>
 8006cf6:	f108 0801 	add.w	r8, r8, #1
 8006cfa:	45d0      	cmp	r8, sl
 8006cfc:	dbf3      	blt.n	8006ce6 <_printf_float+0x3fe>
 8006cfe:	464b      	mov	r3, r9
 8006d00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d04:	e6e0      	b.n	8006ac8 <_printf_float+0x1e0>
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	f104 0b1a 	add.w	fp, r4, #26
 8006d0e:	e7f4      	b.n	8006cfa <_printf_float+0x412>
 8006d10:	2301      	movs	r3, #1
 8006d12:	4642      	mov	r2, r8
 8006d14:	e7e1      	b.n	8006cda <_printf_float+0x3f2>
 8006d16:	2301      	movs	r3, #1
 8006d18:	464a      	mov	r2, r9
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f ae3c 	beq.w	800699e <_printf_float+0xb6>
 8006d26:	f108 0801 	add.w	r8, r8, #1
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006d2e:	1a5b      	subs	r3, r3, r1
 8006d30:	4543      	cmp	r3, r8
 8006d32:	dcf0      	bgt.n	8006d16 <_printf_float+0x42e>
 8006d34:	e6fd      	b.n	8006b32 <_printf_float+0x24a>
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	f104 0919 	add.w	r9, r4, #25
 8006d3e:	e7f4      	b.n	8006d2a <_printf_float+0x442>

08006d40 <_printf_common>:
 8006d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	4616      	mov	r6, r2
 8006d46:	4698      	mov	r8, r3
 8006d48:	688a      	ldr	r2, [r1, #8]
 8006d4a:	690b      	ldr	r3, [r1, #16]
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	bfb8      	it	lt
 8006d52:	4613      	movlt	r3, r2
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d60:	b10a      	cbz	r2, 8006d66 <_printf_common+0x26>
 8006d62:	3301      	adds	r3, #1
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	0699      	lsls	r1, r3, #26
 8006d6a:	bf42      	ittt	mi
 8006d6c:	6833      	ldrmi	r3, [r6, #0]
 8006d6e:	3302      	addmi	r3, #2
 8006d70:	6033      	strmi	r3, [r6, #0]
 8006d72:	6825      	ldr	r5, [r4, #0]
 8006d74:	f015 0506 	ands.w	r5, r5, #6
 8006d78:	d106      	bne.n	8006d88 <_printf_common+0x48>
 8006d7a:	f104 0a19 	add.w	sl, r4, #25
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	6832      	ldr	r2, [r6, #0]
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	dc2b      	bgt.n	8006de0 <_printf_common+0xa0>
 8006d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d8c:	6822      	ldr	r2, [r4, #0]
 8006d8e:	3b00      	subs	r3, #0
 8006d90:	bf18      	it	ne
 8006d92:	2301      	movne	r3, #1
 8006d94:	0692      	lsls	r2, r2, #26
 8006d96:	d430      	bmi.n	8006dfa <_printf_common+0xba>
 8006d98:	4641      	mov	r1, r8
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006da0:	47c8      	blx	r9
 8006da2:	3001      	adds	r0, #1
 8006da4:	d023      	beq.n	8006dee <_printf_common+0xae>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	f003 0306 	and.w	r3, r3, #6
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	bf14      	ite	ne
 8006db2:	2500      	movne	r5, #0
 8006db4:	6833      	ldreq	r3, [r6, #0]
 8006db6:	f04f 0600 	mov.w	r6, #0
 8006dba:	bf08      	it	eq
 8006dbc:	68e5      	ldreq	r5, [r4, #12]
 8006dbe:	f104 041a 	add.w	r4, r4, #26
 8006dc2:	bf08      	it	eq
 8006dc4:	1aed      	subeq	r5, r5, r3
 8006dc6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006dca:	bf08      	it	eq
 8006dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	bfc4      	itt	gt
 8006dd4:	1a9b      	subgt	r3, r3, r2
 8006dd6:	18ed      	addgt	r5, r5, r3
 8006dd8:	42b5      	cmp	r5, r6
 8006dda:	d11a      	bne.n	8006e12 <_printf_common+0xd2>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	e008      	b.n	8006df2 <_printf_common+0xb2>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4652      	mov	r2, sl
 8006de4:	4641      	mov	r1, r8
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c8      	blx	r9
 8006dea:	3001      	adds	r0, #1
 8006dec:	d103      	bne.n	8006df6 <_printf_common+0xb6>
 8006dee:	f04f 30ff 	mov.w	r0, #4294967295
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df6:	3501      	adds	r5, #1
 8006df8:	e7c1      	b.n	8006d7e <_printf_common+0x3e>
 8006dfa:	2030      	movs	r0, #48	@ 0x30
 8006dfc:	18e1      	adds	r1, r4, r3
 8006dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e08:	4422      	add	r2, r4
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e10:	e7c2      	b.n	8006d98 <_printf_common+0x58>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4622      	mov	r2, r4
 8006e16:	4641      	mov	r1, r8
 8006e18:	4638      	mov	r0, r7
 8006e1a:	47c8      	blx	r9
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d0e6      	beq.n	8006dee <_printf_common+0xae>
 8006e20:	3601      	adds	r6, #1
 8006e22:	e7d9      	b.n	8006dd8 <_printf_common+0x98>

08006e24 <_printf_i>:
 8006e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	7e0f      	ldrb	r7, [r1, #24]
 8006e2a:	4691      	mov	r9, r2
 8006e2c:	2f78      	cmp	r7, #120	@ 0x78
 8006e2e:	4680      	mov	r8, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	469a      	mov	sl, r3
 8006e34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e3a:	d807      	bhi.n	8006e4c <_printf_i+0x28>
 8006e3c:	2f62      	cmp	r7, #98	@ 0x62
 8006e3e:	d80a      	bhi.n	8006e56 <_printf_i+0x32>
 8006e40:	2f00      	cmp	r7, #0
 8006e42:	f000 80d3 	beq.w	8006fec <_printf_i+0x1c8>
 8006e46:	2f58      	cmp	r7, #88	@ 0x58
 8006e48:	f000 80ba 	beq.w	8006fc0 <_printf_i+0x19c>
 8006e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e54:	e03a      	b.n	8006ecc <_printf_i+0xa8>
 8006e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e5a:	2b15      	cmp	r3, #21
 8006e5c:	d8f6      	bhi.n	8006e4c <_printf_i+0x28>
 8006e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e64 <_printf_i+0x40>)
 8006e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e64:	08006ebd 	.word	0x08006ebd
 8006e68:	08006ed1 	.word	0x08006ed1
 8006e6c:	08006e4d 	.word	0x08006e4d
 8006e70:	08006e4d 	.word	0x08006e4d
 8006e74:	08006e4d 	.word	0x08006e4d
 8006e78:	08006e4d 	.word	0x08006e4d
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08006e4d 	.word	0x08006e4d
 8006e84:	08006e4d 	.word	0x08006e4d
 8006e88:	08006e4d 	.word	0x08006e4d
 8006e8c:	08006e4d 	.word	0x08006e4d
 8006e90:	08006fd3 	.word	0x08006fd3
 8006e94:	08006efb 	.word	0x08006efb
 8006e98:	08006f8d 	.word	0x08006f8d
 8006e9c:	08006e4d 	.word	0x08006e4d
 8006ea0:	08006e4d 	.word	0x08006e4d
 8006ea4:	08006ff5 	.word	0x08006ff5
 8006ea8:	08006e4d 	.word	0x08006e4d
 8006eac:	08006efb 	.word	0x08006efb
 8006eb0:	08006e4d 	.word	0x08006e4d
 8006eb4:	08006e4d 	.word	0x08006e4d
 8006eb8:	08006f95 	.word	0x08006f95
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6032      	str	r2, [r6, #0]
 8006ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e09e      	b.n	800700e <_printf_i+0x1ea>
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	1d19      	adds	r1, r3, #4
 8006ed6:	6031      	str	r1, [r6, #0]
 8006ed8:	0606      	lsls	r6, r0, #24
 8006eda:	d501      	bpl.n	8006ee0 <_printf_i+0xbc>
 8006edc:	681d      	ldr	r5, [r3, #0]
 8006ede:	e003      	b.n	8006ee8 <_printf_i+0xc4>
 8006ee0:	0645      	lsls	r5, r0, #25
 8006ee2:	d5fb      	bpl.n	8006edc <_printf_i+0xb8>
 8006ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	da03      	bge.n	8006ef4 <_printf_i+0xd0>
 8006eec:	232d      	movs	r3, #45	@ 0x2d
 8006eee:	426d      	negs	r5, r5
 8006ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef4:	230a      	movs	r3, #10
 8006ef6:	4859      	ldr	r0, [pc, #356]	@ (800705c <_printf_i+0x238>)
 8006ef8:	e011      	b.n	8006f1e <_printf_i+0xfa>
 8006efa:	6821      	ldr	r1, [r4, #0]
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	0608      	lsls	r0, r1, #24
 8006f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f04:	d402      	bmi.n	8006f0c <_printf_i+0xe8>
 8006f06:	0649      	lsls	r1, r1, #25
 8006f08:	bf48      	it	mi
 8006f0a:	b2ad      	uxthmi	r5, r5
 8006f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	bf14      	ite	ne
 8006f12:	230a      	movne	r3, #10
 8006f14:	2308      	moveq	r3, #8
 8006f16:	4851      	ldr	r0, [pc, #324]	@ (800705c <_printf_i+0x238>)
 8006f18:	2100      	movs	r1, #0
 8006f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f1e:	6866      	ldr	r6, [r4, #4]
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	bfa8      	it	ge
 8006f24:	6821      	ldrge	r1, [r4, #0]
 8006f26:	60a6      	str	r6, [r4, #8]
 8006f28:	bfa4      	itt	ge
 8006f2a:	f021 0104 	bicge.w	r1, r1, #4
 8006f2e:	6021      	strge	r1, [r4, #0]
 8006f30:	b90d      	cbnz	r5, 8006f36 <_printf_i+0x112>
 8006f32:	2e00      	cmp	r6, #0
 8006f34:	d04b      	beq.n	8006fce <_printf_i+0x1aa>
 8006f36:	4616      	mov	r6, r2
 8006f38:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f3c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f40:	5dc7      	ldrb	r7, [r0, r7]
 8006f42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f46:	462f      	mov	r7, r5
 8006f48:	42bb      	cmp	r3, r7
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	d9f4      	bls.n	8006f38 <_printf_i+0x114>
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d10b      	bne.n	8006f6a <_printf_i+0x146>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	07df      	lsls	r7, r3, #31
 8006f56:	d508      	bpl.n	8006f6a <_printf_i+0x146>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	6861      	ldr	r1, [r4, #4]
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	bfde      	ittt	le
 8006f60:	2330      	movle	r3, #48	@ 0x30
 8006f62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f6a:	1b92      	subs	r2, r2, r6
 8006f6c:	6122      	str	r2, [r4, #16]
 8006f6e:	464b      	mov	r3, r9
 8006f70:	4621      	mov	r1, r4
 8006f72:	4640      	mov	r0, r8
 8006f74:	f8cd a000 	str.w	sl, [sp]
 8006f78:	aa03      	add	r2, sp, #12
 8006f7a:	f7ff fee1 	bl	8006d40 <_printf_common>
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d14a      	bne.n	8007018 <_printf_i+0x1f4>
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	b004      	add	sp, #16
 8006f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	f043 0320 	orr.w	r3, r3, #32
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	2778      	movs	r7, #120	@ 0x78
 8006f96:	4832      	ldr	r0, [pc, #200]	@ (8007060 <_printf_i+0x23c>)
 8006f98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	6831      	ldr	r1, [r6, #0]
 8006fa0:	061f      	lsls	r7, r3, #24
 8006fa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fa6:	d402      	bmi.n	8006fae <_printf_i+0x18a>
 8006fa8:	065f      	lsls	r7, r3, #25
 8006faa:	bf48      	it	mi
 8006fac:	b2ad      	uxthmi	r5, r5
 8006fae:	6031      	str	r1, [r6, #0]
 8006fb0:	07d9      	lsls	r1, r3, #31
 8006fb2:	bf44      	itt	mi
 8006fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8006fb8:	6023      	strmi	r3, [r4, #0]
 8006fba:	b11d      	cbz	r5, 8006fc4 <_printf_i+0x1a0>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	e7ab      	b.n	8006f18 <_printf_i+0xf4>
 8006fc0:	4826      	ldr	r0, [pc, #152]	@ (800705c <_printf_i+0x238>)
 8006fc2:	e7e9      	b.n	8006f98 <_printf_i+0x174>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	f023 0320 	bic.w	r3, r3, #32
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	e7f6      	b.n	8006fbc <_printf_i+0x198>
 8006fce:	4616      	mov	r6, r2
 8006fd0:	e7bd      	b.n	8006f4e <_printf_i+0x12a>
 8006fd2:	6833      	ldr	r3, [r6, #0]
 8006fd4:	6825      	ldr	r5, [r4, #0]
 8006fd6:	1d18      	adds	r0, r3, #4
 8006fd8:	6961      	ldr	r1, [r4, #20]
 8006fda:	6030      	str	r0, [r6, #0]
 8006fdc:	062e      	lsls	r6, r5, #24
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	d501      	bpl.n	8006fe6 <_printf_i+0x1c2>
 8006fe2:	6019      	str	r1, [r3, #0]
 8006fe4:	e002      	b.n	8006fec <_printf_i+0x1c8>
 8006fe6:	0668      	lsls	r0, r5, #25
 8006fe8:	d5fb      	bpl.n	8006fe2 <_printf_i+0x1be>
 8006fea:	8019      	strh	r1, [r3, #0]
 8006fec:	2300      	movs	r3, #0
 8006fee:	4616      	mov	r6, r2
 8006ff0:	6123      	str	r3, [r4, #16]
 8006ff2:	e7bc      	b.n	8006f6e <_printf_i+0x14a>
 8006ff4:	6833      	ldr	r3, [r6, #0]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	1d1a      	adds	r2, r3, #4
 8006ffa:	6032      	str	r2, [r6, #0]
 8006ffc:	681e      	ldr	r6, [r3, #0]
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	4630      	mov	r0, r6
 8007002:	f000 fc52 	bl	80078aa <memchr>
 8007006:	b108      	cbz	r0, 800700c <_printf_i+0x1e8>
 8007008:	1b80      	subs	r0, r0, r6
 800700a:	6060      	str	r0, [r4, #4]
 800700c:	6863      	ldr	r3, [r4, #4]
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	2300      	movs	r3, #0
 8007012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007016:	e7aa      	b.n	8006f6e <_printf_i+0x14a>
 8007018:	4632      	mov	r2, r6
 800701a:	4649      	mov	r1, r9
 800701c:	4640      	mov	r0, r8
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	47d0      	blx	sl
 8007022:	3001      	adds	r0, #1
 8007024:	d0ad      	beq.n	8006f82 <_printf_i+0x15e>
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	079b      	lsls	r3, r3, #30
 800702a:	d413      	bmi.n	8007054 <_printf_i+0x230>
 800702c:	68e0      	ldr	r0, [r4, #12]
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	4298      	cmp	r0, r3
 8007032:	bfb8      	it	lt
 8007034:	4618      	movlt	r0, r3
 8007036:	e7a6      	b.n	8006f86 <_printf_i+0x162>
 8007038:	2301      	movs	r3, #1
 800703a:	4632      	mov	r2, r6
 800703c:	4649      	mov	r1, r9
 800703e:	4640      	mov	r0, r8
 8007040:	47d0      	blx	sl
 8007042:	3001      	adds	r0, #1
 8007044:	d09d      	beq.n	8006f82 <_printf_i+0x15e>
 8007046:	3501      	adds	r5, #1
 8007048:	68e3      	ldr	r3, [r4, #12]
 800704a:	9903      	ldr	r1, [sp, #12]
 800704c:	1a5b      	subs	r3, r3, r1
 800704e:	42ab      	cmp	r3, r5
 8007050:	dcf2      	bgt.n	8007038 <_printf_i+0x214>
 8007052:	e7eb      	b.n	800702c <_printf_i+0x208>
 8007054:	2500      	movs	r5, #0
 8007056:	f104 0619 	add.w	r6, r4, #25
 800705a:	e7f5      	b.n	8007048 <_printf_i+0x224>
 800705c:	0800b002 	.word	0x0800b002
 8007060:	0800b013 	.word	0x0800b013

08007064 <_scanf_float>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	b087      	sub	sp, #28
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	688b      	ldr	r3, [r1, #8]
 800706e:	4617      	mov	r7, r2
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007076:	bf82      	ittt	hi
 8007078:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800707c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007080:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007084:	460a      	mov	r2, r1
 8007086:	f04f 0500 	mov.w	r5, #0
 800708a:	bf88      	it	hi
 800708c:	608b      	strhi	r3, [r1, #8]
 800708e:	680b      	ldr	r3, [r1, #0]
 8007090:	4680      	mov	r8, r0
 8007092:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007096:	f842 3b1c 	str.w	r3, [r2], #28
 800709a:	460c      	mov	r4, r1
 800709c:	bf98      	it	ls
 800709e:	f04f 0b00 	movls.w	fp, #0
 80070a2:	4616      	mov	r6, r2
 80070a4:	46aa      	mov	sl, r5
 80070a6:	46a9      	mov	r9, r5
 80070a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80070ac:	9201      	str	r2, [sp, #4]
 80070ae:	9502      	str	r5, [sp, #8]
 80070b0:	68a2      	ldr	r2, [r4, #8]
 80070b2:	b152      	cbz	r2, 80070ca <_scanf_float+0x66>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80070ba:	d865      	bhi.n	8007188 <_scanf_float+0x124>
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	d83d      	bhi.n	800713c <_scanf_float+0xd8>
 80070c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80070c4:	b2c8      	uxtb	r0, r1
 80070c6:	280e      	cmp	r0, #14
 80070c8:	d93b      	bls.n	8007142 <_scanf_float+0xde>
 80070ca:	f1b9 0f00 	cmp.w	r9, #0
 80070ce:	d003      	beq.n	80070d8 <_scanf_float+0x74>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070dc:	f1ba 0f01 	cmp.w	sl, #1
 80070e0:	f200 8118 	bhi.w	8007314 <_scanf_float+0x2b0>
 80070e4:	9b01      	ldr	r3, [sp, #4]
 80070e6:	429e      	cmp	r6, r3
 80070e8:	f200 8109 	bhi.w	80072fe <_scanf_float+0x29a>
 80070ec:	2001      	movs	r0, #1
 80070ee:	b007      	add	sp, #28
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070f8:	2a0d      	cmp	r2, #13
 80070fa:	d8e6      	bhi.n	80070ca <_scanf_float+0x66>
 80070fc:	a101      	add	r1, pc, #4	@ (adr r1, 8007104 <_scanf_float+0xa0>)
 80070fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007102:	bf00      	nop
 8007104:	0800724b 	.word	0x0800724b
 8007108:	080070cb 	.word	0x080070cb
 800710c:	080070cb 	.word	0x080070cb
 8007110:	080070cb 	.word	0x080070cb
 8007114:	080072ab 	.word	0x080072ab
 8007118:	08007283 	.word	0x08007283
 800711c:	080070cb 	.word	0x080070cb
 8007120:	080070cb 	.word	0x080070cb
 8007124:	08007259 	.word	0x08007259
 8007128:	080070cb 	.word	0x080070cb
 800712c:	080070cb 	.word	0x080070cb
 8007130:	080070cb 	.word	0x080070cb
 8007134:	080070cb 	.word	0x080070cb
 8007138:	08007211 	.word	0x08007211
 800713c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007140:	e7da      	b.n	80070f8 <_scanf_float+0x94>
 8007142:	290e      	cmp	r1, #14
 8007144:	d8c1      	bhi.n	80070ca <_scanf_float+0x66>
 8007146:	a001      	add	r0, pc, #4	@ (adr r0, 800714c <_scanf_float+0xe8>)
 8007148:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800714c:	08007201 	.word	0x08007201
 8007150:	080070cb 	.word	0x080070cb
 8007154:	08007201 	.word	0x08007201
 8007158:	08007297 	.word	0x08007297
 800715c:	080070cb 	.word	0x080070cb
 8007160:	080071a9 	.word	0x080071a9
 8007164:	080071e7 	.word	0x080071e7
 8007168:	080071e7 	.word	0x080071e7
 800716c:	080071e7 	.word	0x080071e7
 8007170:	080071e7 	.word	0x080071e7
 8007174:	080071e7 	.word	0x080071e7
 8007178:	080071e7 	.word	0x080071e7
 800717c:	080071e7 	.word	0x080071e7
 8007180:	080071e7 	.word	0x080071e7
 8007184:	080071e7 	.word	0x080071e7
 8007188:	2b6e      	cmp	r3, #110	@ 0x6e
 800718a:	d809      	bhi.n	80071a0 <_scanf_float+0x13c>
 800718c:	2b60      	cmp	r3, #96	@ 0x60
 800718e:	d8b1      	bhi.n	80070f4 <_scanf_float+0x90>
 8007190:	2b54      	cmp	r3, #84	@ 0x54
 8007192:	d07b      	beq.n	800728c <_scanf_float+0x228>
 8007194:	2b59      	cmp	r3, #89	@ 0x59
 8007196:	d198      	bne.n	80070ca <_scanf_float+0x66>
 8007198:	2d07      	cmp	r5, #7
 800719a:	d196      	bne.n	80070ca <_scanf_float+0x66>
 800719c:	2508      	movs	r5, #8
 800719e:	e02c      	b.n	80071fa <_scanf_float+0x196>
 80071a0:	2b74      	cmp	r3, #116	@ 0x74
 80071a2:	d073      	beq.n	800728c <_scanf_float+0x228>
 80071a4:	2b79      	cmp	r3, #121	@ 0x79
 80071a6:	e7f6      	b.n	8007196 <_scanf_float+0x132>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	05c8      	lsls	r0, r1, #23
 80071ac:	d51b      	bpl.n	80071e6 <_scanf_float+0x182>
 80071ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80071b2:	6021      	str	r1, [r4, #0]
 80071b4:	f109 0901 	add.w	r9, r9, #1
 80071b8:	f1bb 0f00 	cmp.w	fp, #0
 80071bc:	d003      	beq.n	80071c6 <_scanf_float+0x162>
 80071be:	3201      	adds	r2, #1
 80071c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071c4:	60a2      	str	r2, [r4, #8]
 80071c6:	68a3      	ldr	r3, [r4, #8]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	60a3      	str	r3, [r4, #8]
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	3301      	adds	r3, #1
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	f340 8087 	ble.w	80072ec <_scanf_float+0x288>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	e764      	b.n	80070b0 <_scanf_float+0x4c>
 80071e6:	eb1a 0105 	adds.w	r1, sl, r5
 80071ea:	f47f af6e 	bne.w	80070ca <_scanf_float+0x66>
 80071ee:	460d      	mov	r5, r1
 80071f0:	468a      	mov	sl, r1
 80071f2:	6822      	ldr	r2, [r4, #0]
 80071f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	f806 3b01 	strb.w	r3, [r6], #1
 80071fe:	e7e2      	b.n	80071c6 <_scanf_float+0x162>
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	0610      	lsls	r0, r2, #24
 8007204:	f57f af61 	bpl.w	80070ca <_scanf_float+0x66>
 8007208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800720c:	6022      	str	r2, [r4, #0]
 800720e:	e7f4      	b.n	80071fa <_scanf_float+0x196>
 8007210:	f1ba 0f00 	cmp.w	sl, #0
 8007214:	d10e      	bne.n	8007234 <_scanf_float+0x1d0>
 8007216:	f1b9 0f00 	cmp.w	r9, #0
 800721a:	d10e      	bne.n	800723a <_scanf_float+0x1d6>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007222:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007226:	d108      	bne.n	800723a <_scanf_float+0x1d6>
 8007228:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800722c:	f04f 0a01 	mov.w	sl, #1
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	e7e2      	b.n	80071fa <_scanf_float+0x196>
 8007234:	f1ba 0f02 	cmp.w	sl, #2
 8007238:	d055      	beq.n	80072e6 <_scanf_float+0x282>
 800723a:	2d01      	cmp	r5, #1
 800723c:	d002      	beq.n	8007244 <_scanf_float+0x1e0>
 800723e:	2d04      	cmp	r5, #4
 8007240:	f47f af43 	bne.w	80070ca <_scanf_float+0x66>
 8007244:	3501      	adds	r5, #1
 8007246:	b2ed      	uxtb	r5, r5
 8007248:	e7d7      	b.n	80071fa <_scanf_float+0x196>
 800724a:	f1ba 0f01 	cmp.w	sl, #1
 800724e:	f47f af3c 	bne.w	80070ca <_scanf_float+0x66>
 8007252:	f04f 0a02 	mov.w	sl, #2
 8007256:	e7d0      	b.n	80071fa <_scanf_float+0x196>
 8007258:	b97d      	cbnz	r5, 800727a <_scanf_float+0x216>
 800725a:	f1b9 0f00 	cmp.w	r9, #0
 800725e:	f47f af37 	bne.w	80070d0 <_scanf_float+0x6c>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800726c:	f040 8103 	bne.w	8007476 <_scanf_float+0x412>
 8007270:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007274:	2501      	movs	r5, #1
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	e7bf      	b.n	80071fa <_scanf_float+0x196>
 800727a:	2d03      	cmp	r5, #3
 800727c:	d0e2      	beq.n	8007244 <_scanf_float+0x1e0>
 800727e:	2d05      	cmp	r5, #5
 8007280:	e7de      	b.n	8007240 <_scanf_float+0x1dc>
 8007282:	2d02      	cmp	r5, #2
 8007284:	f47f af21 	bne.w	80070ca <_scanf_float+0x66>
 8007288:	2503      	movs	r5, #3
 800728a:	e7b6      	b.n	80071fa <_scanf_float+0x196>
 800728c:	2d06      	cmp	r5, #6
 800728e:	f47f af1c 	bne.w	80070ca <_scanf_float+0x66>
 8007292:	2507      	movs	r5, #7
 8007294:	e7b1      	b.n	80071fa <_scanf_float+0x196>
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	0591      	lsls	r1, r2, #22
 800729a:	f57f af16 	bpl.w	80070ca <_scanf_float+0x66>
 800729e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80072a8:	e7a7      	b.n	80071fa <_scanf_float+0x196>
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80072b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80072b4:	d006      	beq.n	80072c4 <_scanf_float+0x260>
 80072b6:	0550      	lsls	r0, r2, #21
 80072b8:	f57f af07 	bpl.w	80070ca <_scanf_float+0x66>
 80072bc:	f1b9 0f00 	cmp.w	r9, #0
 80072c0:	f000 80d9 	beq.w	8007476 <_scanf_float+0x412>
 80072c4:	0591      	lsls	r1, r2, #22
 80072c6:	bf58      	it	pl
 80072c8:	9902      	ldrpl	r1, [sp, #8]
 80072ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ce:	bf58      	it	pl
 80072d0:	eba9 0101 	subpl.w	r1, r9, r1
 80072d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	bf58      	it	pl
 80072de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	e789      	b.n	80071fa <_scanf_float+0x196>
 80072e6:	f04f 0a03 	mov.w	sl, #3
 80072ea:	e786      	b.n	80071fa <_scanf_float+0x196>
 80072ec:	4639      	mov	r1, r7
 80072ee:	4640      	mov	r0, r8
 80072f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072f4:	4798      	blx	r3
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f aeda 	beq.w	80070b0 <_scanf_float+0x4c>
 80072fc:	e6e5      	b.n	80070ca <_scanf_float+0x66>
 80072fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007302:	463a      	mov	r2, r7
 8007304:	4640      	mov	r0, r8
 8007306:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800730a:	4798      	blx	r3
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	3b01      	subs	r3, #1
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	e6e7      	b.n	80070e4 <_scanf_float+0x80>
 8007314:	1e6b      	subs	r3, r5, #1
 8007316:	2b06      	cmp	r3, #6
 8007318:	d824      	bhi.n	8007364 <_scanf_float+0x300>
 800731a:	2d02      	cmp	r5, #2
 800731c:	d836      	bhi.n	800738c <_scanf_float+0x328>
 800731e:	9b01      	ldr	r3, [sp, #4]
 8007320:	429e      	cmp	r6, r3
 8007322:	f67f aee3 	bls.w	80070ec <_scanf_float+0x88>
 8007326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732a:	463a      	mov	r2, r7
 800732c:	4640      	mov	r0, r8
 800732e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007332:	4798      	blx	r3
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	3b01      	subs	r3, #1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	e7f0      	b.n	800731e <_scanf_float+0x2ba>
 800733c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007340:	463a      	mov	r2, r7
 8007342:	4640      	mov	r0, r8
 8007344:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007348:	4798      	blx	r3
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	3b01      	subs	r3, #1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007354:	fa5f fa8a 	uxtb.w	sl, sl
 8007358:	f1ba 0f02 	cmp.w	sl, #2
 800735c:	d1ee      	bne.n	800733c <_scanf_float+0x2d8>
 800735e:	3d03      	subs	r5, #3
 8007360:	b2ed      	uxtb	r5, r5
 8007362:	1b76      	subs	r6, r6, r5
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	05da      	lsls	r2, r3, #23
 8007368:	d530      	bpl.n	80073cc <_scanf_float+0x368>
 800736a:	055b      	lsls	r3, r3, #21
 800736c:	d511      	bpl.n	8007392 <_scanf_float+0x32e>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	429e      	cmp	r6, r3
 8007372:	f67f aebb 	bls.w	80070ec <_scanf_float+0x88>
 8007376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800737a:	463a      	mov	r2, r7
 800737c:	4640      	mov	r0, r8
 800737e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007382:	4798      	blx	r3
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	3b01      	subs	r3, #1
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	e7f0      	b.n	800736e <_scanf_float+0x30a>
 800738c:	46aa      	mov	sl, r5
 800738e:	46b3      	mov	fp, r6
 8007390:	e7de      	b.n	8007350 <_scanf_float+0x2ec>
 8007392:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007396:	6923      	ldr	r3, [r4, #16]
 8007398:	2965      	cmp	r1, #101	@ 0x65
 800739a:	f103 33ff 	add.w	r3, r3, #4294967295
 800739e:	f106 35ff 	add.w	r5, r6, #4294967295
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	d00c      	beq.n	80073c0 <_scanf_float+0x35c>
 80073a6:	2945      	cmp	r1, #69	@ 0x45
 80073a8:	d00a      	beq.n	80073c0 <_scanf_float+0x35c>
 80073aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073ae:	463a      	mov	r2, r7
 80073b0:	4640      	mov	r0, r8
 80073b2:	4798      	blx	r3
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	1eb5      	subs	r5, r6, #2
 80073be:	6123      	str	r3, [r4, #16]
 80073c0:	463a      	mov	r2, r7
 80073c2:	4640      	mov	r0, r8
 80073c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073c8:	4798      	blx	r3
 80073ca:	462e      	mov	r6, r5
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	f012 0210 	ands.w	r2, r2, #16
 80073d2:	d001      	beq.n	80073d8 <_scanf_float+0x374>
 80073d4:	2000      	movs	r0, #0
 80073d6:	e68a      	b.n	80070ee <_scanf_float+0x8a>
 80073d8:	7032      	strb	r2, [r6, #0]
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80073e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073e4:	d11c      	bne.n	8007420 <_scanf_float+0x3bc>
 80073e6:	9b02      	ldr	r3, [sp, #8]
 80073e8:	454b      	cmp	r3, r9
 80073ea:	eba3 0209 	sub.w	r2, r3, r9
 80073ee:	d123      	bne.n	8007438 <_scanf_float+0x3d4>
 80073f0:	2200      	movs	r2, #0
 80073f2:	4640      	mov	r0, r8
 80073f4:	9901      	ldr	r1, [sp, #4]
 80073f6:	f7ff f9c7 	bl	8006788 <_strtod_r>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	6825      	ldr	r5, [r4, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f015 0f02 	tst.w	r5, #2
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	f103 0204 	add.w	r2, r3, #4
 800740c:	d01f      	beq.n	800744e <_scanf_float+0x3ea>
 800740e:	9903      	ldr	r1, [sp, #12]
 8007410:	600a      	str	r2, [r1, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	e9c3 6700 	strd	r6, r7, [r3]
 8007418:	68e3      	ldr	r3, [r4, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60e3      	str	r3, [r4, #12]
 800741e:	e7d9      	b.n	80073d4 <_scanf_float+0x370>
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0e4      	beq.n	80073f0 <_scanf_float+0x38c>
 8007426:	9905      	ldr	r1, [sp, #20]
 8007428:	230a      	movs	r3, #10
 800742a:	4640      	mov	r0, r8
 800742c:	3101      	adds	r1, #1
 800742e:	f002 fa3d 	bl	80098ac <_strtol_r>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	9e05      	ldr	r6, [sp, #20]
 8007436:	1ac2      	subs	r2, r0, r3
 8007438:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800743c:	429e      	cmp	r6, r3
 800743e:	bf28      	it	cs
 8007440:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007444:	4630      	mov	r0, r6
 8007446:	490d      	ldr	r1, [pc, #52]	@ (800747c <_scanf_float+0x418>)
 8007448:	f000 f8de 	bl	8007608 <siprintf>
 800744c:	e7d0      	b.n	80073f0 <_scanf_float+0x38c>
 800744e:	076d      	lsls	r5, r5, #29
 8007450:	d4dd      	bmi.n	800740e <_scanf_float+0x3aa>
 8007452:	9d03      	ldr	r5, [sp, #12]
 8007454:	602a      	str	r2, [r5, #0]
 8007456:	681d      	ldr	r5, [r3, #0]
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	f7f9 fad6 	bl	8000a0c <__aeabi_dcmpun>
 8007460:	b120      	cbz	r0, 800746c <_scanf_float+0x408>
 8007462:	4807      	ldr	r0, [pc, #28]	@ (8007480 <_scanf_float+0x41c>)
 8007464:	f000 fa44 	bl	80078f0 <nanf>
 8007468:	6028      	str	r0, [r5, #0]
 800746a:	e7d5      	b.n	8007418 <_scanf_float+0x3b4>
 800746c:	4630      	mov	r0, r6
 800746e:	4639      	mov	r1, r7
 8007470:	f7f9 fb2a 	bl	8000ac8 <__aeabi_d2f>
 8007474:	e7f8      	b.n	8007468 <_scanf_float+0x404>
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	e62d      	b.n	80070d8 <_scanf_float+0x74>
 800747c:	0800b024 	.word	0x0800b024
 8007480:	0800b0dd 	.word	0x0800b0dd

08007484 <std>:
 8007484:	2300      	movs	r3, #0
 8007486:	b510      	push	{r4, lr}
 8007488:	4604      	mov	r4, r0
 800748a:	e9c0 3300 	strd	r3, r3, [r0]
 800748e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007492:	6083      	str	r3, [r0, #8]
 8007494:	8181      	strh	r1, [r0, #12]
 8007496:	6643      	str	r3, [r0, #100]	@ 0x64
 8007498:	81c2      	strh	r2, [r0, #14]
 800749a:	6183      	str	r3, [r0, #24]
 800749c:	4619      	mov	r1, r3
 800749e:	2208      	movs	r2, #8
 80074a0:	305c      	adds	r0, #92	@ 0x5c
 80074a2:	f000 f914 	bl	80076ce <memset>
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <std+0x58>)
 80074a8:	6224      	str	r4, [r4, #32]
 80074aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80074ac:	4b0c      	ldr	r3, [pc, #48]	@ (80074e0 <std+0x5c>)
 80074ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074b0:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <std+0x60>)
 80074b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074b4:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <std+0x64>)
 80074b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80074b8:	4b0c      	ldr	r3, [pc, #48]	@ (80074ec <std+0x68>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d006      	beq.n	80074cc <std+0x48>
 80074be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074c2:	4294      	cmp	r4, r2
 80074c4:	d002      	beq.n	80074cc <std+0x48>
 80074c6:	33d0      	adds	r3, #208	@ 0xd0
 80074c8:	429c      	cmp	r4, r3
 80074ca:	d105      	bne.n	80074d8 <std+0x54>
 80074cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d4:	f000 b9e6 	b.w	80078a4 <__retarget_lock_init_recursive>
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	bf00      	nop
 80074dc:	08007649 	.word	0x08007649
 80074e0:	0800766b 	.word	0x0800766b
 80074e4:	080076a3 	.word	0x080076a3
 80074e8:	080076c7 	.word	0x080076c7
 80074ec:	200005a4 	.word	0x200005a4

080074f0 <stdio_exit_handler>:
 80074f0:	4a02      	ldr	r2, [pc, #8]	@ (80074fc <stdio_exit_handler+0xc>)
 80074f2:	4903      	ldr	r1, [pc, #12]	@ (8007500 <stdio_exit_handler+0x10>)
 80074f4:	4803      	ldr	r0, [pc, #12]	@ (8007504 <stdio_exit_handler+0x14>)
 80074f6:	f000 b869 	b.w	80075cc <_fwalk_sglue>
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c
 8007500:	08009c79 	.word	0x08009c79
 8007504:	20000188 	.word	0x20000188

08007508 <cleanup_stdio>:
 8007508:	6841      	ldr	r1, [r0, #4]
 800750a:	4b0c      	ldr	r3, [pc, #48]	@ (800753c <cleanup_stdio+0x34>)
 800750c:	b510      	push	{r4, lr}
 800750e:	4299      	cmp	r1, r3
 8007510:	4604      	mov	r4, r0
 8007512:	d001      	beq.n	8007518 <cleanup_stdio+0x10>
 8007514:	f002 fbb0 	bl	8009c78 <_fflush_r>
 8007518:	68a1      	ldr	r1, [r4, #8]
 800751a:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <cleanup_stdio+0x38>)
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <cleanup_stdio+0x1e>
 8007520:	4620      	mov	r0, r4
 8007522:	f002 fba9 	bl	8009c78 <_fflush_r>
 8007526:	68e1      	ldr	r1, [r4, #12]
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <cleanup_stdio+0x3c>)
 800752a:	4299      	cmp	r1, r3
 800752c:	d004      	beq.n	8007538 <cleanup_stdio+0x30>
 800752e:	4620      	mov	r0, r4
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f002 bba0 	b.w	8009c78 <_fflush_r>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	bf00      	nop
 800753c:	200005a4 	.word	0x200005a4
 8007540:	2000060c 	.word	0x2000060c
 8007544:	20000674 	.word	0x20000674

08007548 <global_stdio_init.part.0>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4b0b      	ldr	r3, [pc, #44]	@ (8007578 <global_stdio_init.part.0+0x30>)
 800754c:	4c0b      	ldr	r4, [pc, #44]	@ (800757c <global_stdio_init.part.0+0x34>)
 800754e:	4a0c      	ldr	r2, [pc, #48]	@ (8007580 <global_stdio_init.part.0+0x38>)
 8007550:	4620      	mov	r0, r4
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	2104      	movs	r1, #4
 8007556:	2200      	movs	r2, #0
 8007558:	f7ff ff94 	bl	8007484 <std>
 800755c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007560:	2201      	movs	r2, #1
 8007562:	2109      	movs	r1, #9
 8007564:	f7ff ff8e 	bl	8007484 <std>
 8007568:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800756c:	2202      	movs	r2, #2
 800756e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007572:	2112      	movs	r1, #18
 8007574:	f7ff bf86 	b.w	8007484 <std>
 8007578:	200006dc 	.word	0x200006dc
 800757c:	200005a4 	.word	0x200005a4
 8007580:	080074f1 	.word	0x080074f1

08007584 <__sfp_lock_acquire>:
 8007584:	4801      	ldr	r0, [pc, #4]	@ (800758c <__sfp_lock_acquire+0x8>)
 8007586:	f000 b98e 	b.w	80078a6 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	200006e5 	.word	0x200006e5

08007590 <__sfp_lock_release>:
 8007590:	4801      	ldr	r0, [pc, #4]	@ (8007598 <__sfp_lock_release+0x8>)
 8007592:	f000 b989 	b.w	80078a8 <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	200006e5 	.word	0x200006e5

0800759c <__sinit>:
 800759c:	b510      	push	{r4, lr}
 800759e:	4604      	mov	r4, r0
 80075a0:	f7ff fff0 	bl	8007584 <__sfp_lock_acquire>
 80075a4:	6a23      	ldr	r3, [r4, #32]
 80075a6:	b11b      	cbz	r3, 80075b0 <__sinit+0x14>
 80075a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ac:	f7ff bff0 	b.w	8007590 <__sfp_lock_release>
 80075b0:	4b04      	ldr	r3, [pc, #16]	@ (80075c4 <__sinit+0x28>)
 80075b2:	6223      	str	r3, [r4, #32]
 80075b4:	4b04      	ldr	r3, [pc, #16]	@ (80075c8 <__sinit+0x2c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1f5      	bne.n	80075a8 <__sinit+0xc>
 80075bc:	f7ff ffc4 	bl	8007548 <global_stdio_init.part.0>
 80075c0:	e7f2      	b.n	80075a8 <__sinit+0xc>
 80075c2:	bf00      	nop
 80075c4:	08007509 	.word	0x08007509
 80075c8:	200006dc 	.word	0x200006dc

080075cc <_fwalk_sglue>:
 80075cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	4607      	mov	r7, r0
 80075d2:	4688      	mov	r8, r1
 80075d4:	4614      	mov	r4, r2
 80075d6:	2600      	movs	r6, #0
 80075d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075dc:	f1b9 0901 	subs.w	r9, r9, #1
 80075e0:	d505      	bpl.n	80075ee <_fwalk_sglue+0x22>
 80075e2:	6824      	ldr	r4, [r4, #0]
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	d1f7      	bne.n	80075d8 <_fwalk_sglue+0xc>
 80075e8:	4630      	mov	r0, r6
 80075ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d907      	bls.n	8007604 <_fwalk_sglue+0x38>
 80075f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075f8:	3301      	adds	r3, #1
 80075fa:	d003      	beq.n	8007604 <_fwalk_sglue+0x38>
 80075fc:	4629      	mov	r1, r5
 80075fe:	4638      	mov	r0, r7
 8007600:	47c0      	blx	r8
 8007602:	4306      	orrs	r6, r0
 8007604:	3568      	adds	r5, #104	@ 0x68
 8007606:	e7e9      	b.n	80075dc <_fwalk_sglue+0x10>

08007608 <siprintf>:
 8007608:	b40e      	push	{r1, r2, r3}
 800760a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800760e:	b500      	push	{lr}
 8007610:	b09c      	sub	sp, #112	@ 0x70
 8007612:	ab1d      	add	r3, sp, #116	@ 0x74
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	9107      	str	r1, [sp, #28]
 800761a:	9104      	str	r1, [sp, #16]
 800761c:	4808      	ldr	r0, [pc, #32]	@ (8007640 <siprintf+0x38>)
 800761e:	4909      	ldr	r1, [pc, #36]	@ (8007644 <siprintf+0x3c>)
 8007620:	f853 2b04 	ldr.w	r2, [r3], #4
 8007624:	9105      	str	r1, [sp, #20]
 8007626:	6800      	ldr	r0, [r0, #0]
 8007628:	a902      	add	r1, sp, #8
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	f002 f9a8 	bl	8009980 <_svfiprintf_r>
 8007630:	2200      	movs	r2, #0
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	b01c      	add	sp, #112	@ 0x70
 8007638:	f85d eb04 	ldr.w	lr, [sp], #4
 800763c:	b003      	add	sp, #12
 800763e:	4770      	bx	lr
 8007640:	20000184 	.word	0x20000184
 8007644:	ffff0208 	.word	0xffff0208

08007648 <__sread>:
 8007648:	b510      	push	{r4, lr}
 800764a:	460c      	mov	r4, r1
 800764c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007650:	f000 f8da 	bl	8007808 <_read_r>
 8007654:	2800      	cmp	r0, #0
 8007656:	bfab      	itete	ge
 8007658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800765a:	89a3      	ldrhlt	r3, [r4, #12]
 800765c:	181b      	addge	r3, r3, r0
 800765e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007662:	bfac      	ite	ge
 8007664:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007666:	81a3      	strhlt	r3, [r4, #12]
 8007668:	bd10      	pop	{r4, pc}

0800766a <__swrite>:
 800766a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766e:	461f      	mov	r7, r3
 8007670:	898b      	ldrh	r3, [r1, #12]
 8007672:	4605      	mov	r5, r0
 8007674:	05db      	lsls	r3, r3, #23
 8007676:	460c      	mov	r4, r1
 8007678:	4616      	mov	r6, r2
 800767a:	d505      	bpl.n	8007688 <__swrite+0x1e>
 800767c:	2302      	movs	r3, #2
 800767e:	2200      	movs	r2, #0
 8007680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007684:	f000 f8ae 	bl	80077e4 <_lseek_r>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	4632      	mov	r2, r6
 800768c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	4628      	mov	r0, r5
 8007694:	463b      	mov	r3, r7
 8007696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800769a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	f000 b8c5 	b.w	800782c <_write_r>

080076a2 <__sseek>:
 80076a2:	b510      	push	{r4, lr}
 80076a4:	460c      	mov	r4, r1
 80076a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076aa:	f000 f89b 	bl	80077e4 <_lseek_r>
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	bf15      	itete	ne
 80076b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076be:	81a3      	strheq	r3, [r4, #12]
 80076c0:	bf18      	it	ne
 80076c2:	81a3      	strhne	r3, [r4, #12]
 80076c4:	bd10      	pop	{r4, pc}

080076c6 <__sclose>:
 80076c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ca:	f000 b87b 	b.w	80077c4 <_close_r>

080076ce <memset>:
 80076ce:	4603      	mov	r3, r0
 80076d0:	4402      	add	r2, r0
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d100      	bne.n	80076d8 <memset+0xa>
 80076d6:	4770      	bx	lr
 80076d8:	f803 1b01 	strb.w	r1, [r3], #1
 80076dc:	e7f9      	b.n	80076d2 <memset+0x4>

080076de <strncmp>:
 80076de:	b510      	push	{r4, lr}
 80076e0:	b16a      	cbz	r2, 80076fe <strncmp+0x20>
 80076e2:	3901      	subs	r1, #1
 80076e4:	1884      	adds	r4, r0, r2
 80076e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d103      	bne.n	80076fa <strncmp+0x1c>
 80076f2:	42a0      	cmp	r0, r4
 80076f4:	d001      	beq.n	80076fa <strncmp+0x1c>
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	d1f5      	bne.n	80076e6 <strncmp+0x8>
 80076fa:	1ad0      	subs	r0, r2, r3
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	4610      	mov	r0, r2
 8007700:	e7fc      	b.n	80076fc <strncmp+0x1e>
	...

08007704 <strtok>:
 8007704:	4b16      	ldr	r3, [pc, #88]	@ (8007760 <strtok+0x5c>)
 8007706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770a:	681f      	ldr	r7, [r3, #0]
 800770c:	4605      	mov	r5, r0
 800770e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007710:	460e      	mov	r6, r1
 8007712:	b9ec      	cbnz	r4, 8007750 <strtok+0x4c>
 8007714:	2050      	movs	r0, #80	@ 0x50
 8007716:	f001 fae1 	bl	8008cdc <malloc>
 800771a:	4602      	mov	r2, r0
 800771c:	6478      	str	r0, [r7, #68]	@ 0x44
 800771e:	b920      	cbnz	r0, 800772a <strtok+0x26>
 8007720:	215b      	movs	r1, #91	@ 0x5b
 8007722:	4b10      	ldr	r3, [pc, #64]	@ (8007764 <strtok+0x60>)
 8007724:	4810      	ldr	r0, [pc, #64]	@ (8007768 <strtok+0x64>)
 8007726:	f000 f8e7 	bl	80078f8 <__assert_func>
 800772a:	e9c0 4400 	strd	r4, r4, [r0]
 800772e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007732:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007736:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800773a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800773e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007742:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007746:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800774a:	6184      	str	r4, [r0, #24]
 800774c:	7704      	strb	r4, [r0, #28]
 800774e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007756:	2301      	movs	r3, #1
 8007758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	f000 b806 	b.w	800776c <__strtok_r>
 8007760:	20000184 	.word	0x20000184
 8007764:	0800b029 	.word	0x0800b029
 8007768:	0800b040 	.word	0x0800b040

0800776c <__strtok_r>:
 800776c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800776e:	4604      	mov	r4, r0
 8007770:	b908      	cbnz	r0, 8007776 <__strtok_r+0xa>
 8007772:	6814      	ldr	r4, [r2, #0]
 8007774:	b144      	cbz	r4, 8007788 <__strtok_r+0x1c>
 8007776:	460f      	mov	r7, r1
 8007778:	4620      	mov	r0, r4
 800777a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800777e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007782:	b91e      	cbnz	r6, 800778c <__strtok_r+0x20>
 8007784:	b965      	cbnz	r5, 80077a0 <__strtok_r+0x34>
 8007786:	6015      	str	r5, [r2, #0]
 8007788:	2000      	movs	r0, #0
 800778a:	e005      	b.n	8007798 <__strtok_r+0x2c>
 800778c:	42b5      	cmp	r5, r6
 800778e:	d1f6      	bne.n	800777e <__strtok_r+0x12>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f0      	bne.n	8007776 <__strtok_r+0xa>
 8007794:	6014      	str	r4, [r2, #0]
 8007796:	7003      	strb	r3, [r0, #0]
 8007798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779a:	461c      	mov	r4, r3
 800779c:	e00c      	b.n	80077b8 <__strtok_r+0x4c>
 800779e:	b915      	cbnz	r5, 80077a6 <__strtok_r+0x3a>
 80077a0:	460e      	mov	r6, r1
 80077a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80077aa:	42ab      	cmp	r3, r5
 80077ac:	d1f7      	bne.n	800779e <__strtok_r+0x32>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d0f3      	beq.n	800779a <__strtok_r+0x2e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80077b8:	6014      	str	r4, [r2, #0]
 80077ba:	e7ed      	b.n	8007798 <__strtok_r+0x2c>

080077bc <_localeconv_r>:
 80077bc:	4800      	ldr	r0, [pc, #0]	@ (80077c0 <_localeconv_r+0x4>)
 80077be:	4770      	bx	lr
 80077c0:	20000108 	.word	0x20000108

080077c4 <_close_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4d05      	ldr	r5, [pc, #20]	@ (80077e0 <_close_r+0x1c>)
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7fb fa3f 	bl	8002c52 <_close>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_close_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_close_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	200006e0 	.word	0x200006e0

080077e4 <_lseek_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	4611      	mov	r1, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	4d05      	ldr	r5, [pc, #20]	@ (8007804 <_lseek_r+0x20>)
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7fb fa51 	bl	8002c9a <_lseek>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_lseek_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_lseek_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200006e0 	.word	0x200006e0

08007808 <_read_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	2200      	movs	r2, #0
 8007812:	4d05      	ldr	r5, [pc, #20]	@ (8007828 <_read_r+0x20>)
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7fb f9e2 	bl	8002be0 <_read>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_read_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_read_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	200006e0 	.word	0x200006e0

0800782c <_write_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	2200      	movs	r2, #0
 8007836:	4d05      	ldr	r5, [pc, #20]	@ (800784c <_write_r+0x20>)
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fb f9ed 	bl	8002c1a <_write>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_write_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_write_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	200006e0 	.word	0x200006e0

08007850 <__errno>:
 8007850:	4b01      	ldr	r3, [pc, #4]	@ (8007858 <__errno+0x8>)
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	20000184 	.word	0x20000184

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	2600      	movs	r6, #0
 8007860:	4d0c      	ldr	r5, [pc, #48]	@ (8007894 <__libc_init_array+0x38>)
 8007862:	4c0d      	ldr	r4, [pc, #52]	@ (8007898 <__libc_init_array+0x3c>)
 8007864:	1b64      	subs	r4, r4, r5
 8007866:	10a4      	asrs	r4, r4, #2
 8007868:	42a6      	cmp	r6, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	f003 fb54 	bl	800af18 <_init>
 8007870:	2600      	movs	r6, #0
 8007872:	4d0a      	ldr	r5, [pc, #40]	@ (800789c <__libc_init_array+0x40>)
 8007874:	4c0a      	ldr	r4, [pc, #40]	@ (80078a0 <__libc_init_array+0x44>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	42a6      	cmp	r6, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f855 3b04 	ldr.w	r3, [r5], #4
 8007884:	4798      	blx	r3
 8007886:	3601      	adds	r6, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f855 3b04 	ldr.w	r3, [r5], #4
 800788e:	4798      	blx	r3
 8007890:	3601      	adds	r6, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	0800b7fc 	.word	0x0800b7fc
 8007898:	0800b7fc 	.word	0x0800b7fc
 800789c:	0800b7fc 	.word	0x0800b7fc
 80078a0:	0800b800 	.word	0x0800b800

080078a4 <__retarget_lock_init_recursive>:
 80078a4:	4770      	bx	lr

080078a6 <__retarget_lock_acquire_recursive>:
 80078a6:	4770      	bx	lr

080078a8 <__retarget_lock_release_recursive>:
 80078a8:	4770      	bx	lr

080078aa <memchr>:
 80078aa:	4603      	mov	r3, r0
 80078ac:	b510      	push	{r4, lr}
 80078ae:	b2c9      	uxtb	r1, r1
 80078b0:	4402      	add	r2, r0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	d101      	bne.n	80078bc <memchr+0x12>
 80078b8:	2000      	movs	r0, #0
 80078ba:	e003      	b.n	80078c4 <memchr+0x1a>
 80078bc:	7804      	ldrb	r4, [r0, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	428c      	cmp	r4, r1
 80078c2:	d1f6      	bne.n	80078b2 <memchr+0x8>
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <memcpy>:
 80078c6:	440a      	add	r2, r1
 80078c8:	4291      	cmp	r1, r2
 80078ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ce:	d100      	bne.n	80078d2 <memcpy+0xc>
 80078d0:	4770      	bx	lr
 80078d2:	b510      	push	{r4, lr}
 80078d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d8:	4291      	cmp	r1, r2
 80078da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078de:	d1f9      	bne.n	80078d4 <memcpy+0xe>
 80078e0:	bd10      	pop	{r4, pc}
	...

080078e4 <nan>:
 80078e4:	2000      	movs	r0, #0
 80078e6:	4901      	ldr	r1, [pc, #4]	@ (80078ec <nan+0x8>)
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	7ff80000 	.word	0x7ff80000

080078f0 <nanf>:
 80078f0:	4800      	ldr	r0, [pc, #0]	@ (80078f4 <nanf+0x4>)
 80078f2:	4770      	bx	lr
 80078f4:	7fc00000 	.word	0x7fc00000

080078f8 <__assert_func>:
 80078f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078fa:	4614      	mov	r4, r2
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <__assert_func+0x2c>)
 8007900:	4605      	mov	r5, r0
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68d8      	ldr	r0, [r3, #12]
 8007906:	b954      	cbnz	r4, 800791e <__assert_func+0x26>
 8007908:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <__assert_func+0x30>)
 800790a:	461c      	mov	r4, r3
 800790c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007910:	9100      	str	r1, [sp, #0]
 8007912:	462b      	mov	r3, r5
 8007914:	4905      	ldr	r1, [pc, #20]	@ (800792c <__assert_func+0x34>)
 8007916:	f002 f9d7 	bl	8009cc8 <fiprintf>
 800791a:	f002 fa11 	bl	8009d40 <abort>
 800791e:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <__assert_func+0x38>)
 8007920:	e7f4      	b.n	800790c <__assert_func+0x14>
 8007922:	bf00      	nop
 8007924:	20000184 	.word	0x20000184
 8007928:	0800b0dd 	.word	0x0800b0dd
 800792c:	0800b0af 	.word	0x0800b0af
 8007930:	0800b0a2 	.word	0x0800b0a2

08007934 <quorem>:
 8007934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	6903      	ldr	r3, [r0, #16]
 800793a:	690c      	ldr	r4, [r1, #16]
 800793c:	4607      	mov	r7, r0
 800793e:	42a3      	cmp	r3, r4
 8007940:	db7e      	blt.n	8007a40 <quorem+0x10c>
 8007942:	3c01      	subs	r4, #1
 8007944:	00a3      	lsls	r3, r4, #2
 8007946:	f100 0514 	add.w	r5, r0, #20
 800794a:	f101 0814 	add.w	r8, r1, #20
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800795a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800795e:	3301      	adds	r3, #1
 8007960:	429a      	cmp	r2, r3
 8007962:	fbb2 f6f3 	udiv	r6, r2, r3
 8007966:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800796a:	d32e      	bcc.n	80079ca <quorem+0x96>
 800796c:	f04f 0a00 	mov.w	sl, #0
 8007970:	46c4      	mov	ip, r8
 8007972:	46ae      	mov	lr, r5
 8007974:	46d3      	mov	fp, sl
 8007976:	f85c 3b04 	ldr.w	r3, [ip], #4
 800797a:	b298      	uxth	r0, r3
 800797c:	fb06 a000 	mla	r0, r6, r0, sl
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	0c02      	lsrs	r2, r0, #16
 8007984:	fb06 2303 	mla	r3, r6, r3, r2
 8007988:	f8de 2000 	ldr.w	r2, [lr]
 800798c:	b280      	uxth	r0, r0
 800798e:	b292      	uxth	r2, r2
 8007990:	1a12      	subs	r2, r2, r0
 8007992:	445a      	add	r2, fp
 8007994:	f8de 0000 	ldr.w	r0, [lr]
 8007998:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800799c:	b29b      	uxth	r3, r3
 800799e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079a6:	b292      	uxth	r2, r2
 80079a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079ac:	45e1      	cmp	r9, ip
 80079ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079b2:	f84e 2b04 	str.w	r2, [lr], #4
 80079b6:	d2de      	bcs.n	8007976 <quorem+0x42>
 80079b8:	9b00      	ldr	r3, [sp, #0]
 80079ba:	58eb      	ldr	r3, [r5, r3]
 80079bc:	b92b      	cbnz	r3, 80079ca <quorem+0x96>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	429d      	cmp	r5, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	d32f      	bcc.n	8007a28 <quorem+0xf4>
 80079c8:	613c      	str	r4, [r7, #16]
 80079ca:	4638      	mov	r0, r7
 80079cc:	f001 fd10 	bl	80093f0 <__mcmp>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	db25      	blt.n	8007a20 <quorem+0xec>
 80079d4:	4629      	mov	r1, r5
 80079d6:	2000      	movs	r0, #0
 80079d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80079dc:	f8d1 c000 	ldr.w	ip, [r1]
 80079e0:	fa1f fe82 	uxth.w	lr, r2
 80079e4:	fa1f f38c 	uxth.w	r3, ip
 80079e8:	eba3 030e 	sub.w	r3, r3, lr
 80079ec:	4403      	add	r3, r0
 80079ee:	0c12      	lsrs	r2, r2, #16
 80079f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fe:	45c1      	cmp	r9, r8
 8007a00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a04:	f841 3b04 	str.w	r3, [r1], #4
 8007a08:	d2e6      	bcs.n	80079d8 <quorem+0xa4>
 8007a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a12:	b922      	cbnz	r2, 8007a1e <quorem+0xea>
 8007a14:	3b04      	subs	r3, #4
 8007a16:	429d      	cmp	r5, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	d30b      	bcc.n	8007a34 <quorem+0x100>
 8007a1c:	613c      	str	r4, [r7, #16]
 8007a1e:	3601      	adds	r6, #1
 8007a20:	4630      	mov	r0, r6
 8007a22:	b003      	add	sp, #12
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	3b04      	subs	r3, #4
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d1cb      	bne.n	80079c8 <quorem+0x94>
 8007a30:	3c01      	subs	r4, #1
 8007a32:	e7c6      	b.n	80079c2 <quorem+0x8e>
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	3b04      	subs	r3, #4
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	d1ef      	bne.n	8007a1c <quorem+0xe8>
 8007a3c:	3c01      	subs	r4, #1
 8007a3e:	e7ea      	b.n	8007a16 <quorem+0xe2>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e7ee      	b.n	8007a22 <quorem+0xee>
 8007a44:	0000      	movs	r0, r0
	...

08007a48 <_dtoa_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	461d      	mov	r5, r3
 8007a50:	69c7      	ldr	r7, [r0, #28]
 8007a52:	b097      	sub	sp, #92	@ 0x5c
 8007a54:	4683      	mov	fp, r0
 8007a56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a5c:	b97f      	cbnz	r7, 8007a7e <_dtoa_r+0x36>
 8007a5e:	2010      	movs	r0, #16
 8007a60:	f001 f93c 	bl	8008cdc <malloc>
 8007a64:	4602      	mov	r2, r0
 8007a66:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a6a:	b920      	cbnz	r0, 8007a76 <_dtoa_r+0x2e>
 8007a6c:	21ef      	movs	r1, #239	@ 0xef
 8007a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8007d10 <_dtoa_r+0x2c8>)
 8007a70:	48a8      	ldr	r0, [pc, #672]	@ (8007d14 <_dtoa_r+0x2cc>)
 8007a72:	f7ff ff41 	bl	80078f8 <__assert_func>
 8007a76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a7a:	6007      	str	r7, [r0, #0]
 8007a7c:	60c7      	str	r7, [r0, #12]
 8007a7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	b159      	cbz	r1, 8007a9e <_dtoa_r+0x56>
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4093      	lsls	r3, r2
 8007a8c:	604a      	str	r2, [r1, #4]
 8007a8e:	608b      	str	r3, [r1, #8]
 8007a90:	4658      	mov	r0, fp
 8007a92:	f001 fa2b 	bl	8008eec <_Bfree>
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	1e2b      	subs	r3, r5, #0
 8007aa0:	bfaf      	iteee	ge
 8007aa2:	2300      	movge	r3, #0
 8007aa4:	2201      	movlt	r2, #1
 8007aa6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007aaa:	9303      	strlt	r3, [sp, #12]
 8007aac:	bfa8      	it	ge
 8007aae:	6033      	strge	r3, [r6, #0]
 8007ab0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ab4:	4b98      	ldr	r3, [pc, #608]	@ (8007d18 <_dtoa_r+0x2d0>)
 8007ab6:	bfb8      	it	lt
 8007ab8:	6032      	strlt	r2, [r6, #0]
 8007aba:	ea33 0308 	bics.w	r3, r3, r8
 8007abe:	d112      	bne.n	8007ae6 <_dtoa_r+0x9e>
 8007ac0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ac4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007acc:	4323      	orrs	r3, r4
 8007ace:	f000 8550 	beq.w	8008572 <_dtoa_r+0xb2a>
 8007ad2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ad4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007d1c <_dtoa_r+0x2d4>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8552 	beq.w	8008582 <_dtoa_r+0xb3a>
 8007ade:	f10a 0303 	add.w	r3, sl, #3
 8007ae2:	f000 bd4c 	b.w	800857e <_dtoa_r+0xb36>
 8007ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	f7f8 ff57 	bl	80009a8 <__aeabi_dcmpeq>
 8007afa:	4607      	mov	r7, r0
 8007afc:	b158      	cbz	r0, 8007b16 <_dtoa_r+0xce>
 8007afe:	2301      	movs	r3, #1
 8007b00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b06:	b113      	cbz	r3, 8007b0e <_dtoa_r+0xc6>
 8007b08:	4b85      	ldr	r3, [pc, #532]	@ (8007d20 <_dtoa_r+0x2d8>)
 8007b0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007d24 <_dtoa_r+0x2dc>
 8007b12:	f000 bd36 	b.w	8008582 <_dtoa_r+0xb3a>
 8007b16:	ab14      	add	r3, sp, #80	@ 0x50
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	ab15      	add	r3, sp, #84	@ 0x54
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4658      	mov	r0, fp
 8007b20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b24:	f001 fd7c 	bl	8009620 <__d2b>
 8007b28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b2c:	4681      	mov	r9, r0
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	d077      	beq.n	8007c22 <_dtoa_r+0x1da>
 8007b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b48:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4b76      	ldr	r3, [pc, #472]	@ (8007d28 <_dtoa_r+0x2e0>)
 8007b50:	f7f8 fb0a 	bl	8000168 <__aeabi_dsub>
 8007b54:	a368      	add	r3, pc, #416	@ (adr r3, 8007cf8 <_dtoa_r+0x2b0>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 fcbd 	bl	80004d8 <__aeabi_dmul>
 8007b5e:	a368      	add	r3, pc, #416	@ (adr r3, 8007d00 <_dtoa_r+0x2b8>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb02 	bl	800016c <__adddf3>
 8007b68:	4604      	mov	r4, r0
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	f7f8 fc49 	bl	8000404 <__aeabi_i2d>
 8007b72:	a365      	add	r3, pc, #404	@ (adr r3, 8007d08 <_dtoa_r+0x2c0>)
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	f7f8 fcae 	bl	80004d8 <__aeabi_dmul>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	f7f8 faf2 	bl	800016c <__adddf3>
 8007b88:	4604      	mov	r4, r0
 8007b8a:	460d      	mov	r5, r1
 8007b8c:	f7f8 ff54 	bl	8000a38 <__aeabi_d2iz>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4607      	mov	r7, r0
 8007b94:	2300      	movs	r3, #0
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 ff0f 	bl	80009bc <__aeabi_dcmplt>
 8007b9e:	b140      	cbz	r0, 8007bb2 <_dtoa_r+0x16a>
 8007ba0:	4638      	mov	r0, r7
 8007ba2:	f7f8 fc2f 	bl	8000404 <__aeabi_i2d>
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	f7f8 fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8007bae:	b900      	cbnz	r0, 8007bb2 <_dtoa_r+0x16a>
 8007bb0:	3f01      	subs	r7, #1
 8007bb2:	2f16      	cmp	r7, #22
 8007bb4:	d853      	bhi.n	8007c5e <_dtoa_r+0x216>
 8007bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bba:	4b5c      	ldr	r3, [pc, #368]	@ (8007d2c <_dtoa_r+0x2e4>)
 8007bbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fefa 	bl	80009bc <__aeabi_dcmplt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d04a      	beq.n	8007c62 <_dtoa_r+0x21a>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bd4:	1b9b      	subs	r3, r3, r6
 8007bd6:	1e5a      	subs	r2, r3, #1
 8007bd8:	bf46      	itte	mi
 8007bda:	f1c3 0801 	rsbmi	r8, r3, #1
 8007bde:	2300      	movmi	r3, #0
 8007be0:	f04f 0800 	movpl.w	r8, #0
 8007be4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007be6:	bf48      	it	mi
 8007be8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007bea:	2f00      	cmp	r7, #0
 8007bec:	db3b      	blt.n	8007c66 <_dtoa_r+0x21e>
 8007bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf0:	970e      	str	r7, [sp, #56]	@ 0x38
 8007bf2:	443b      	add	r3, r7
 8007bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bfc:	2b09      	cmp	r3, #9
 8007bfe:	d866      	bhi.n	8007cce <_dtoa_r+0x286>
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	bfc4      	itt	gt
 8007c04:	3b04      	subgt	r3, #4
 8007c06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007c08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c0a:	bfc8      	it	gt
 8007c0c:	2400      	movgt	r4, #0
 8007c0e:	f1a3 0302 	sub.w	r3, r3, #2
 8007c12:	bfd8      	it	le
 8007c14:	2401      	movle	r4, #1
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d864      	bhi.n	8007ce4 <_dtoa_r+0x29c>
 8007c1a:	e8df f003 	tbb	[pc, r3]
 8007c1e:	382b      	.short	0x382b
 8007c20:	5636      	.short	0x5636
 8007c22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c26:	441e      	add	r6, r3
 8007c28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	bfc1      	itttt	gt
 8007c30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c34:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c40:	bfd6      	itet	le
 8007c42:	f1c3 0320 	rsble	r3, r3, #32
 8007c46:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c4a:	fa04 f003 	lslle.w	r0, r4, r3
 8007c4e:	f7f8 fbc9 	bl	80003e4 <__aeabi_ui2d>
 8007c52:	2201      	movs	r2, #1
 8007c54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c58:	3e01      	subs	r6, #1
 8007c5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c5c:	e775      	b.n	8007b4a <_dtoa_r+0x102>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e7b6      	b.n	8007bd0 <_dtoa_r+0x188>
 8007c62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c64:	e7b5      	b.n	8007bd2 <_dtoa_r+0x18a>
 8007c66:	427b      	negs	r3, r7
 8007c68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	eba8 0807 	sub.w	r8, r8, r7
 8007c70:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c72:	e7c2      	b.n	8007bfa <_dtoa_r+0x1b2>
 8007c74:	2300      	movs	r3, #0
 8007c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dc35      	bgt.n	8007cea <_dtoa_r+0x2a2>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	461a      	mov	r2, r3
 8007c82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c86:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c88:	e00b      	b.n	8007ca2 <_dtoa_r+0x25a>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e7f3      	b.n	8007c76 <_dtoa_r+0x22e>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	9308      	str	r3, [sp, #32]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	bfb8      	it	lt
 8007ca0:	2301      	movlt	r3, #1
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007caa:	f102 0514 	add.w	r5, r2, #20
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	d91f      	bls.n	8007cf2 <_dtoa_r+0x2aa>
 8007cb2:	6041      	str	r1, [r0, #4]
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f001 f8d9 	bl	8008e6c <_Balloc>
 8007cba:	4682      	mov	sl, r0
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d139      	bne.n	8007d34 <_dtoa_r+0x2ec>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d30 <_dtoa_r+0x2e8>)
 8007cc8:	e6d2      	b.n	8007a70 <_dtoa_r+0x28>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e7e0      	b.n	8007c90 <_dtoa_r+0x248>
 8007cce:	2401      	movs	r4, #1
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	2200      	movs	r2, #0
 8007cdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ce0:	2312      	movs	r3, #18
 8007ce2:	e7d0      	b.n	8007c86 <_dtoa_r+0x23e>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ce8:	e7f5      	b.n	8007cd6 <_dtoa_r+0x28e>
 8007cea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cf0:	e7d7      	b.n	8007ca2 <_dtoa_r+0x25a>
 8007cf2:	3101      	adds	r1, #1
 8007cf4:	0052      	lsls	r2, r2, #1
 8007cf6:	e7d8      	b.n	8007caa <_dtoa_r+0x262>
 8007cf8:	636f4361 	.word	0x636f4361
 8007cfc:	3fd287a7 	.word	0x3fd287a7
 8007d00:	8b60c8b3 	.word	0x8b60c8b3
 8007d04:	3fc68a28 	.word	0x3fc68a28
 8007d08:	509f79fb 	.word	0x509f79fb
 8007d0c:	3fd34413 	.word	0x3fd34413
 8007d10:	0800b029 	.word	0x0800b029
 8007d14:	0800b0eb 	.word	0x0800b0eb
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	0800b0e7 	.word	0x0800b0e7
 8007d20:	0800b001 	.word	0x0800b001
 8007d24:	0800b000 	.word	0x0800b000
 8007d28:	3ff80000 	.word	0x3ff80000
 8007d2c:	0800b248 	.word	0x0800b248
 8007d30:	0800b143 	.word	0x0800b143
 8007d34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d38:	6018      	str	r0, [r3, #0]
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	2b0e      	cmp	r3, #14
 8007d3e:	f200 80a4 	bhi.w	8007e8a <_dtoa_r+0x442>
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	f000 80a1 	beq.w	8007e8a <_dtoa_r+0x442>
 8007d48:	2f00      	cmp	r7, #0
 8007d4a:	dd33      	ble.n	8007db4 <_dtoa_r+0x36c>
 8007d4c:	4b86      	ldr	r3, [pc, #536]	@ (8007f68 <_dtoa_r+0x520>)
 8007d4e:	f007 020f 	and.w	r2, r7, #15
 8007d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d56:	05f8      	lsls	r0, r7, #23
 8007d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d64:	d516      	bpl.n	8007d94 <_dtoa_r+0x34c>
 8007d66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d6a:	4b80      	ldr	r3, [pc, #512]	@ (8007f6c <_dtoa_r+0x524>)
 8007d6c:	2603      	movs	r6, #3
 8007d6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d72:	f7f8 fcdb 	bl	800072c <__aeabi_ddiv>
 8007d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7a:	f004 040f 	and.w	r4, r4, #15
 8007d7e:	4d7b      	ldr	r5, [pc, #492]	@ (8007f6c <_dtoa_r+0x524>)
 8007d80:	b954      	cbnz	r4, 8007d98 <_dtoa_r+0x350>
 8007d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d8a:	f7f8 fccf 	bl	800072c <__aeabi_ddiv>
 8007d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d92:	e028      	b.n	8007de6 <_dtoa_r+0x39e>
 8007d94:	2602      	movs	r6, #2
 8007d96:	e7f2      	b.n	8007d7e <_dtoa_r+0x336>
 8007d98:	07e1      	lsls	r1, r4, #31
 8007d9a:	d508      	bpl.n	8007dae <_dtoa_r+0x366>
 8007d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007da0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007da4:	f7f8 fb98 	bl	80004d8 <__aeabi_dmul>
 8007da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dac:	3601      	adds	r6, #1
 8007dae:	1064      	asrs	r4, r4, #1
 8007db0:	3508      	adds	r5, #8
 8007db2:	e7e5      	b.n	8007d80 <_dtoa_r+0x338>
 8007db4:	f000 80d2 	beq.w	8007f5c <_dtoa_r+0x514>
 8007db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dbc:	427c      	negs	r4, r7
 8007dbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007f68 <_dtoa_r+0x520>)
 8007dc0:	f004 020f 	and.w	r2, r4, #15
 8007dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fb84 	bl	80004d8 <__aeabi_dmul>
 8007dd0:	2602      	movs	r6, #2
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd8:	4d64      	ldr	r5, [pc, #400]	@ (8007f6c <_dtoa_r+0x524>)
 8007dda:	1124      	asrs	r4, r4, #4
 8007ddc:	2c00      	cmp	r4, #0
 8007dde:	f040 80b2 	bne.w	8007f46 <_dtoa_r+0x4fe>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1d3      	bne.n	8007d8e <_dtoa_r+0x346>
 8007de6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80b7 	beq.w	8007f60 <_dtoa_r+0x518>
 8007df2:	2200      	movs	r2, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4b5d      	ldr	r3, [pc, #372]	@ (8007f70 <_dtoa_r+0x528>)
 8007dfa:	f7f8 fddf 	bl	80009bc <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f000 80ae 	beq.w	8007f60 <_dtoa_r+0x518>
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 80aa 	beq.w	8007f60 <_dtoa_r+0x518>
 8007e0c:	9b08      	ldr	r3, [sp, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd37      	ble.n	8007e82 <_dtoa_r+0x43a>
 8007e12:	1e7b      	subs	r3, r7, #1
 8007e14:	4620      	mov	r0, r4
 8007e16:	9304      	str	r3, [sp, #16]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4b55      	ldr	r3, [pc, #340]	@ (8007f74 <_dtoa_r+0x52c>)
 8007e1e:	f7f8 fb5b 	bl	80004d8 <__aeabi_dmul>
 8007e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e26:	9c08      	ldr	r4, [sp, #32]
 8007e28:	3601      	adds	r6, #1
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7f8 faea 	bl	8000404 <__aeabi_i2d>
 8007e30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e34:	f7f8 fb50 	bl	80004d8 <__aeabi_dmul>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f78 <_dtoa_r+0x530>)
 8007e3c:	f7f8 f996 	bl	800016c <__adddf3>
 8007e40:	4605      	mov	r5, r0
 8007e42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	f040 809a 	bne.w	8007f80 <_dtoa_r+0x538>
 8007e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b4a      	ldr	r3, [pc, #296]	@ (8007f7c <_dtoa_r+0x534>)
 8007e54:	f7f8 f988 	bl	8000168 <__aeabi_dsub>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e60:	462a      	mov	r2, r5
 8007e62:	4633      	mov	r3, r6
 8007e64:	f7f8 fdc8 	bl	80009f8 <__aeabi_dcmpgt>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f040 828e 	bne.w	800838a <_dtoa_r+0x942>
 8007e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e72:	462a      	mov	r2, r5
 8007e74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e78:	f7f8 fda0 	bl	80009bc <__aeabi_dcmplt>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f040 8127 	bne.w	80080d0 <_dtoa_r+0x688>
 8007e82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f2c0 8163 	blt.w	8008158 <_dtoa_r+0x710>
 8007e92:	2f0e      	cmp	r7, #14
 8007e94:	f300 8160 	bgt.w	8008158 <_dtoa_r+0x710>
 8007e98:	4b33      	ldr	r3, [pc, #204]	@ (8007f68 <_dtoa_r+0x520>)
 8007e9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ea2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ea6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da03      	bge.n	8007eb4 <_dtoa_r+0x46c>
 8007eac:	9b07      	ldr	r3, [sp, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f340 8100 	ble.w	80080b4 <_dtoa_r+0x66c>
 8007eb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007eb8:	4656      	mov	r6, sl
 8007eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 fc33 	bl	800072c <__aeabi_ddiv>
 8007ec6:	f7f8 fdb7 	bl	8000a38 <__aeabi_d2iz>
 8007eca:	4680      	mov	r8, r0
 8007ecc:	f7f8 fa9a 	bl	8000404 <__aeabi_i2d>
 8007ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed4:	f7f8 fb00 	bl	80004d8 <__aeabi_dmul>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 f942 	bl	8000168 <__aeabi_dsub>
 8007ee4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ee8:	9d07      	ldr	r5, [sp, #28]
 8007eea:	f806 4b01 	strb.w	r4, [r6], #1
 8007eee:	eba6 040a 	sub.w	r4, r6, sl
 8007ef2:	42a5      	cmp	r5, r4
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	f040 8116 	bne.w	8008128 <_dtoa_r+0x6e0>
 8007efc:	f7f8 f936 	bl	800016c <__adddf3>
 8007f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	f7f8 fd76 	bl	80009f8 <__aeabi_dcmpgt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 80f8 	bne.w	8008102 <_dtoa_r+0x6ba>
 8007f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1e:	b118      	cbz	r0, 8007f28 <_dtoa_r+0x4e0>
 8007f20:	f018 0f01 	tst.w	r8, #1
 8007f24:	f040 80ed 	bne.w	8008102 <_dtoa_r+0x6ba>
 8007f28:	4649      	mov	r1, r9
 8007f2a:	4658      	mov	r0, fp
 8007f2c:	f000 ffde 	bl	8008eec <_Bfree>
 8007f30:	2300      	movs	r3, #0
 8007f32:	7033      	strb	r3, [r6, #0]
 8007f34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f36:	3701      	adds	r7, #1
 8007f38:	601f      	str	r7, [r3, #0]
 8007f3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8320 	beq.w	8008582 <_dtoa_r+0xb3a>
 8007f42:	601e      	str	r6, [r3, #0]
 8007f44:	e31d      	b.n	8008582 <_dtoa_r+0xb3a>
 8007f46:	07e2      	lsls	r2, r4, #31
 8007f48:	d505      	bpl.n	8007f56 <_dtoa_r+0x50e>
 8007f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f4e:	f7f8 fac3 	bl	80004d8 <__aeabi_dmul>
 8007f52:	2301      	movs	r3, #1
 8007f54:	3601      	adds	r6, #1
 8007f56:	1064      	asrs	r4, r4, #1
 8007f58:	3508      	adds	r5, #8
 8007f5a:	e73f      	b.n	8007ddc <_dtoa_r+0x394>
 8007f5c:	2602      	movs	r6, #2
 8007f5e:	e742      	b.n	8007de6 <_dtoa_r+0x39e>
 8007f60:	9c07      	ldr	r4, [sp, #28]
 8007f62:	9704      	str	r7, [sp, #16]
 8007f64:	e761      	b.n	8007e2a <_dtoa_r+0x3e2>
 8007f66:	bf00      	nop
 8007f68:	0800b248 	.word	0x0800b248
 8007f6c:	0800b220 	.word	0x0800b220
 8007f70:	3ff00000 	.word	0x3ff00000
 8007f74:	40240000 	.word	0x40240000
 8007f78:	401c0000 	.word	0x401c0000
 8007f7c:	40140000 	.word	0x40140000
 8007f80:	4b70      	ldr	r3, [pc, #448]	@ (8008144 <_dtoa_r+0x6fc>)
 8007f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f8c:	4454      	add	r4, sl
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d045      	beq.n	800801e <_dtoa_r+0x5d6>
 8007f92:	2000      	movs	r0, #0
 8007f94:	496c      	ldr	r1, [pc, #432]	@ (8008148 <_dtoa_r+0x700>)
 8007f96:	f7f8 fbc9 	bl	800072c <__aeabi_ddiv>
 8007f9a:	4633      	mov	r3, r6
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	f7f8 f8e3 	bl	8000168 <__aeabi_dsub>
 8007fa2:	4656      	mov	r6, sl
 8007fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fac:	f7f8 fd44 	bl	8000a38 <__aeabi_d2iz>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f7f8 fa27 	bl	8000404 <__aeabi_i2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fbe:	f7f8 f8d3 	bl	8000168 <__aeabi_dsub>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	3530      	adds	r5, #48	@ 0x30
 8007fc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fd0:	f806 5b01 	strb.w	r5, [r6], #1
 8007fd4:	f7f8 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d163      	bne.n	80080a4 <_dtoa_r+0x65c>
 8007fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	495a      	ldr	r1, [pc, #360]	@ (800814c <_dtoa_r+0x704>)
 8007fe4:	f7f8 f8c0 	bl	8000168 <__aeabi_dsub>
 8007fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fec:	f7f8 fce6 	bl	80009bc <__aeabi_dcmplt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f040 8087 	bne.w	8008104 <_dtoa_r+0x6bc>
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	f43f af43 	beq.w	8007e82 <_dtoa_r+0x43a>
 8007ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008000:	2200      	movs	r2, #0
 8008002:	4b53      	ldr	r3, [pc, #332]	@ (8008150 <_dtoa_r+0x708>)
 8008004:	f7f8 fa68 	bl	80004d8 <__aeabi_dmul>
 8008008:	2200      	movs	r2, #0
 800800a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800800e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008012:	4b4f      	ldr	r3, [pc, #316]	@ (8008150 <_dtoa_r+0x708>)
 8008014:	f7f8 fa60 	bl	80004d8 <__aeabi_dmul>
 8008018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801c:	e7c4      	b.n	8007fa8 <_dtoa_r+0x560>
 800801e:	4631      	mov	r1, r6
 8008020:	4628      	mov	r0, r5
 8008022:	f7f8 fa59 	bl	80004d8 <__aeabi_dmul>
 8008026:	4656      	mov	r6, sl
 8008028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800802c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	f7f8 fd01 	bl	8000a38 <__aeabi_d2iz>
 8008036:	4605      	mov	r5, r0
 8008038:	f7f8 f9e4 	bl	8000404 <__aeabi_i2d>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008044:	f7f8 f890 	bl	8000168 <__aeabi_dsub>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	3530      	adds	r5, #48	@ 0x30
 800804e:	f806 5b01 	strb.w	r5, [r6], #1
 8008052:	42a6      	cmp	r6, r4
 8008054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	d124      	bne.n	80080a8 <_dtoa_r+0x660>
 800805e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008062:	4b39      	ldr	r3, [pc, #228]	@ (8008148 <_dtoa_r+0x700>)
 8008064:	f7f8 f882 	bl	800016c <__adddf3>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008070:	f7f8 fcc2 	bl	80009f8 <__aeabi_dcmpgt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d145      	bne.n	8008104 <_dtoa_r+0x6bc>
 8008078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800807c:	2000      	movs	r0, #0
 800807e:	4932      	ldr	r1, [pc, #200]	@ (8008148 <_dtoa_r+0x700>)
 8008080:	f7f8 f872 	bl	8000168 <__aeabi_dsub>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808c:	f7f8 fc96 	bl	80009bc <__aeabi_dcmplt>
 8008090:	2800      	cmp	r0, #0
 8008092:	f43f aef6 	beq.w	8007e82 <_dtoa_r+0x43a>
 8008096:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008098:	1e73      	subs	r3, r6, #1
 800809a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800809c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080a0:	2b30      	cmp	r3, #48	@ 0x30
 80080a2:	d0f8      	beq.n	8008096 <_dtoa_r+0x64e>
 80080a4:	9f04      	ldr	r7, [sp, #16]
 80080a6:	e73f      	b.n	8007f28 <_dtoa_r+0x4e0>
 80080a8:	4b29      	ldr	r3, [pc, #164]	@ (8008150 <_dtoa_r+0x708>)
 80080aa:	f7f8 fa15 	bl	80004d8 <__aeabi_dmul>
 80080ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b2:	e7bc      	b.n	800802e <_dtoa_r+0x5e6>
 80080b4:	d10c      	bne.n	80080d0 <_dtoa_r+0x688>
 80080b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ba:	2200      	movs	r2, #0
 80080bc:	4b25      	ldr	r3, [pc, #148]	@ (8008154 <_dtoa_r+0x70c>)
 80080be:	f7f8 fa0b 	bl	80004d8 <__aeabi_dmul>
 80080c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c6:	f7f8 fc8d 	bl	80009e4 <__aeabi_dcmpge>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	f000 815b 	beq.w	8008386 <_dtoa_r+0x93e>
 80080d0:	2400      	movs	r4, #0
 80080d2:	4625      	mov	r5, r4
 80080d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080d6:	4656      	mov	r6, sl
 80080d8:	43db      	mvns	r3, r3
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	2700      	movs	r7, #0
 80080de:	4621      	mov	r1, r4
 80080e0:	4658      	mov	r0, fp
 80080e2:	f000 ff03 	bl	8008eec <_Bfree>
 80080e6:	2d00      	cmp	r5, #0
 80080e8:	d0dc      	beq.n	80080a4 <_dtoa_r+0x65c>
 80080ea:	b12f      	cbz	r7, 80080f8 <_dtoa_r+0x6b0>
 80080ec:	42af      	cmp	r7, r5
 80080ee:	d003      	beq.n	80080f8 <_dtoa_r+0x6b0>
 80080f0:	4639      	mov	r1, r7
 80080f2:	4658      	mov	r0, fp
 80080f4:	f000 fefa 	bl	8008eec <_Bfree>
 80080f8:	4629      	mov	r1, r5
 80080fa:	4658      	mov	r0, fp
 80080fc:	f000 fef6 	bl	8008eec <_Bfree>
 8008100:	e7d0      	b.n	80080a4 <_dtoa_r+0x65c>
 8008102:	9704      	str	r7, [sp, #16]
 8008104:	4633      	mov	r3, r6
 8008106:	461e      	mov	r6, r3
 8008108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800810c:	2a39      	cmp	r2, #57	@ 0x39
 800810e:	d107      	bne.n	8008120 <_dtoa_r+0x6d8>
 8008110:	459a      	cmp	sl, r3
 8008112:	d1f8      	bne.n	8008106 <_dtoa_r+0x6be>
 8008114:	9a04      	ldr	r2, [sp, #16]
 8008116:	3201      	adds	r2, #1
 8008118:	9204      	str	r2, [sp, #16]
 800811a:	2230      	movs	r2, #48	@ 0x30
 800811c:	f88a 2000 	strb.w	r2, [sl]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	3201      	adds	r2, #1
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	e7bd      	b.n	80080a4 <_dtoa_r+0x65c>
 8008128:	2200      	movs	r2, #0
 800812a:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <_dtoa_r+0x708>)
 800812c:	f7f8 f9d4 	bl	80004d8 <__aeabi_dmul>
 8008130:	2200      	movs	r2, #0
 8008132:	2300      	movs	r3, #0
 8008134:	4604      	mov	r4, r0
 8008136:	460d      	mov	r5, r1
 8008138:	f7f8 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800813c:	2800      	cmp	r0, #0
 800813e:	f43f aebc 	beq.w	8007eba <_dtoa_r+0x472>
 8008142:	e6f1      	b.n	8007f28 <_dtoa_r+0x4e0>
 8008144:	0800b248 	.word	0x0800b248
 8008148:	3fe00000 	.word	0x3fe00000
 800814c:	3ff00000 	.word	0x3ff00000
 8008150:	40240000 	.word	0x40240000
 8008154:	40140000 	.word	0x40140000
 8008158:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800815a:	2a00      	cmp	r2, #0
 800815c:	f000 80db 	beq.w	8008316 <_dtoa_r+0x8ce>
 8008160:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008162:	2a01      	cmp	r2, #1
 8008164:	f300 80bf 	bgt.w	80082e6 <_dtoa_r+0x89e>
 8008168:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800816a:	2a00      	cmp	r2, #0
 800816c:	f000 80b7 	beq.w	80082de <_dtoa_r+0x896>
 8008170:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008174:	4646      	mov	r6, r8
 8008176:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817a:	2101      	movs	r1, #1
 800817c:	441a      	add	r2, r3
 800817e:	4658      	mov	r0, fp
 8008180:	4498      	add	r8, r3
 8008182:	9209      	str	r2, [sp, #36]	@ 0x24
 8008184:	f000 ffb0 	bl	80090e8 <__i2b>
 8008188:	4605      	mov	r5, r0
 800818a:	b15e      	cbz	r6, 80081a4 <_dtoa_r+0x75c>
 800818c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	dd08      	ble.n	80081a4 <_dtoa_r+0x75c>
 8008192:	42b3      	cmp	r3, r6
 8008194:	bfa8      	it	ge
 8008196:	4633      	movge	r3, r6
 8008198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800819a:	eba8 0803 	sub.w	r8, r8, r3
 800819e:	1af6      	subs	r6, r6, r3
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a6:	b1f3      	cbz	r3, 80081e6 <_dtoa_r+0x79e>
 80081a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 80b7 	beq.w	800831e <_dtoa_r+0x8d6>
 80081b0:	b18c      	cbz	r4, 80081d6 <_dtoa_r+0x78e>
 80081b2:	4629      	mov	r1, r5
 80081b4:	4622      	mov	r2, r4
 80081b6:	4658      	mov	r0, fp
 80081b8:	f001 f854 	bl	8009264 <__pow5mult>
 80081bc:	464a      	mov	r2, r9
 80081be:	4601      	mov	r1, r0
 80081c0:	4605      	mov	r5, r0
 80081c2:	4658      	mov	r0, fp
 80081c4:	f000 ffa6 	bl	8009114 <__multiply>
 80081c8:	4649      	mov	r1, r9
 80081ca:	9004      	str	r0, [sp, #16]
 80081cc:	4658      	mov	r0, fp
 80081ce:	f000 fe8d 	bl	8008eec <_Bfree>
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	4699      	mov	r9, r3
 80081d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d8:	1b1a      	subs	r2, r3, r4
 80081da:	d004      	beq.n	80081e6 <_dtoa_r+0x79e>
 80081dc:	4649      	mov	r1, r9
 80081de:	4658      	mov	r0, fp
 80081e0:	f001 f840 	bl	8009264 <__pow5mult>
 80081e4:	4681      	mov	r9, r0
 80081e6:	2101      	movs	r1, #1
 80081e8:	4658      	mov	r0, fp
 80081ea:	f000 ff7d 	bl	80090e8 <__i2b>
 80081ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081f0:	4604      	mov	r4, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 81c9 	beq.w	800858a <_dtoa_r+0xb42>
 80081f8:	461a      	mov	r2, r3
 80081fa:	4601      	mov	r1, r0
 80081fc:	4658      	mov	r0, fp
 80081fe:	f001 f831 	bl	8009264 <__pow5mult>
 8008202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008204:	4604      	mov	r4, r0
 8008206:	2b01      	cmp	r3, #1
 8008208:	f300 808f 	bgt.w	800832a <_dtoa_r+0x8e2>
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 8087 	bne.w	8008322 <_dtoa_r+0x8da>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 8083 	bne.w	8008326 <_dtoa_r+0x8de>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008226:	0d1b      	lsrs	r3, r3, #20
 8008228:	051b      	lsls	r3, r3, #20
 800822a:	b12b      	cbz	r3, 8008238 <_dtoa_r+0x7f0>
 800822c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822e:	f108 0801 	add.w	r8, r8, #1
 8008232:	3301      	adds	r3, #1
 8008234:	9309      	str	r3, [sp, #36]	@ 0x24
 8008236:	2301      	movs	r3, #1
 8008238:	930a      	str	r3, [sp, #40]	@ 0x28
 800823a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 81aa 	beq.w	8008596 <_dtoa_r+0xb4e>
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008248:	6918      	ldr	r0, [r3, #16]
 800824a:	f000 ff01 	bl	8009050 <__hi0bits>
 800824e:	f1c0 0020 	rsb	r0, r0, #32
 8008252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008254:	4418      	add	r0, r3
 8008256:	f010 001f 	ands.w	r0, r0, #31
 800825a:	d071      	beq.n	8008340 <_dtoa_r+0x8f8>
 800825c:	f1c0 0320 	rsb	r3, r0, #32
 8008260:	2b04      	cmp	r3, #4
 8008262:	dd65      	ble.n	8008330 <_dtoa_r+0x8e8>
 8008264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008266:	f1c0 001c 	rsb	r0, r0, #28
 800826a:	4403      	add	r3, r0
 800826c:	4480      	add	r8, r0
 800826e:	4406      	add	r6, r0
 8008270:	9309      	str	r3, [sp, #36]	@ 0x24
 8008272:	f1b8 0f00 	cmp.w	r8, #0
 8008276:	dd05      	ble.n	8008284 <_dtoa_r+0x83c>
 8008278:	4649      	mov	r1, r9
 800827a:	4642      	mov	r2, r8
 800827c:	4658      	mov	r0, fp
 800827e:	f001 f84b 	bl	8009318 <__lshift>
 8008282:	4681      	mov	r9, r0
 8008284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	dd05      	ble.n	8008296 <_dtoa_r+0x84e>
 800828a:	4621      	mov	r1, r4
 800828c:	461a      	mov	r2, r3
 800828e:	4658      	mov	r0, fp
 8008290:	f001 f842 	bl	8009318 <__lshift>
 8008294:	4604      	mov	r4, r0
 8008296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008298:	2b00      	cmp	r3, #0
 800829a:	d053      	beq.n	8008344 <_dtoa_r+0x8fc>
 800829c:	4621      	mov	r1, r4
 800829e:	4648      	mov	r0, r9
 80082a0:	f001 f8a6 	bl	80093f0 <__mcmp>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	da4d      	bge.n	8008344 <_dtoa_r+0x8fc>
 80082a8:	1e7b      	subs	r3, r7, #1
 80082aa:	4649      	mov	r1, r9
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	220a      	movs	r2, #10
 80082b0:	2300      	movs	r3, #0
 80082b2:	4658      	mov	r0, fp
 80082b4:	f000 fe3c 	bl	8008f30 <__multadd>
 80082b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ba:	4681      	mov	r9, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 816c 	beq.w	800859a <_dtoa_r+0xb52>
 80082c2:	2300      	movs	r3, #0
 80082c4:	4629      	mov	r1, r5
 80082c6:	220a      	movs	r2, #10
 80082c8:	4658      	mov	r0, fp
 80082ca:	f000 fe31 	bl	8008f30 <__multadd>
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	4605      	mov	r5, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dc61      	bgt.n	800839a <_dtoa_r+0x952>
 80082d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082d8:	2b02      	cmp	r3, #2
 80082da:	dc3b      	bgt.n	8008354 <_dtoa_r+0x90c>
 80082dc:	e05d      	b.n	800839a <_dtoa_r+0x952>
 80082de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082e4:	e746      	b.n	8008174 <_dtoa_r+0x72c>
 80082e6:	9b07      	ldr	r3, [sp, #28]
 80082e8:	1e5c      	subs	r4, r3, #1
 80082ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	bfbf      	itttt	lt
 80082f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80082f4:	1ae3      	sublt	r3, r4, r3
 80082f6:	18d2      	addlt	r2, r2, r3
 80082f8:	bfa8      	it	ge
 80082fa:	1b1c      	subge	r4, r3, r4
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	bfbe      	ittt	lt
 8008300:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008302:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008304:	2400      	movlt	r4, #0
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb5      	itete	lt
 800830a:	eba8 0603 	sublt.w	r6, r8, r3
 800830e:	4646      	movge	r6, r8
 8008310:	2300      	movlt	r3, #0
 8008312:	9b07      	ldrge	r3, [sp, #28]
 8008314:	e730      	b.n	8008178 <_dtoa_r+0x730>
 8008316:	4646      	mov	r6, r8
 8008318:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800831a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800831c:	e735      	b.n	800818a <_dtoa_r+0x742>
 800831e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008320:	e75c      	b.n	80081dc <_dtoa_r+0x794>
 8008322:	2300      	movs	r3, #0
 8008324:	e788      	b.n	8008238 <_dtoa_r+0x7f0>
 8008326:	9b02      	ldr	r3, [sp, #8]
 8008328:	e786      	b.n	8008238 <_dtoa_r+0x7f0>
 800832a:	2300      	movs	r3, #0
 800832c:	930a      	str	r3, [sp, #40]	@ 0x28
 800832e:	e788      	b.n	8008242 <_dtoa_r+0x7fa>
 8008330:	d09f      	beq.n	8008272 <_dtoa_r+0x82a>
 8008332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008334:	331c      	adds	r3, #28
 8008336:	441a      	add	r2, r3
 8008338:	4498      	add	r8, r3
 800833a:	441e      	add	r6, r3
 800833c:	9209      	str	r2, [sp, #36]	@ 0x24
 800833e:	e798      	b.n	8008272 <_dtoa_r+0x82a>
 8008340:	4603      	mov	r3, r0
 8008342:	e7f6      	b.n	8008332 <_dtoa_r+0x8ea>
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	9704      	str	r7, [sp, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc20      	bgt.n	800838e <_dtoa_r+0x946>
 800834c:	9308      	str	r3, [sp, #32]
 800834e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008350:	2b02      	cmp	r3, #2
 8008352:	dd1e      	ble.n	8008392 <_dtoa_r+0x94a>
 8008354:	9b08      	ldr	r3, [sp, #32]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f47f aebc 	bne.w	80080d4 <_dtoa_r+0x68c>
 800835c:	4621      	mov	r1, r4
 800835e:	2205      	movs	r2, #5
 8008360:	4658      	mov	r0, fp
 8008362:	f000 fde5 	bl	8008f30 <__multadd>
 8008366:	4601      	mov	r1, r0
 8008368:	4604      	mov	r4, r0
 800836a:	4648      	mov	r0, r9
 800836c:	f001 f840 	bl	80093f0 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	f77f aeaf 	ble.w	80080d4 <_dtoa_r+0x68c>
 8008376:	2331      	movs	r3, #49	@ 0x31
 8008378:	4656      	mov	r6, sl
 800837a:	f806 3b01 	strb.w	r3, [r6], #1
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	3301      	adds	r3, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	e6aa      	b.n	80080dc <_dtoa_r+0x694>
 8008386:	9c07      	ldr	r4, [sp, #28]
 8008388:	9704      	str	r7, [sp, #16]
 800838a:	4625      	mov	r5, r4
 800838c:	e7f3      	b.n	8008376 <_dtoa_r+0x92e>
 800838e:	9b07      	ldr	r3, [sp, #28]
 8008390:	9308      	str	r3, [sp, #32]
 8008392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8104 	beq.w	80085a2 <_dtoa_r+0xb5a>
 800839a:	2e00      	cmp	r6, #0
 800839c:	dd05      	ble.n	80083aa <_dtoa_r+0x962>
 800839e:	4629      	mov	r1, r5
 80083a0:	4632      	mov	r2, r6
 80083a2:	4658      	mov	r0, fp
 80083a4:	f000 ffb8 	bl	8009318 <__lshift>
 80083a8:	4605      	mov	r5, r0
 80083aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d05a      	beq.n	8008466 <_dtoa_r+0xa1e>
 80083b0:	4658      	mov	r0, fp
 80083b2:	6869      	ldr	r1, [r5, #4]
 80083b4:	f000 fd5a 	bl	8008e6c <_Balloc>
 80083b8:	4606      	mov	r6, r0
 80083ba:	b928      	cbnz	r0, 80083c8 <_dtoa_r+0x980>
 80083bc:	4602      	mov	r2, r0
 80083be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083c2:	4b83      	ldr	r3, [pc, #524]	@ (80085d0 <_dtoa_r+0xb88>)
 80083c4:	f7ff bb54 	b.w	8007a70 <_dtoa_r+0x28>
 80083c8:	692a      	ldr	r2, [r5, #16]
 80083ca:	f105 010c 	add.w	r1, r5, #12
 80083ce:	3202      	adds	r2, #2
 80083d0:	0092      	lsls	r2, r2, #2
 80083d2:	300c      	adds	r0, #12
 80083d4:	f7ff fa77 	bl	80078c6 <memcpy>
 80083d8:	2201      	movs	r2, #1
 80083da:	4631      	mov	r1, r6
 80083dc:	4658      	mov	r0, fp
 80083de:	f000 ff9b 	bl	8009318 <__lshift>
 80083e2:	462f      	mov	r7, r5
 80083e4:	4605      	mov	r5, r0
 80083e6:	f10a 0301 	add.w	r3, sl, #1
 80083ea:	9307      	str	r3, [sp, #28]
 80083ec:	9b08      	ldr	r3, [sp, #32]
 80083ee:	4453      	add	r3, sl
 80083f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	4621      	mov	r1, r4
 80083fe:	3b01      	subs	r3, #1
 8008400:	4648      	mov	r0, r9
 8008402:	9302      	str	r3, [sp, #8]
 8008404:	f7ff fa96 	bl	8007934 <quorem>
 8008408:	4639      	mov	r1, r7
 800840a:	9008      	str	r0, [sp, #32]
 800840c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008410:	4648      	mov	r0, r9
 8008412:	f000 ffed 	bl	80093f0 <__mcmp>
 8008416:	462a      	mov	r2, r5
 8008418:	9009      	str	r0, [sp, #36]	@ 0x24
 800841a:	4621      	mov	r1, r4
 800841c:	4658      	mov	r0, fp
 800841e:	f001 f803 	bl	8009428 <__mdiff>
 8008422:	68c2      	ldr	r2, [r0, #12]
 8008424:	4606      	mov	r6, r0
 8008426:	bb02      	cbnz	r2, 800846a <_dtoa_r+0xa22>
 8008428:	4601      	mov	r1, r0
 800842a:	4648      	mov	r0, r9
 800842c:	f000 ffe0 	bl	80093f0 <__mcmp>
 8008430:	4602      	mov	r2, r0
 8008432:	4631      	mov	r1, r6
 8008434:	4658      	mov	r0, fp
 8008436:	920c      	str	r2, [sp, #48]	@ 0x30
 8008438:	f000 fd58 	bl	8008eec <_Bfree>
 800843c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800843e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008440:	9e07      	ldr	r6, [sp, #28]
 8008442:	ea43 0102 	orr.w	r1, r3, r2
 8008446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008448:	4319      	orrs	r1, r3
 800844a:	d110      	bne.n	800846e <_dtoa_r+0xa26>
 800844c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008450:	d029      	beq.n	80084a6 <_dtoa_r+0xa5e>
 8008452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	dd02      	ble.n	800845e <_dtoa_r+0xa16>
 8008458:	9b08      	ldr	r3, [sp, #32]
 800845a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800845e:	9b02      	ldr	r3, [sp, #8]
 8008460:	f883 8000 	strb.w	r8, [r3]
 8008464:	e63b      	b.n	80080de <_dtoa_r+0x696>
 8008466:	4628      	mov	r0, r5
 8008468:	e7bb      	b.n	80083e2 <_dtoa_r+0x99a>
 800846a:	2201      	movs	r2, #1
 800846c:	e7e1      	b.n	8008432 <_dtoa_r+0x9ea>
 800846e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	db04      	blt.n	800847e <_dtoa_r+0xa36>
 8008474:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008476:	430b      	orrs	r3, r1
 8008478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800847a:	430b      	orrs	r3, r1
 800847c:	d120      	bne.n	80084c0 <_dtoa_r+0xa78>
 800847e:	2a00      	cmp	r2, #0
 8008480:	dded      	ble.n	800845e <_dtoa_r+0xa16>
 8008482:	4649      	mov	r1, r9
 8008484:	2201      	movs	r2, #1
 8008486:	4658      	mov	r0, fp
 8008488:	f000 ff46 	bl	8009318 <__lshift>
 800848c:	4621      	mov	r1, r4
 800848e:	4681      	mov	r9, r0
 8008490:	f000 ffae 	bl	80093f0 <__mcmp>
 8008494:	2800      	cmp	r0, #0
 8008496:	dc03      	bgt.n	80084a0 <_dtoa_r+0xa58>
 8008498:	d1e1      	bne.n	800845e <_dtoa_r+0xa16>
 800849a:	f018 0f01 	tst.w	r8, #1
 800849e:	d0de      	beq.n	800845e <_dtoa_r+0xa16>
 80084a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084a4:	d1d8      	bne.n	8008458 <_dtoa_r+0xa10>
 80084a6:	2339      	movs	r3, #57	@ 0x39
 80084a8:	9a02      	ldr	r2, [sp, #8]
 80084aa:	7013      	strb	r3, [r2, #0]
 80084ac:	4633      	mov	r3, r6
 80084ae:	461e      	mov	r6, r3
 80084b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	2a39      	cmp	r2, #57	@ 0x39
 80084b8:	d052      	beq.n	8008560 <_dtoa_r+0xb18>
 80084ba:	3201      	adds	r2, #1
 80084bc:	701a      	strb	r2, [r3, #0]
 80084be:	e60e      	b.n	80080de <_dtoa_r+0x696>
 80084c0:	2a00      	cmp	r2, #0
 80084c2:	dd07      	ble.n	80084d4 <_dtoa_r+0xa8c>
 80084c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084c8:	d0ed      	beq.n	80084a6 <_dtoa_r+0xa5e>
 80084ca:	9a02      	ldr	r2, [sp, #8]
 80084cc:	f108 0301 	add.w	r3, r8, #1
 80084d0:	7013      	strb	r3, [r2, #0]
 80084d2:	e604      	b.n	80080de <_dtoa_r+0x696>
 80084d4:	9b07      	ldr	r3, [sp, #28]
 80084d6:	9a07      	ldr	r2, [sp, #28]
 80084d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084de:	4293      	cmp	r3, r2
 80084e0:	d028      	beq.n	8008534 <_dtoa_r+0xaec>
 80084e2:	4649      	mov	r1, r9
 80084e4:	2300      	movs	r3, #0
 80084e6:	220a      	movs	r2, #10
 80084e8:	4658      	mov	r0, fp
 80084ea:	f000 fd21 	bl	8008f30 <__multadd>
 80084ee:	42af      	cmp	r7, r5
 80084f0:	4681      	mov	r9, r0
 80084f2:	f04f 0300 	mov.w	r3, #0
 80084f6:	f04f 020a 	mov.w	r2, #10
 80084fa:	4639      	mov	r1, r7
 80084fc:	4658      	mov	r0, fp
 80084fe:	d107      	bne.n	8008510 <_dtoa_r+0xac8>
 8008500:	f000 fd16 	bl	8008f30 <__multadd>
 8008504:	4607      	mov	r7, r0
 8008506:	4605      	mov	r5, r0
 8008508:	9b07      	ldr	r3, [sp, #28]
 800850a:	3301      	adds	r3, #1
 800850c:	9307      	str	r3, [sp, #28]
 800850e:	e774      	b.n	80083fa <_dtoa_r+0x9b2>
 8008510:	f000 fd0e 	bl	8008f30 <__multadd>
 8008514:	4629      	mov	r1, r5
 8008516:	4607      	mov	r7, r0
 8008518:	2300      	movs	r3, #0
 800851a:	220a      	movs	r2, #10
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fd07 	bl	8008f30 <__multadd>
 8008522:	4605      	mov	r5, r0
 8008524:	e7f0      	b.n	8008508 <_dtoa_r+0xac0>
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	2700      	movs	r7, #0
 800852a:	2b00      	cmp	r3, #0
 800852c:	bfcc      	ite	gt
 800852e:	461e      	movgt	r6, r3
 8008530:	2601      	movle	r6, #1
 8008532:	4456      	add	r6, sl
 8008534:	4649      	mov	r1, r9
 8008536:	2201      	movs	r2, #1
 8008538:	4658      	mov	r0, fp
 800853a:	f000 feed 	bl	8009318 <__lshift>
 800853e:	4621      	mov	r1, r4
 8008540:	4681      	mov	r9, r0
 8008542:	f000 ff55 	bl	80093f0 <__mcmp>
 8008546:	2800      	cmp	r0, #0
 8008548:	dcb0      	bgt.n	80084ac <_dtoa_r+0xa64>
 800854a:	d102      	bne.n	8008552 <_dtoa_r+0xb0a>
 800854c:	f018 0f01 	tst.w	r8, #1
 8008550:	d1ac      	bne.n	80084ac <_dtoa_r+0xa64>
 8008552:	4633      	mov	r3, r6
 8008554:	461e      	mov	r6, r3
 8008556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800855a:	2a30      	cmp	r2, #48	@ 0x30
 800855c:	d0fa      	beq.n	8008554 <_dtoa_r+0xb0c>
 800855e:	e5be      	b.n	80080de <_dtoa_r+0x696>
 8008560:	459a      	cmp	sl, r3
 8008562:	d1a4      	bne.n	80084ae <_dtoa_r+0xa66>
 8008564:	9b04      	ldr	r3, [sp, #16]
 8008566:	3301      	adds	r3, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	2331      	movs	r3, #49	@ 0x31
 800856c:	f88a 3000 	strb.w	r3, [sl]
 8008570:	e5b5      	b.n	80080de <_dtoa_r+0x696>
 8008572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008574:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80085d4 <_dtoa_r+0xb8c>
 8008578:	b11b      	cbz	r3, 8008582 <_dtoa_r+0xb3a>
 800857a:	f10a 0308 	add.w	r3, sl, #8
 800857e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008580:	6013      	str	r3, [r2, #0]
 8008582:	4650      	mov	r0, sl
 8008584:	b017      	add	sp, #92	@ 0x5c
 8008586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800858c:	2b01      	cmp	r3, #1
 800858e:	f77f ae3d 	ble.w	800820c <_dtoa_r+0x7c4>
 8008592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008594:	930a      	str	r3, [sp, #40]	@ 0x28
 8008596:	2001      	movs	r0, #1
 8008598:	e65b      	b.n	8008252 <_dtoa_r+0x80a>
 800859a:	9b08      	ldr	r3, [sp, #32]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f77f aed6 	ble.w	800834e <_dtoa_r+0x906>
 80085a2:	4656      	mov	r6, sl
 80085a4:	4621      	mov	r1, r4
 80085a6:	4648      	mov	r0, r9
 80085a8:	f7ff f9c4 	bl	8007934 <quorem>
 80085ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	f806 8b01 	strb.w	r8, [r6], #1
 80085b6:	eba6 020a 	sub.w	r2, r6, sl
 80085ba:	4293      	cmp	r3, r2
 80085bc:	ddb3      	ble.n	8008526 <_dtoa_r+0xade>
 80085be:	4649      	mov	r1, r9
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	4658      	mov	r0, fp
 80085c6:	f000 fcb3 	bl	8008f30 <__multadd>
 80085ca:	4681      	mov	r9, r0
 80085cc:	e7ea      	b.n	80085a4 <_dtoa_r+0xb5c>
 80085ce:	bf00      	nop
 80085d0:	0800b143 	.word	0x0800b143
 80085d4:	0800b0de 	.word	0x0800b0de

080085d8 <_free_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4605      	mov	r5, r0
 80085dc:	2900      	cmp	r1, #0
 80085de:	d040      	beq.n	8008662 <_free_r+0x8a>
 80085e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e4:	1f0c      	subs	r4, r1, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfb8      	it	lt
 80085ea:	18e4      	addlt	r4, r4, r3
 80085ec:	f000 fc32 	bl	8008e54 <__malloc_lock>
 80085f0:	4a1c      	ldr	r2, [pc, #112]	@ (8008664 <_free_r+0x8c>)
 80085f2:	6813      	ldr	r3, [r2, #0]
 80085f4:	b933      	cbnz	r3, 8008604 <_free_r+0x2c>
 80085f6:	6063      	str	r3, [r4, #4]
 80085f8:	6014      	str	r4, [r2, #0]
 80085fa:	4628      	mov	r0, r5
 80085fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008600:	f000 bc2e 	b.w	8008e60 <__malloc_unlock>
 8008604:	42a3      	cmp	r3, r4
 8008606:	d908      	bls.n	800861a <_free_r+0x42>
 8008608:	6820      	ldr	r0, [r4, #0]
 800860a:	1821      	adds	r1, r4, r0
 800860c:	428b      	cmp	r3, r1
 800860e:	bf01      	itttt	eq
 8008610:	6819      	ldreq	r1, [r3, #0]
 8008612:	685b      	ldreq	r3, [r3, #4]
 8008614:	1809      	addeq	r1, r1, r0
 8008616:	6021      	streq	r1, [r4, #0]
 8008618:	e7ed      	b.n	80085f6 <_free_r+0x1e>
 800861a:	461a      	mov	r2, r3
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b10b      	cbz	r3, 8008624 <_free_r+0x4c>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d9fa      	bls.n	800861a <_free_r+0x42>
 8008624:	6811      	ldr	r1, [r2, #0]
 8008626:	1850      	adds	r0, r2, r1
 8008628:	42a0      	cmp	r0, r4
 800862a:	d10b      	bne.n	8008644 <_free_r+0x6c>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	4401      	add	r1, r0
 8008630:	1850      	adds	r0, r2, r1
 8008632:	4283      	cmp	r3, r0
 8008634:	6011      	str	r1, [r2, #0]
 8008636:	d1e0      	bne.n	80085fa <_free_r+0x22>
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4408      	add	r0, r1
 800863e:	6010      	str	r0, [r2, #0]
 8008640:	6053      	str	r3, [r2, #4]
 8008642:	e7da      	b.n	80085fa <_free_r+0x22>
 8008644:	d902      	bls.n	800864c <_free_r+0x74>
 8008646:	230c      	movs	r3, #12
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	e7d6      	b.n	80085fa <_free_r+0x22>
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	1821      	adds	r1, r4, r0
 8008650:	428b      	cmp	r3, r1
 8008652:	bf01      	itttt	eq
 8008654:	6819      	ldreq	r1, [r3, #0]
 8008656:	685b      	ldreq	r3, [r3, #4]
 8008658:	1809      	addeq	r1, r1, r0
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	6054      	str	r4, [r2, #4]
 8008660:	e7cb      	b.n	80085fa <_free_r+0x22>
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200006ec 	.word	0x200006ec

08008668 <rshift>:
 8008668:	6903      	ldr	r3, [r0, #16]
 800866a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800866e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008672:	f100 0414 	add.w	r4, r0, #20
 8008676:	ea4f 1261 	mov.w	r2, r1, asr #5
 800867a:	dd46      	ble.n	800870a <rshift+0xa2>
 800867c:	f011 011f 	ands.w	r1, r1, #31
 8008680:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008684:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008688:	d10c      	bne.n	80086a4 <rshift+0x3c>
 800868a:	4629      	mov	r1, r5
 800868c:	f100 0710 	add.w	r7, r0, #16
 8008690:	42b1      	cmp	r1, r6
 8008692:	d335      	bcc.n	8008700 <rshift+0x98>
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	1eea      	subs	r2, r5, #3
 800869a:	4296      	cmp	r6, r2
 800869c:	bf38      	it	cc
 800869e:	2300      	movcc	r3, #0
 80086a0:	4423      	add	r3, r4
 80086a2:	e015      	b.n	80086d0 <rshift+0x68>
 80086a4:	46a1      	mov	r9, r4
 80086a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086aa:	f1c1 0820 	rsb	r8, r1, #32
 80086ae:	40cf      	lsrs	r7, r1
 80086b0:	f105 0e04 	add.w	lr, r5, #4
 80086b4:	4576      	cmp	r6, lr
 80086b6:	46f4      	mov	ip, lr
 80086b8:	d816      	bhi.n	80086e8 <rshift+0x80>
 80086ba:	1a9a      	subs	r2, r3, r2
 80086bc:	0092      	lsls	r2, r2, #2
 80086be:	3a04      	subs	r2, #4
 80086c0:	3501      	adds	r5, #1
 80086c2:	42ae      	cmp	r6, r5
 80086c4:	bf38      	it	cc
 80086c6:	2200      	movcc	r2, #0
 80086c8:	18a3      	adds	r3, r4, r2
 80086ca:	50a7      	str	r7, [r4, r2]
 80086cc:	b107      	cbz	r7, 80086d0 <rshift+0x68>
 80086ce:	3304      	adds	r3, #4
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	eba3 0204 	sub.w	r2, r3, r4
 80086d6:	bf08      	it	eq
 80086d8:	2300      	moveq	r3, #0
 80086da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086de:	6102      	str	r2, [r0, #16]
 80086e0:	bf08      	it	eq
 80086e2:	6143      	streq	r3, [r0, #20]
 80086e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e8:	f8dc c000 	ldr.w	ip, [ip]
 80086ec:	fa0c fc08 	lsl.w	ip, ip, r8
 80086f0:	ea4c 0707 	orr.w	r7, ip, r7
 80086f4:	f849 7b04 	str.w	r7, [r9], #4
 80086f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086fc:	40cf      	lsrs	r7, r1
 80086fe:	e7d9      	b.n	80086b4 <rshift+0x4c>
 8008700:	f851 cb04 	ldr.w	ip, [r1], #4
 8008704:	f847 cf04 	str.w	ip, [r7, #4]!
 8008708:	e7c2      	b.n	8008690 <rshift+0x28>
 800870a:	4623      	mov	r3, r4
 800870c:	e7e0      	b.n	80086d0 <rshift+0x68>

0800870e <__hexdig_fun>:
 800870e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008712:	2b09      	cmp	r3, #9
 8008714:	d802      	bhi.n	800871c <__hexdig_fun+0xe>
 8008716:	3820      	subs	r0, #32
 8008718:	b2c0      	uxtb	r0, r0
 800871a:	4770      	bx	lr
 800871c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008720:	2b05      	cmp	r3, #5
 8008722:	d801      	bhi.n	8008728 <__hexdig_fun+0x1a>
 8008724:	3847      	subs	r0, #71	@ 0x47
 8008726:	e7f7      	b.n	8008718 <__hexdig_fun+0xa>
 8008728:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800872c:	2b05      	cmp	r3, #5
 800872e:	d801      	bhi.n	8008734 <__hexdig_fun+0x26>
 8008730:	3827      	subs	r0, #39	@ 0x27
 8008732:	e7f1      	b.n	8008718 <__hexdig_fun+0xa>
 8008734:	2000      	movs	r0, #0
 8008736:	4770      	bx	lr

08008738 <__gethex>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	468a      	mov	sl, r1
 800873e:	4690      	mov	r8, r2
 8008740:	b085      	sub	sp, #20
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	680b      	ldr	r3, [r1, #0]
 8008746:	9001      	str	r0, [sp, #4]
 8008748:	1c9c      	adds	r4, r3, #2
 800874a:	46a1      	mov	r9, r4
 800874c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008750:	2830      	cmp	r0, #48	@ 0x30
 8008752:	d0fa      	beq.n	800874a <__gethex+0x12>
 8008754:	eba9 0303 	sub.w	r3, r9, r3
 8008758:	f1a3 0b02 	sub.w	fp, r3, #2
 800875c:	f7ff ffd7 	bl	800870e <__hexdig_fun>
 8008760:	4605      	mov	r5, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d168      	bne.n	8008838 <__gethex+0x100>
 8008766:	2201      	movs	r2, #1
 8008768:	4648      	mov	r0, r9
 800876a:	499f      	ldr	r1, [pc, #636]	@ (80089e8 <__gethex+0x2b0>)
 800876c:	f7fe ffb7 	bl	80076de <strncmp>
 8008770:	4607      	mov	r7, r0
 8008772:	2800      	cmp	r0, #0
 8008774:	d167      	bne.n	8008846 <__gethex+0x10e>
 8008776:	f899 0001 	ldrb.w	r0, [r9, #1]
 800877a:	4626      	mov	r6, r4
 800877c:	f7ff ffc7 	bl	800870e <__hexdig_fun>
 8008780:	2800      	cmp	r0, #0
 8008782:	d062      	beq.n	800884a <__gethex+0x112>
 8008784:	4623      	mov	r3, r4
 8008786:	7818      	ldrb	r0, [r3, #0]
 8008788:	4699      	mov	r9, r3
 800878a:	2830      	cmp	r0, #48	@ 0x30
 800878c:	f103 0301 	add.w	r3, r3, #1
 8008790:	d0f9      	beq.n	8008786 <__gethex+0x4e>
 8008792:	f7ff ffbc 	bl	800870e <__hexdig_fun>
 8008796:	fab0 f580 	clz	r5, r0
 800879a:	f04f 0b01 	mov.w	fp, #1
 800879e:	096d      	lsrs	r5, r5, #5
 80087a0:	464a      	mov	r2, r9
 80087a2:	4616      	mov	r6, r2
 80087a4:	7830      	ldrb	r0, [r6, #0]
 80087a6:	3201      	adds	r2, #1
 80087a8:	f7ff ffb1 	bl	800870e <__hexdig_fun>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d1f8      	bne.n	80087a2 <__gethex+0x6a>
 80087b0:	2201      	movs	r2, #1
 80087b2:	4630      	mov	r0, r6
 80087b4:	498c      	ldr	r1, [pc, #560]	@ (80089e8 <__gethex+0x2b0>)
 80087b6:	f7fe ff92 	bl	80076de <strncmp>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d13f      	bne.n	800883e <__gethex+0x106>
 80087be:	b944      	cbnz	r4, 80087d2 <__gethex+0x9a>
 80087c0:	1c74      	adds	r4, r6, #1
 80087c2:	4622      	mov	r2, r4
 80087c4:	4616      	mov	r6, r2
 80087c6:	7830      	ldrb	r0, [r6, #0]
 80087c8:	3201      	adds	r2, #1
 80087ca:	f7ff ffa0 	bl	800870e <__hexdig_fun>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d1f8      	bne.n	80087c4 <__gethex+0x8c>
 80087d2:	1ba4      	subs	r4, r4, r6
 80087d4:	00a7      	lsls	r7, r4, #2
 80087d6:	7833      	ldrb	r3, [r6, #0]
 80087d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80087dc:	2b50      	cmp	r3, #80	@ 0x50
 80087de:	d13e      	bne.n	800885e <__gethex+0x126>
 80087e0:	7873      	ldrb	r3, [r6, #1]
 80087e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80087e4:	d033      	beq.n	800884e <__gethex+0x116>
 80087e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80087e8:	d034      	beq.n	8008854 <__gethex+0x11c>
 80087ea:	2400      	movs	r4, #0
 80087ec:	1c71      	adds	r1, r6, #1
 80087ee:	7808      	ldrb	r0, [r1, #0]
 80087f0:	f7ff ff8d 	bl	800870e <__hexdig_fun>
 80087f4:	1e43      	subs	r3, r0, #1
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b18      	cmp	r3, #24
 80087fa:	d830      	bhi.n	800885e <__gethex+0x126>
 80087fc:	f1a0 0210 	sub.w	r2, r0, #16
 8008800:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008804:	f7ff ff83 	bl	800870e <__hexdig_fun>
 8008808:	f100 3cff 	add.w	ip, r0, #4294967295
 800880c:	fa5f fc8c 	uxtb.w	ip, ip
 8008810:	f1bc 0f18 	cmp.w	ip, #24
 8008814:	f04f 030a 	mov.w	r3, #10
 8008818:	d91e      	bls.n	8008858 <__gethex+0x120>
 800881a:	b104      	cbz	r4, 800881e <__gethex+0xe6>
 800881c:	4252      	negs	r2, r2
 800881e:	4417      	add	r7, r2
 8008820:	f8ca 1000 	str.w	r1, [sl]
 8008824:	b1ed      	cbz	r5, 8008862 <__gethex+0x12a>
 8008826:	f1bb 0f00 	cmp.w	fp, #0
 800882a:	bf0c      	ite	eq
 800882c:	2506      	moveq	r5, #6
 800882e:	2500      	movne	r5, #0
 8008830:	4628      	mov	r0, r5
 8008832:	b005      	add	sp, #20
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	2500      	movs	r5, #0
 800883a:	462c      	mov	r4, r5
 800883c:	e7b0      	b.n	80087a0 <__gethex+0x68>
 800883e:	2c00      	cmp	r4, #0
 8008840:	d1c7      	bne.n	80087d2 <__gethex+0x9a>
 8008842:	4627      	mov	r7, r4
 8008844:	e7c7      	b.n	80087d6 <__gethex+0x9e>
 8008846:	464e      	mov	r6, r9
 8008848:	462f      	mov	r7, r5
 800884a:	2501      	movs	r5, #1
 800884c:	e7c3      	b.n	80087d6 <__gethex+0x9e>
 800884e:	2400      	movs	r4, #0
 8008850:	1cb1      	adds	r1, r6, #2
 8008852:	e7cc      	b.n	80087ee <__gethex+0xb6>
 8008854:	2401      	movs	r4, #1
 8008856:	e7fb      	b.n	8008850 <__gethex+0x118>
 8008858:	fb03 0002 	mla	r0, r3, r2, r0
 800885c:	e7ce      	b.n	80087fc <__gethex+0xc4>
 800885e:	4631      	mov	r1, r6
 8008860:	e7de      	b.n	8008820 <__gethex+0xe8>
 8008862:	4629      	mov	r1, r5
 8008864:	eba6 0309 	sub.w	r3, r6, r9
 8008868:	3b01      	subs	r3, #1
 800886a:	2b07      	cmp	r3, #7
 800886c:	dc0a      	bgt.n	8008884 <__gethex+0x14c>
 800886e:	9801      	ldr	r0, [sp, #4]
 8008870:	f000 fafc 	bl	8008e6c <_Balloc>
 8008874:	4604      	mov	r4, r0
 8008876:	b940      	cbnz	r0, 800888a <__gethex+0x152>
 8008878:	4602      	mov	r2, r0
 800887a:	21e4      	movs	r1, #228	@ 0xe4
 800887c:	4b5b      	ldr	r3, [pc, #364]	@ (80089ec <__gethex+0x2b4>)
 800887e:	485c      	ldr	r0, [pc, #368]	@ (80089f0 <__gethex+0x2b8>)
 8008880:	f7ff f83a 	bl	80078f8 <__assert_func>
 8008884:	3101      	adds	r1, #1
 8008886:	105b      	asrs	r3, r3, #1
 8008888:	e7ef      	b.n	800886a <__gethex+0x132>
 800888a:	2300      	movs	r3, #0
 800888c:	f100 0a14 	add.w	sl, r0, #20
 8008890:	4655      	mov	r5, sl
 8008892:	469b      	mov	fp, r3
 8008894:	45b1      	cmp	r9, r6
 8008896:	d337      	bcc.n	8008908 <__gethex+0x1d0>
 8008898:	f845 bb04 	str.w	fp, [r5], #4
 800889c:	eba5 050a 	sub.w	r5, r5, sl
 80088a0:	10ad      	asrs	r5, r5, #2
 80088a2:	6125      	str	r5, [r4, #16]
 80088a4:	4658      	mov	r0, fp
 80088a6:	f000 fbd3 	bl	8009050 <__hi0bits>
 80088aa:	016d      	lsls	r5, r5, #5
 80088ac:	f8d8 6000 	ldr.w	r6, [r8]
 80088b0:	1a2d      	subs	r5, r5, r0
 80088b2:	42b5      	cmp	r5, r6
 80088b4:	dd54      	ble.n	8008960 <__gethex+0x228>
 80088b6:	1bad      	subs	r5, r5, r6
 80088b8:	4629      	mov	r1, r5
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 ff5b 	bl	8009776 <__any_on>
 80088c0:	4681      	mov	r9, r0
 80088c2:	b178      	cbz	r0, 80088e4 <__gethex+0x1ac>
 80088c4:	f04f 0901 	mov.w	r9, #1
 80088c8:	1e6b      	subs	r3, r5, #1
 80088ca:	1159      	asrs	r1, r3, #5
 80088cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088d0:	f003 021f 	and.w	r2, r3, #31
 80088d4:	fa09 f202 	lsl.w	r2, r9, r2
 80088d8:	420a      	tst	r2, r1
 80088da:	d003      	beq.n	80088e4 <__gethex+0x1ac>
 80088dc:	454b      	cmp	r3, r9
 80088de:	dc36      	bgt.n	800894e <__gethex+0x216>
 80088e0:	f04f 0902 	mov.w	r9, #2
 80088e4:	4629      	mov	r1, r5
 80088e6:	4620      	mov	r0, r4
 80088e8:	f7ff febe 	bl	8008668 <rshift>
 80088ec:	442f      	add	r7, r5
 80088ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088f2:	42bb      	cmp	r3, r7
 80088f4:	da42      	bge.n	800897c <__gethex+0x244>
 80088f6:	4621      	mov	r1, r4
 80088f8:	9801      	ldr	r0, [sp, #4]
 80088fa:	f000 faf7 	bl	8008eec <_Bfree>
 80088fe:	2300      	movs	r3, #0
 8008900:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008902:	25a3      	movs	r5, #163	@ 0xa3
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	e793      	b.n	8008830 <__gethex+0xf8>
 8008908:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800890c:	2a2e      	cmp	r2, #46	@ 0x2e
 800890e:	d012      	beq.n	8008936 <__gethex+0x1fe>
 8008910:	2b20      	cmp	r3, #32
 8008912:	d104      	bne.n	800891e <__gethex+0x1e6>
 8008914:	f845 bb04 	str.w	fp, [r5], #4
 8008918:	f04f 0b00 	mov.w	fp, #0
 800891c:	465b      	mov	r3, fp
 800891e:	7830      	ldrb	r0, [r6, #0]
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	f7ff fef4 	bl	800870e <__hexdig_fun>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	f000 000f 	and.w	r0, r0, #15
 800892c:	4098      	lsls	r0, r3
 800892e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008932:	3304      	adds	r3, #4
 8008934:	e7ae      	b.n	8008894 <__gethex+0x15c>
 8008936:	45b1      	cmp	r9, r6
 8008938:	d8ea      	bhi.n	8008910 <__gethex+0x1d8>
 800893a:	2201      	movs	r2, #1
 800893c:	4630      	mov	r0, r6
 800893e:	492a      	ldr	r1, [pc, #168]	@ (80089e8 <__gethex+0x2b0>)
 8008940:	9303      	str	r3, [sp, #12]
 8008942:	f7fe fecc 	bl	80076de <strncmp>
 8008946:	9b03      	ldr	r3, [sp, #12]
 8008948:	2800      	cmp	r0, #0
 800894a:	d1e1      	bne.n	8008910 <__gethex+0x1d8>
 800894c:	e7a2      	b.n	8008894 <__gethex+0x15c>
 800894e:	4620      	mov	r0, r4
 8008950:	1ea9      	subs	r1, r5, #2
 8008952:	f000 ff10 	bl	8009776 <__any_on>
 8008956:	2800      	cmp	r0, #0
 8008958:	d0c2      	beq.n	80088e0 <__gethex+0x1a8>
 800895a:	f04f 0903 	mov.w	r9, #3
 800895e:	e7c1      	b.n	80088e4 <__gethex+0x1ac>
 8008960:	da09      	bge.n	8008976 <__gethex+0x23e>
 8008962:	1b75      	subs	r5, r6, r5
 8008964:	4621      	mov	r1, r4
 8008966:	462a      	mov	r2, r5
 8008968:	9801      	ldr	r0, [sp, #4]
 800896a:	f000 fcd5 	bl	8009318 <__lshift>
 800896e:	4604      	mov	r4, r0
 8008970:	1b7f      	subs	r7, r7, r5
 8008972:	f100 0a14 	add.w	sl, r0, #20
 8008976:	f04f 0900 	mov.w	r9, #0
 800897a:	e7b8      	b.n	80088ee <__gethex+0x1b6>
 800897c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008980:	42bd      	cmp	r5, r7
 8008982:	dd6f      	ble.n	8008a64 <__gethex+0x32c>
 8008984:	1bed      	subs	r5, r5, r7
 8008986:	42ae      	cmp	r6, r5
 8008988:	dc34      	bgt.n	80089f4 <__gethex+0x2bc>
 800898a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800898e:	2b02      	cmp	r3, #2
 8008990:	d022      	beq.n	80089d8 <__gethex+0x2a0>
 8008992:	2b03      	cmp	r3, #3
 8008994:	d024      	beq.n	80089e0 <__gethex+0x2a8>
 8008996:	2b01      	cmp	r3, #1
 8008998:	d115      	bne.n	80089c6 <__gethex+0x28e>
 800899a:	42ae      	cmp	r6, r5
 800899c:	d113      	bne.n	80089c6 <__gethex+0x28e>
 800899e:	2e01      	cmp	r6, #1
 80089a0:	d10b      	bne.n	80089ba <__gethex+0x282>
 80089a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089a6:	9a02      	ldr	r2, [sp, #8]
 80089a8:	2562      	movs	r5, #98	@ 0x62
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	2301      	movs	r3, #1
 80089ae:	6123      	str	r3, [r4, #16]
 80089b0:	f8ca 3000 	str.w	r3, [sl]
 80089b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089b6:	601c      	str	r4, [r3, #0]
 80089b8:	e73a      	b.n	8008830 <__gethex+0xf8>
 80089ba:	4620      	mov	r0, r4
 80089bc:	1e71      	subs	r1, r6, #1
 80089be:	f000 feda 	bl	8009776 <__any_on>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d1ed      	bne.n	80089a2 <__gethex+0x26a>
 80089c6:	4621      	mov	r1, r4
 80089c8:	9801      	ldr	r0, [sp, #4]
 80089ca:	f000 fa8f 	bl	8008eec <_Bfree>
 80089ce:	2300      	movs	r3, #0
 80089d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089d2:	2550      	movs	r5, #80	@ 0x50
 80089d4:	6013      	str	r3, [r2, #0]
 80089d6:	e72b      	b.n	8008830 <__gethex+0xf8>
 80089d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1f3      	bne.n	80089c6 <__gethex+0x28e>
 80089de:	e7e0      	b.n	80089a2 <__gethex+0x26a>
 80089e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1dd      	bne.n	80089a2 <__gethex+0x26a>
 80089e6:	e7ee      	b.n	80089c6 <__gethex+0x28e>
 80089e8:	0800af9a 	.word	0x0800af9a
 80089ec:	0800b143 	.word	0x0800b143
 80089f0:	0800b154 	.word	0x0800b154
 80089f4:	1e6f      	subs	r7, r5, #1
 80089f6:	f1b9 0f00 	cmp.w	r9, #0
 80089fa:	d130      	bne.n	8008a5e <__gethex+0x326>
 80089fc:	b127      	cbz	r7, 8008a08 <__gethex+0x2d0>
 80089fe:	4639      	mov	r1, r7
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 feb8 	bl	8009776 <__any_on>
 8008a06:	4681      	mov	r9, r0
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	1b76      	subs	r6, r6, r5
 8008a0e:	2502      	movs	r5, #2
 8008a10:	117a      	asrs	r2, r7, #5
 8008a12:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a16:	f007 071f 	and.w	r7, r7, #31
 8008a1a:	40bb      	lsls	r3, r7
 8008a1c:	4213      	tst	r3, r2
 8008a1e:	4620      	mov	r0, r4
 8008a20:	bf18      	it	ne
 8008a22:	f049 0902 	orrne.w	r9, r9, #2
 8008a26:	f7ff fe1f 	bl	8008668 <rshift>
 8008a2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008a2e:	f1b9 0f00 	cmp.w	r9, #0
 8008a32:	d047      	beq.n	8008ac4 <__gethex+0x38c>
 8008a34:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d015      	beq.n	8008a68 <__gethex+0x330>
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d017      	beq.n	8008a70 <__gethex+0x338>
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d109      	bne.n	8008a58 <__gethex+0x320>
 8008a44:	f019 0f02 	tst.w	r9, #2
 8008a48:	d006      	beq.n	8008a58 <__gethex+0x320>
 8008a4a:	f8da 3000 	ldr.w	r3, [sl]
 8008a4e:	ea49 0903 	orr.w	r9, r9, r3
 8008a52:	f019 0f01 	tst.w	r9, #1
 8008a56:	d10e      	bne.n	8008a76 <__gethex+0x33e>
 8008a58:	f045 0510 	orr.w	r5, r5, #16
 8008a5c:	e032      	b.n	8008ac4 <__gethex+0x38c>
 8008a5e:	f04f 0901 	mov.w	r9, #1
 8008a62:	e7d1      	b.n	8008a08 <__gethex+0x2d0>
 8008a64:	2501      	movs	r5, #1
 8008a66:	e7e2      	b.n	8008a2e <__gethex+0x2f6>
 8008a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6a:	f1c3 0301 	rsb	r3, r3, #1
 8008a6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0f0      	beq.n	8008a58 <__gethex+0x320>
 8008a76:	f04f 0c00 	mov.w	ip, #0
 8008a7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a7e:	f104 0314 	add.w	r3, r4, #20
 8008a82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a90:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a94:	d01b      	beq.n	8008ace <__gethex+0x396>
 8008a96:	3201      	adds	r2, #1
 8008a98:	6002      	str	r2, [r0, #0]
 8008a9a:	2d02      	cmp	r5, #2
 8008a9c:	f104 0314 	add.w	r3, r4, #20
 8008aa0:	d13c      	bne.n	8008b1c <__gethex+0x3e4>
 8008aa2:	f8d8 2000 	ldr.w	r2, [r8]
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	42b2      	cmp	r2, r6
 8008aaa:	d109      	bne.n	8008ac0 <__gethex+0x388>
 8008aac:	2201      	movs	r2, #1
 8008aae:	1171      	asrs	r1, r6, #5
 8008ab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ab4:	f006 061f 	and.w	r6, r6, #31
 8008ab8:	fa02 f606 	lsl.w	r6, r2, r6
 8008abc:	421e      	tst	r6, r3
 8008abe:	d13a      	bne.n	8008b36 <__gethex+0x3fe>
 8008ac0:	f045 0520 	orr.w	r5, r5, #32
 8008ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac6:	601c      	str	r4, [r3, #0]
 8008ac8:	9b02      	ldr	r3, [sp, #8]
 8008aca:	601f      	str	r7, [r3, #0]
 8008acc:	e6b0      	b.n	8008830 <__gethex+0xf8>
 8008ace:	4299      	cmp	r1, r3
 8008ad0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ad4:	d8d9      	bhi.n	8008a8a <__gethex+0x352>
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	459b      	cmp	fp, r3
 8008ada:	db17      	blt.n	8008b0c <__gethex+0x3d4>
 8008adc:	6861      	ldr	r1, [r4, #4]
 8008ade:	9801      	ldr	r0, [sp, #4]
 8008ae0:	3101      	adds	r1, #1
 8008ae2:	f000 f9c3 	bl	8008e6c <_Balloc>
 8008ae6:	4681      	mov	r9, r0
 8008ae8:	b918      	cbnz	r0, 8008af2 <__gethex+0x3ba>
 8008aea:	4602      	mov	r2, r0
 8008aec:	2184      	movs	r1, #132	@ 0x84
 8008aee:	4b19      	ldr	r3, [pc, #100]	@ (8008b54 <__gethex+0x41c>)
 8008af0:	e6c5      	b.n	800887e <__gethex+0x146>
 8008af2:	6922      	ldr	r2, [r4, #16]
 8008af4:	f104 010c 	add.w	r1, r4, #12
 8008af8:	3202      	adds	r2, #2
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	300c      	adds	r0, #12
 8008afe:	f7fe fee2 	bl	80078c6 <memcpy>
 8008b02:	4621      	mov	r1, r4
 8008b04:	9801      	ldr	r0, [sp, #4]
 8008b06:	f000 f9f1 	bl	8008eec <_Bfree>
 8008b0a:	464c      	mov	r4, r9
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	6122      	str	r2, [r4, #16]
 8008b12:	2201      	movs	r2, #1
 8008b14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b18:	615a      	str	r2, [r3, #20]
 8008b1a:	e7be      	b.n	8008a9a <__gethex+0x362>
 8008b1c:	6922      	ldr	r2, [r4, #16]
 8008b1e:	455a      	cmp	r2, fp
 8008b20:	dd0b      	ble.n	8008b3a <__gethex+0x402>
 8008b22:	2101      	movs	r1, #1
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7ff fd9f 	bl	8008668 <rshift>
 8008b2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b2e:	3701      	adds	r7, #1
 8008b30:	42bb      	cmp	r3, r7
 8008b32:	f6ff aee0 	blt.w	80088f6 <__gethex+0x1be>
 8008b36:	2501      	movs	r5, #1
 8008b38:	e7c2      	b.n	8008ac0 <__gethex+0x388>
 8008b3a:	f016 061f 	ands.w	r6, r6, #31
 8008b3e:	d0fa      	beq.n	8008b36 <__gethex+0x3fe>
 8008b40:	4453      	add	r3, sl
 8008b42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b46:	f000 fa83 	bl	8009050 <__hi0bits>
 8008b4a:	f1c6 0620 	rsb	r6, r6, #32
 8008b4e:	42b0      	cmp	r0, r6
 8008b50:	dbe7      	blt.n	8008b22 <__gethex+0x3ea>
 8008b52:	e7f0      	b.n	8008b36 <__gethex+0x3fe>
 8008b54:	0800b143 	.word	0x0800b143

08008b58 <L_shift>:
 8008b58:	f1c2 0208 	rsb	r2, r2, #8
 8008b5c:	0092      	lsls	r2, r2, #2
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	f1c2 0620 	rsb	r6, r2, #32
 8008b64:	6843      	ldr	r3, [r0, #4]
 8008b66:	6804      	ldr	r4, [r0, #0]
 8008b68:	fa03 f506 	lsl.w	r5, r3, r6
 8008b6c:	432c      	orrs	r4, r5
 8008b6e:	40d3      	lsrs	r3, r2
 8008b70:	6004      	str	r4, [r0, #0]
 8008b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b76:	4288      	cmp	r0, r1
 8008b78:	d3f4      	bcc.n	8008b64 <L_shift+0xc>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}

08008b7c <__match>:
 8008b7c:	b530      	push	{r4, r5, lr}
 8008b7e:	6803      	ldr	r3, [r0, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	b914      	cbnz	r4, 8008b8e <__match+0x12>
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	bd30      	pop	{r4, r5, pc}
 8008b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b92:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b96:	2d19      	cmp	r5, #25
 8008b98:	bf98      	it	ls
 8008b9a:	3220      	addls	r2, #32
 8008b9c:	42a2      	cmp	r2, r4
 8008b9e:	d0f0      	beq.n	8008b82 <__match+0x6>
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e7f3      	b.n	8008b8c <__match+0x10>

08008ba4 <__hexnan>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	2500      	movs	r5, #0
 8008baa:	680b      	ldr	r3, [r1, #0]
 8008bac:	4682      	mov	sl, r0
 8008bae:	115e      	asrs	r6, r3, #5
 8008bb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bb4:	f013 031f 	ands.w	r3, r3, #31
 8008bb8:	bf18      	it	ne
 8008bba:	3604      	addne	r6, #4
 8008bbc:	1f37      	subs	r7, r6, #4
 8008bbe:	4690      	mov	r8, r2
 8008bc0:	46b9      	mov	r9, r7
 8008bc2:	463c      	mov	r4, r7
 8008bc4:	46ab      	mov	fp, r5
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	6801      	ldr	r1, [r0, #0]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bd0:	9502      	str	r5, [sp, #8]
 8008bd2:	784a      	ldrb	r2, [r1, #1]
 8008bd4:	1c4b      	adds	r3, r1, #1
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	b342      	cbz	r2, 8008c2c <__hexnan+0x88>
 8008bda:	4610      	mov	r0, r2
 8008bdc:	9105      	str	r1, [sp, #20]
 8008bde:	9204      	str	r2, [sp, #16]
 8008be0:	f7ff fd95 	bl	800870e <__hexdig_fun>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d151      	bne.n	8008c8c <__hexnan+0xe8>
 8008be8:	9a04      	ldr	r2, [sp, #16]
 8008bea:	9905      	ldr	r1, [sp, #20]
 8008bec:	2a20      	cmp	r2, #32
 8008bee:	d818      	bhi.n	8008c22 <__hexnan+0x7e>
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	459b      	cmp	fp, r3
 8008bf4:	dd13      	ble.n	8008c1e <__hexnan+0x7a>
 8008bf6:	454c      	cmp	r4, r9
 8008bf8:	d206      	bcs.n	8008c08 <__hexnan+0x64>
 8008bfa:	2d07      	cmp	r5, #7
 8008bfc:	dc04      	bgt.n	8008c08 <__hexnan+0x64>
 8008bfe:	462a      	mov	r2, r5
 8008c00:	4649      	mov	r1, r9
 8008c02:	4620      	mov	r0, r4
 8008c04:	f7ff ffa8 	bl	8008b58 <L_shift>
 8008c08:	4544      	cmp	r4, r8
 8008c0a:	d952      	bls.n	8008cb2 <__hexnan+0x10e>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f1a4 0904 	sub.w	r9, r4, #4
 8008c12:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c16:	461d      	mov	r5, r3
 8008c18:	464c      	mov	r4, r9
 8008c1a:	f8cd b008 	str.w	fp, [sp, #8]
 8008c1e:	9903      	ldr	r1, [sp, #12]
 8008c20:	e7d7      	b.n	8008bd2 <__hexnan+0x2e>
 8008c22:	2a29      	cmp	r2, #41	@ 0x29
 8008c24:	d157      	bne.n	8008cd6 <__hexnan+0x132>
 8008c26:	3102      	adds	r1, #2
 8008c28:	f8ca 1000 	str.w	r1, [sl]
 8008c2c:	f1bb 0f00 	cmp.w	fp, #0
 8008c30:	d051      	beq.n	8008cd6 <__hexnan+0x132>
 8008c32:	454c      	cmp	r4, r9
 8008c34:	d206      	bcs.n	8008c44 <__hexnan+0xa0>
 8008c36:	2d07      	cmp	r5, #7
 8008c38:	dc04      	bgt.n	8008c44 <__hexnan+0xa0>
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff ff8a 	bl	8008b58 <L_shift>
 8008c44:	4544      	cmp	r4, r8
 8008c46:	d936      	bls.n	8008cb6 <__hexnan+0x112>
 8008c48:	4623      	mov	r3, r4
 8008c4a:	f1a8 0204 	sub.w	r2, r8, #4
 8008c4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c52:	429f      	cmp	r7, r3
 8008c54:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c58:	d2f9      	bcs.n	8008c4e <__hexnan+0xaa>
 8008c5a:	1b3b      	subs	r3, r7, r4
 8008c5c:	f023 0303 	bic.w	r3, r3, #3
 8008c60:	3304      	adds	r3, #4
 8008c62:	3401      	adds	r4, #1
 8008c64:	3e03      	subs	r6, #3
 8008c66:	42b4      	cmp	r4, r6
 8008c68:	bf88      	it	hi
 8008c6a:	2304      	movhi	r3, #4
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	4443      	add	r3, r8
 8008c70:	f843 2b04 	str.w	r2, [r3], #4
 8008c74:	429f      	cmp	r7, r3
 8008c76:	d2fb      	bcs.n	8008c70 <__hexnan+0xcc>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	b91b      	cbnz	r3, 8008c84 <__hexnan+0xe0>
 8008c7c:	4547      	cmp	r7, r8
 8008c7e:	d128      	bne.n	8008cd2 <__hexnan+0x12e>
 8008c80:	2301      	movs	r3, #1
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	2005      	movs	r0, #5
 8008c86:	b007      	add	sp, #28
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	3501      	adds	r5, #1
 8008c8e:	2d08      	cmp	r5, #8
 8008c90:	f10b 0b01 	add.w	fp, fp, #1
 8008c94:	dd06      	ble.n	8008ca4 <__hexnan+0x100>
 8008c96:	4544      	cmp	r4, r8
 8008c98:	d9c1      	bls.n	8008c1e <__hexnan+0x7a>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2501      	movs	r5, #1
 8008c9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ca2:	3c04      	subs	r4, #4
 8008ca4:	6822      	ldr	r2, [r4, #0]
 8008ca6:	f000 000f 	and.w	r0, r0, #15
 8008caa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008cae:	6020      	str	r0, [r4, #0]
 8008cb0:	e7b5      	b.n	8008c1e <__hexnan+0x7a>
 8008cb2:	2508      	movs	r5, #8
 8008cb4:	e7b3      	b.n	8008c1e <__hexnan+0x7a>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0dd      	beq.n	8008c78 <__hexnan+0xd4>
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc0:	f1c3 0320 	rsb	r3, r3, #32
 8008cc4:	40da      	lsrs	r2, r3
 8008cc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cd0:	e7d2      	b.n	8008c78 <__hexnan+0xd4>
 8008cd2:	3f04      	subs	r7, #4
 8008cd4:	e7d0      	b.n	8008c78 <__hexnan+0xd4>
 8008cd6:	2004      	movs	r0, #4
 8008cd8:	e7d5      	b.n	8008c86 <__hexnan+0xe2>
	...

08008cdc <malloc>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	@ (8008ce8 <malloc+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f000 b825 	b.w	8008d30 <_malloc_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000184 	.word	0x20000184

08008cec <sbrk_aligned>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4e0f      	ldr	r6, [pc, #60]	@ (8008d2c <sbrk_aligned+0x40>)
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	6831      	ldr	r1, [r6, #0]
 8008cf4:	4605      	mov	r5, r0
 8008cf6:	b911      	cbnz	r1, 8008cfe <sbrk_aligned+0x12>
 8008cf8:	f001 f812 	bl	8009d20 <_sbrk_r>
 8008cfc:	6030      	str	r0, [r6, #0]
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4628      	mov	r0, r5
 8008d02:	f001 f80d 	bl	8009d20 <_sbrk_r>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d103      	bne.n	8008d12 <sbrk_aligned+0x26>
 8008d0a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d0e:	4620      	mov	r0, r4
 8008d10:	bd70      	pop	{r4, r5, r6, pc}
 8008d12:	1cc4      	adds	r4, r0, #3
 8008d14:	f024 0403 	bic.w	r4, r4, #3
 8008d18:	42a0      	cmp	r0, r4
 8008d1a:	d0f8      	beq.n	8008d0e <sbrk_aligned+0x22>
 8008d1c:	1a21      	subs	r1, r4, r0
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 fffe 	bl	8009d20 <_sbrk_r>
 8008d24:	3001      	adds	r0, #1
 8008d26:	d1f2      	bne.n	8008d0e <sbrk_aligned+0x22>
 8008d28:	e7ef      	b.n	8008d0a <sbrk_aligned+0x1e>
 8008d2a:	bf00      	nop
 8008d2c:	200006e8 	.word	0x200006e8

08008d30 <_malloc_r>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	1ccd      	adds	r5, r1, #3
 8008d36:	f025 0503 	bic.w	r5, r5, #3
 8008d3a:	3508      	adds	r5, #8
 8008d3c:	2d0c      	cmp	r5, #12
 8008d3e:	bf38      	it	cc
 8008d40:	250c      	movcc	r5, #12
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	4606      	mov	r6, r0
 8008d46:	db01      	blt.n	8008d4c <_malloc_r+0x1c>
 8008d48:	42a9      	cmp	r1, r5
 8008d4a:	d904      	bls.n	8008d56 <_malloc_r+0x26>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	6033      	str	r3, [r6, #0]
 8008d50:	2000      	movs	r0, #0
 8008d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008e2c <_malloc_r+0xfc>
 8008d5a:	f000 f87b 	bl	8008e54 <__malloc_lock>
 8008d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d62:	461c      	mov	r4, r3
 8008d64:	bb44      	cbnz	r4, 8008db8 <_malloc_r+0x88>
 8008d66:	4629      	mov	r1, r5
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ffbf 	bl	8008cec <sbrk_aligned>
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	4604      	mov	r4, r0
 8008d72:	d158      	bne.n	8008e26 <_malloc_r+0xf6>
 8008d74:	f8d8 4000 	ldr.w	r4, [r8]
 8008d78:	4627      	mov	r7, r4
 8008d7a:	2f00      	cmp	r7, #0
 8008d7c:	d143      	bne.n	8008e06 <_malloc_r+0xd6>
 8008d7e:	2c00      	cmp	r4, #0
 8008d80:	d04b      	beq.n	8008e1a <_malloc_r+0xea>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	4639      	mov	r1, r7
 8008d86:	4630      	mov	r0, r6
 8008d88:	eb04 0903 	add.w	r9, r4, r3
 8008d8c:	f000 ffc8 	bl	8009d20 <_sbrk_r>
 8008d90:	4581      	cmp	r9, r0
 8008d92:	d142      	bne.n	8008e1a <_malloc_r+0xea>
 8008d94:	6821      	ldr	r1, [r4, #0]
 8008d96:	4630      	mov	r0, r6
 8008d98:	1a6d      	subs	r5, r5, r1
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	f7ff ffa6 	bl	8008cec <sbrk_aligned>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d03a      	beq.n	8008e1a <_malloc_r+0xea>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	442b      	add	r3, r5
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	f8d8 3000 	ldr.w	r3, [r8]
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	bb62      	cbnz	r2, 8008e0c <_malloc_r+0xdc>
 8008db2:	f8c8 7000 	str.w	r7, [r8]
 8008db6:	e00f      	b.n	8008dd8 <_malloc_r+0xa8>
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	1b52      	subs	r2, r2, r5
 8008dbc:	d420      	bmi.n	8008e00 <_malloc_r+0xd0>
 8008dbe:	2a0b      	cmp	r2, #11
 8008dc0:	d917      	bls.n	8008df2 <_malloc_r+0xc2>
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	42a3      	cmp	r3, r4
 8008dc6:	6025      	str	r5, [r4, #0]
 8008dc8:	bf18      	it	ne
 8008dca:	6059      	strne	r1, [r3, #4]
 8008dcc:	6863      	ldr	r3, [r4, #4]
 8008dce:	bf08      	it	eq
 8008dd0:	f8c8 1000 	streq.w	r1, [r8]
 8008dd4:	5162      	str	r2, [r4, r5]
 8008dd6:	604b      	str	r3, [r1, #4]
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f841 	bl	8008e60 <__malloc_unlock>
 8008dde:	f104 000b 	add.w	r0, r4, #11
 8008de2:	1d23      	adds	r3, r4, #4
 8008de4:	f020 0007 	bic.w	r0, r0, #7
 8008de8:	1ac2      	subs	r2, r0, r3
 8008dea:	bf1c      	itt	ne
 8008dec:	1a1b      	subne	r3, r3, r0
 8008dee:	50a3      	strne	r3, [r4, r2]
 8008df0:	e7af      	b.n	8008d52 <_malloc_r+0x22>
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	bf0c      	ite	eq
 8008df8:	f8c8 2000 	streq.w	r2, [r8]
 8008dfc:	605a      	strne	r2, [r3, #4]
 8008dfe:	e7eb      	b.n	8008dd8 <_malloc_r+0xa8>
 8008e00:	4623      	mov	r3, r4
 8008e02:	6864      	ldr	r4, [r4, #4]
 8008e04:	e7ae      	b.n	8008d64 <_malloc_r+0x34>
 8008e06:	463c      	mov	r4, r7
 8008e08:	687f      	ldr	r7, [r7, #4]
 8008e0a:	e7b6      	b.n	8008d7a <_malloc_r+0x4a>
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d1fb      	bne.n	8008e0c <_malloc_r+0xdc>
 8008e14:	2300      	movs	r3, #0
 8008e16:	6053      	str	r3, [r2, #4]
 8008e18:	e7de      	b.n	8008dd8 <_malloc_r+0xa8>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	f000 f81e 	bl	8008e60 <__malloc_unlock>
 8008e24:	e794      	b.n	8008d50 <_malloc_r+0x20>
 8008e26:	6005      	str	r5, [r0, #0]
 8008e28:	e7d6      	b.n	8008dd8 <_malloc_r+0xa8>
 8008e2a:	bf00      	nop
 8008e2c:	200006ec 	.word	0x200006ec

08008e30 <__ascii_mbtowc>:
 8008e30:	b082      	sub	sp, #8
 8008e32:	b901      	cbnz	r1, 8008e36 <__ascii_mbtowc+0x6>
 8008e34:	a901      	add	r1, sp, #4
 8008e36:	b142      	cbz	r2, 8008e4a <__ascii_mbtowc+0x1a>
 8008e38:	b14b      	cbz	r3, 8008e4e <__ascii_mbtowc+0x1e>
 8008e3a:	7813      	ldrb	r3, [r2, #0]
 8008e3c:	600b      	str	r3, [r1, #0]
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	1e10      	subs	r0, r2, #0
 8008e42:	bf18      	it	ne
 8008e44:	2001      	movne	r0, #1
 8008e46:	b002      	add	sp, #8
 8008e48:	4770      	bx	lr
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	e7fb      	b.n	8008e46 <__ascii_mbtowc+0x16>
 8008e4e:	f06f 0001 	mvn.w	r0, #1
 8008e52:	e7f8      	b.n	8008e46 <__ascii_mbtowc+0x16>

08008e54 <__malloc_lock>:
 8008e54:	4801      	ldr	r0, [pc, #4]	@ (8008e5c <__malloc_lock+0x8>)
 8008e56:	f7fe bd26 	b.w	80078a6 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	200006e4 	.word	0x200006e4

08008e60 <__malloc_unlock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	@ (8008e68 <__malloc_unlock+0x8>)
 8008e62:	f7fe bd21 	b.w	80078a8 <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	200006e4 	.word	0x200006e4

08008e6c <_Balloc>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	69c6      	ldr	r6, [r0, #28]
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	b976      	cbnz	r6, 8008e94 <_Balloc+0x28>
 8008e76:	2010      	movs	r0, #16
 8008e78:	f7ff ff30 	bl	8008cdc <malloc>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	61e0      	str	r0, [r4, #28]
 8008e80:	b920      	cbnz	r0, 8008e8c <_Balloc+0x20>
 8008e82:	216b      	movs	r1, #107	@ 0x6b
 8008e84:	4b17      	ldr	r3, [pc, #92]	@ (8008ee4 <_Balloc+0x78>)
 8008e86:	4818      	ldr	r0, [pc, #96]	@ (8008ee8 <_Balloc+0x7c>)
 8008e88:	f7fe fd36 	bl	80078f8 <__assert_func>
 8008e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e90:	6006      	str	r6, [r0, #0]
 8008e92:	60c6      	str	r6, [r0, #12]
 8008e94:	69e6      	ldr	r6, [r4, #28]
 8008e96:	68f3      	ldr	r3, [r6, #12]
 8008e98:	b183      	cbz	r3, 8008ebc <_Balloc+0x50>
 8008e9a:	69e3      	ldr	r3, [r4, #28]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ea2:	b9b8      	cbnz	r0, 8008ed4 <_Balloc+0x68>
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	fa01 f605 	lsl.w	r6, r1, r5
 8008eaa:	1d72      	adds	r2, r6, #5
 8008eac:	4620      	mov	r0, r4
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	f000 ff4d 	bl	8009d4e <_calloc_r>
 8008eb4:	b160      	cbz	r0, 8008ed0 <_Balloc+0x64>
 8008eb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eba:	e00e      	b.n	8008eda <_Balloc+0x6e>
 8008ebc:	2221      	movs	r2, #33	@ 0x21
 8008ebe:	2104      	movs	r1, #4
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 ff44 	bl	8009d4e <_calloc_r>
 8008ec6:	69e3      	ldr	r3, [r4, #28]
 8008ec8:	60f0      	str	r0, [r6, #12]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e4      	bne.n	8008e9a <_Balloc+0x2e>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	bd70      	pop	{r4, r5, r6, pc}
 8008ed4:	6802      	ldr	r2, [r0, #0]
 8008ed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eda:	2300      	movs	r3, #0
 8008edc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ee0:	e7f7      	b.n	8008ed2 <_Balloc+0x66>
 8008ee2:	bf00      	nop
 8008ee4:	0800b029 	.word	0x0800b029
 8008ee8:	0800b1b4 	.word	0x0800b1b4

08008eec <_Bfree>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	69c6      	ldr	r6, [r0, #28]
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	b976      	cbnz	r6, 8008f14 <_Bfree+0x28>
 8008ef6:	2010      	movs	r0, #16
 8008ef8:	f7ff fef0 	bl	8008cdc <malloc>
 8008efc:	4602      	mov	r2, r0
 8008efe:	61e8      	str	r0, [r5, #28]
 8008f00:	b920      	cbnz	r0, 8008f0c <_Bfree+0x20>
 8008f02:	218f      	movs	r1, #143	@ 0x8f
 8008f04:	4b08      	ldr	r3, [pc, #32]	@ (8008f28 <_Bfree+0x3c>)
 8008f06:	4809      	ldr	r0, [pc, #36]	@ (8008f2c <_Bfree+0x40>)
 8008f08:	f7fe fcf6 	bl	80078f8 <__assert_func>
 8008f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f10:	6006      	str	r6, [r0, #0]
 8008f12:	60c6      	str	r6, [r0, #12]
 8008f14:	b13c      	cbz	r4, 8008f26 <_Bfree+0x3a>
 8008f16:	69eb      	ldr	r3, [r5, #28]
 8008f18:	6862      	ldr	r2, [r4, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f20:	6021      	str	r1, [r4, #0]
 8008f22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	0800b029 	.word	0x0800b029
 8008f2c:	0800b1b4 	.word	0x0800b1b4

08008f30 <__multadd>:
 8008f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f34:	4607      	mov	r7, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	461e      	mov	r6, r3
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	690d      	ldr	r5, [r1, #16]
 8008f3e:	f101 0c14 	add.w	ip, r1, #20
 8008f42:	f8dc 3000 	ldr.w	r3, [ip]
 8008f46:	3001      	adds	r0, #1
 8008f48:	b299      	uxth	r1, r3
 8008f4a:	fb02 6101 	mla	r1, r2, r1, r6
 8008f4e:	0c1e      	lsrs	r6, r3, #16
 8008f50:	0c0b      	lsrs	r3, r1, #16
 8008f52:	fb02 3306 	mla	r3, r2, r6, r3
 8008f56:	b289      	uxth	r1, r1
 8008f58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f5c:	4285      	cmp	r5, r0
 8008f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f62:	f84c 1b04 	str.w	r1, [ip], #4
 8008f66:	dcec      	bgt.n	8008f42 <__multadd+0x12>
 8008f68:	b30e      	cbz	r6, 8008fae <__multadd+0x7e>
 8008f6a:	68a3      	ldr	r3, [r4, #8]
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	dc19      	bgt.n	8008fa4 <__multadd+0x74>
 8008f70:	6861      	ldr	r1, [r4, #4]
 8008f72:	4638      	mov	r0, r7
 8008f74:	3101      	adds	r1, #1
 8008f76:	f7ff ff79 	bl	8008e6c <_Balloc>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <__multadd+0x5a>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	21ba      	movs	r1, #186	@ 0xba
 8008f82:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <__multadd+0x84>)
 8008f84:	480c      	ldr	r0, [pc, #48]	@ (8008fb8 <__multadd+0x88>)
 8008f86:	f7fe fcb7 	bl	80078f8 <__assert_func>
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	f104 010c 	add.w	r1, r4, #12
 8008f90:	3202      	adds	r2, #2
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	300c      	adds	r0, #12
 8008f96:	f7fe fc96 	bl	80078c6 <memcpy>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff ffa5 	bl	8008eec <_Bfree>
 8008fa2:	4644      	mov	r4, r8
 8008fa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fa8:	3501      	adds	r5, #1
 8008faa:	615e      	str	r6, [r3, #20]
 8008fac:	6125      	str	r5, [r4, #16]
 8008fae:	4620      	mov	r0, r4
 8008fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb4:	0800b143 	.word	0x0800b143
 8008fb8:	0800b1b4 	.word	0x0800b1b4

08008fbc <__s2b>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4615      	mov	r5, r2
 8008fc2:	2209      	movs	r2, #9
 8008fc4:	461f      	mov	r7, r3
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	460c      	mov	r4, r1
 8008fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fce:	4606      	mov	r6, r0
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	db09      	blt.n	8008fec <__s2b+0x30>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ff47 	bl	8008e6c <_Balloc>
 8008fde:	b940      	cbnz	r0, 8008ff2 <__s2b+0x36>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	21d3      	movs	r1, #211	@ 0xd3
 8008fe4:	4b18      	ldr	r3, [pc, #96]	@ (8009048 <__s2b+0x8c>)
 8008fe6:	4819      	ldr	r0, [pc, #100]	@ (800904c <__s2b+0x90>)
 8008fe8:	f7fe fc86 	bl	80078f8 <__assert_func>
 8008fec:	0052      	lsls	r2, r2, #1
 8008fee:	3101      	adds	r1, #1
 8008ff0:	e7f0      	b.n	8008fd4 <__s2b+0x18>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	2d09      	cmp	r5, #9
 8008ff6:	6143      	str	r3, [r0, #20]
 8008ff8:	f04f 0301 	mov.w	r3, #1
 8008ffc:	6103      	str	r3, [r0, #16]
 8008ffe:	dd16      	ble.n	800902e <__s2b+0x72>
 8009000:	f104 0909 	add.w	r9, r4, #9
 8009004:	46c8      	mov	r8, r9
 8009006:	442c      	add	r4, r5
 8009008:	f818 3b01 	ldrb.w	r3, [r8], #1
 800900c:	4601      	mov	r1, r0
 800900e:	220a      	movs	r2, #10
 8009010:	4630      	mov	r0, r6
 8009012:	3b30      	subs	r3, #48	@ 0x30
 8009014:	f7ff ff8c 	bl	8008f30 <__multadd>
 8009018:	45a0      	cmp	r8, r4
 800901a:	d1f5      	bne.n	8009008 <__s2b+0x4c>
 800901c:	f1a5 0408 	sub.w	r4, r5, #8
 8009020:	444c      	add	r4, r9
 8009022:	1b2d      	subs	r5, r5, r4
 8009024:	1963      	adds	r3, r4, r5
 8009026:	42bb      	cmp	r3, r7
 8009028:	db04      	blt.n	8009034 <__s2b+0x78>
 800902a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902e:	2509      	movs	r5, #9
 8009030:	340a      	adds	r4, #10
 8009032:	e7f6      	b.n	8009022 <__s2b+0x66>
 8009034:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009038:	4601      	mov	r1, r0
 800903a:	220a      	movs	r2, #10
 800903c:	4630      	mov	r0, r6
 800903e:	3b30      	subs	r3, #48	@ 0x30
 8009040:	f7ff ff76 	bl	8008f30 <__multadd>
 8009044:	e7ee      	b.n	8009024 <__s2b+0x68>
 8009046:	bf00      	nop
 8009048:	0800b143 	.word	0x0800b143
 800904c:	0800b1b4 	.word	0x0800b1b4

08009050 <__hi0bits>:
 8009050:	4603      	mov	r3, r0
 8009052:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009056:	bf3a      	itte	cc
 8009058:	0403      	lslcc	r3, r0, #16
 800905a:	2010      	movcc	r0, #16
 800905c:	2000      	movcs	r0, #0
 800905e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009062:	bf3c      	itt	cc
 8009064:	021b      	lslcc	r3, r3, #8
 8009066:	3008      	addcc	r0, #8
 8009068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800906c:	bf3c      	itt	cc
 800906e:	011b      	lslcc	r3, r3, #4
 8009070:	3004      	addcc	r0, #4
 8009072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009076:	bf3c      	itt	cc
 8009078:	009b      	lslcc	r3, r3, #2
 800907a:	3002      	addcc	r0, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	db05      	blt.n	800908c <__hi0bits+0x3c>
 8009080:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009084:	f100 0001 	add.w	r0, r0, #1
 8009088:	bf08      	it	eq
 800908a:	2020      	moveq	r0, #32
 800908c:	4770      	bx	lr

0800908e <__lo0bits>:
 800908e:	6803      	ldr	r3, [r0, #0]
 8009090:	4602      	mov	r2, r0
 8009092:	f013 0007 	ands.w	r0, r3, #7
 8009096:	d00b      	beq.n	80090b0 <__lo0bits+0x22>
 8009098:	07d9      	lsls	r1, r3, #31
 800909a:	d421      	bmi.n	80090e0 <__lo0bits+0x52>
 800909c:	0798      	lsls	r0, r3, #30
 800909e:	bf49      	itett	mi
 80090a0:	085b      	lsrmi	r3, r3, #1
 80090a2:	089b      	lsrpl	r3, r3, #2
 80090a4:	2001      	movmi	r0, #1
 80090a6:	6013      	strmi	r3, [r2, #0]
 80090a8:	bf5c      	itt	pl
 80090aa:	2002      	movpl	r0, #2
 80090ac:	6013      	strpl	r3, [r2, #0]
 80090ae:	4770      	bx	lr
 80090b0:	b299      	uxth	r1, r3
 80090b2:	b909      	cbnz	r1, 80090b8 <__lo0bits+0x2a>
 80090b4:	2010      	movs	r0, #16
 80090b6:	0c1b      	lsrs	r3, r3, #16
 80090b8:	b2d9      	uxtb	r1, r3
 80090ba:	b909      	cbnz	r1, 80090c0 <__lo0bits+0x32>
 80090bc:	3008      	adds	r0, #8
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	0719      	lsls	r1, r3, #28
 80090c2:	bf04      	itt	eq
 80090c4:	091b      	lsreq	r3, r3, #4
 80090c6:	3004      	addeq	r0, #4
 80090c8:	0799      	lsls	r1, r3, #30
 80090ca:	bf04      	itt	eq
 80090cc:	089b      	lsreq	r3, r3, #2
 80090ce:	3002      	addeq	r0, #2
 80090d0:	07d9      	lsls	r1, r3, #31
 80090d2:	d403      	bmi.n	80090dc <__lo0bits+0x4e>
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	f100 0001 	add.w	r0, r0, #1
 80090da:	d003      	beq.n	80090e4 <__lo0bits+0x56>
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	4770      	bx	lr
 80090e0:	2000      	movs	r0, #0
 80090e2:	4770      	bx	lr
 80090e4:	2020      	movs	r0, #32
 80090e6:	4770      	bx	lr

080090e8 <__i2b>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	460c      	mov	r4, r1
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7ff febd 	bl	8008e6c <_Balloc>
 80090f2:	4602      	mov	r2, r0
 80090f4:	b928      	cbnz	r0, 8009102 <__i2b+0x1a>
 80090f6:	f240 1145 	movw	r1, #325	@ 0x145
 80090fa:	4b04      	ldr	r3, [pc, #16]	@ (800910c <__i2b+0x24>)
 80090fc:	4804      	ldr	r0, [pc, #16]	@ (8009110 <__i2b+0x28>)
 80090fe:	f7fe fbfb 	bl	80078f8 <__assert_func>
 8009102:	2301      	movs	r3, #1
 8009104:	6144      	str	r4, [r0, #20]
 8009106:	6103      	str	r3, [r0, #16]
 8009108:	bd10      	pop	{r4, pc}
 800910a:	bf00      	nop
 800910c:	0800b143 	.word	0x0800b143
 8009110:	0800b1b4 	.word	0x0800b1b4

08009114 <__multiply>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4614      	mov	r4, r2
 800911a:	690a      	ldr	r2, [r1, #16]
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	460f      	mov	r7, r1
 8009120:	429a      	cmp	r2, r3
 8009122:	bfa2      	ittt	ge
 8009124:	4623      	movge	r3, r4
 8009126:	460c      	movge	r4, r1
 8009128:	461f      	movge	r7, r3
 800912a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800912e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	6861      	ldr	r1, [r4, #4]
 8009136:	eb0a 0609 	add.w	r6, sl, r9
 800913a:	42b3      	cmp	r3, r6
 800913c:	b085      	sub	sp, #20
 800913e:	bfb8      	it	lt
 8009140:	3101      	addlt	r1, #1
 8009142:	f7ff fe93 	bl	8008e6c <_Balloc>
 8009146:	b930      	cbnz	r0, 8009156 <__multiply+0x42>
 8009148:	4602      	mov	r2, r0
 800914a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800914e:	4b43      	ldr	r3, [pc, #268]	@ (800925c <__multiply+0x148>)
 8009150:	4843      	ldr	r0, [pc, #268]	@ (8009260 <__multiply+0x14c>)
 8009152:	f7fe fbd1 	bl	80078f8 <__assert_func>
 8009156:	f100 0514 	add.w	r5, r0, #20
 800915a:	462b      	mov	r3, r5
 800915c:	2200      	movs	r2, #0
 800915e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009162:	4543      	cmp	r3, r8
 8009164:	d321      	bcc.n	80091aa <__multiply+0x96>
 8009166:	f107 0114 	add.w	r1, r7, #20
 800916a:	f104 0214 	add.w	r2, r4, #20
 800916e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009172:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	1b13      	subs	r3, r2, r4
 800917a:	3b15      	subs	r3, #21
 800917c:	f023 0303 	bic.w	r3, r3, #3
 8009180:	3304      	adds	r3, #4
 8009182:	f104 0715 	add.w	r7, r4, #21
 8009186:	42ba      	cmp	r2, r7
 8009188:	bf38      	it	cc
 800918a:	2304      	movcc	r3, #4
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	9b02      	ldr	r3, [sp, #8]
 8009190:	9103      	str	r1, [sp, #12]
 8009192:	428b      	cmp	r3, r1
 8009194:	d80c      	bhi.n	80091b0 <__multiply+0x9c>
 8009196:	2e00      	cmp	r6, #0
 8009198:	dd03      	ble.n	80091a2 <__multiply+0x8e>
 800919a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d05a      	beq.n	8009258 <__multiply+0x144>
 80091a2:	6106      	str	r6, [r0, #16]
 80091a4:	b005      	add	sp, #20
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	f843 2b04 	str.w	r2, [r3], #4
 80091ae:	e7d8      	b.n	8009162 <__multiply+0x4e>
 80091b0:	f8b1 a000 	ldrh.w	sl, [r1]
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d023      	beq.n	8009202 <__multiply+0xee>
 80091ba:	46a9      	mov	r9, r5
 80091bc:	f04f 0c00 	mov.w	ip, #0
 80091c0:	f104 0e14 	add.w	lr, r4, #20
 80091c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091c8:	f8d9 3000 	ldr.w	r3, [r9]
 80091cc:	fa1f fb87 	uxth.w	fp, r7
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	fb0a 330b 	mla	r3, sl, fp, r3
 80091d6:	4463      	add	r3, ip
 80091d8:	f8d9 c000 	ldr.w	ip, [r9]
 80091dc:	0c3f      	lsrs	r7, r7, #16
 80091de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80091e2:	fb0a c707 	mla	r7, sl, r7, ip
 80091e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091f0:	4572      	cmp	r2, lr
 80091f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091f6:	f849 3b04 	str.w	r3, [r9], #4
 80091fa:	d8e3      	bhi.n	80091c4 <__multiply+0xb0>
 80091fc:	9b01      	ldr	r3, [sp, #4]
 80091fe:	f845 c003 	str.w	ip, [r5, r3]
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	3104      	adds	r1, #4
 8009206:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800920a:	f1b9 0f00 	cmp.w	r9, #0
 800920e:	d021      	beq.n	8009254 <__multiply+0x140>
 8009210:	46ae      	mov	lr, r5
 8009212:	f04f 0a00 	mov.w	sl, #0
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	f104 0c14 	add.w	ip, r4, #20
 800921c:	f8bc b000 	ldrh.w	fp, [ip]
 8009220:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009224:	b29b      	uxth	r3, r3
 8009226:	fb09 770b 	mla	r7, r9, fp, r7
 800922a:	4457      	add	r7, sl
 800922c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009230:	f84e 3b04 	str.w	r3, [lr], #4
 8009234:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800923c:	f8be 3000 	ldrh.w	r3, [lr]
 8009240:	4562      	cmp	r2, ip
 8009242:	fb09 330a 	mla	r3, r9, sl, r3
 8009246:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800924a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800924e:	d8e5      	bhi.n	800921c <__multiply+0x108>
 8009250:	9f01      	ldr	r7, [sp, #4]
 8009252:	51eb      	str	r3, [r5, r7]
 8009254:	3504      	adds	r5, #4
 8009256:	e79a      	b.n	800918e <__multiply+0x7a>
 8009258:	3e01      	subs	r6, #1
 800925a:	e79c      	b.n	8009196 <__multiply+0x82>
 800925c:	0800b143 	.word	0x0800b143
 8009260:	0800b1b4 	.word	0x0800b1b4

08009264 <__pow5mult>:
 8009264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009268:	4615      	mov	r5, r2
 800926a:	f012 0203 	ands.w	r2, r2, #3
 800926e:	4607      	mov	r7, r0
 8009270:	460e      	mov	r6, r1
 8009272:	d007      	beq.n	8009284 <__pow5mult+0x20>
 8009274:	4c25      	ldr	r4, [pc, #148]	@ (800930c <__pow5mult+0xa8>)
 8009276:	3a01      	subs	r2, #1
 8009278:	2300      	movs	r3, #0
 800927a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800927e:	f7ff fe57 	bl	8008f30 <__multadd>
 8009282:	4606      	mov	r6, r0
 8009284:	10ad      	asrs	r5, r5, #2
 8009286:	d03d      	beq.n	8009304 <__pow5mult+0xa0>
 8009288:	69fc      	ldr	r4, [r7, #28]
 800928a:	b97c      	cbnz	r4, 80092ac <__pow5mult+0x48>
 800928c:	2010      	movs	r0, #16
 800928e:	f7ff fd25 	bl	8008cdc <malloc>
 8009292:	4602      	mov	r2, r0
 8009294:	61f8      	str	r0, [r7, #28]
 8009296:	b928      	cbnz	r0, 80092a4 <__pow5mult+0x40>
 8009298:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800929c:	4b1c      	ldr	r3, [pc, #112]	@ (8009310 <__pow5mult+0xac>)
 800929e:	481d      	ldr	r0, [pc, #116]	@ (8009314 <__pow5mult+0xb0>)
 80092a0:	f7fe fb2a 	bl	80078f8 <__assert_func>
 80092a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092a8:	6004      	str	r4, [r0, #0]
 80092aa:	60c4      	str	r4, [r0, #12]
 80092ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092b4:	b94c      	cbnz	r4, 80092ca <__pow5mult+0x66>
 80092b6:	f240 2171 	movw	r1, #625	@ 0x271
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7ff ff14 	bl	80090e8 <__i2b>
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80092c8:	6003      	str	r3, [r0, #0]
 80092ca:	f04f 0900 	mov.w	r9, #0
 80092ce:	07eb      	lsls	r3, r5, #31
 80092d0:	d50a      	bpl.n	80092e8 <__pow5mult+0x84>
 80092d2:	4631      	mov	r1, r6
 80092d4:	4622      	mov	r2, r4
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff ff1c 	bl	8009114 <__multiply>
 80092dc:	4680      	mov	r8, r0
 80092de:	4631      	mov	r1, r6
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff fe03 	bl	8008eec <_Bfree>
 80092e6:	4646      	mov	r6, r8
 80092e8:	106d      	asrs	r5, r5, #1
 80092ea:	d00b      	beq.n	8009304 <__pow5mult+0xa0>
 80092ec:	6820      	ldr	r0, [r4, #0]
 80092ee:	b938      	cbnz	r0, 8009300 <__pow5mult+0x9c>
 80092f0:	4622      	mov	r2, r4
 80092f2:	4621      	mov	r1, r4
 80092f4:	4638      	mov	r0, r7
 80092f6:	f7ff ff0d 	bl	8009114 <__multiply>
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	f8c0 9000 	str.w	r9, [r0]
 8009300:	4604      	mov	r4, r0
 8009302:	e7e4      	b.n	80092ce <__pow5mult+0x6a>
 8009304:	4630      	mov	r0, r6
 8009306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800930a:	bf00      	nop
 800930c:	0800b210 	.word	0x0800b210
 8009310:	0800b029 	.word	0x0800b029
 8009314:	0800b1b4 	.word	0x0800b1b4

08009318 <__lshift>:
 8009318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	4607      	mov	r7, r0
 8009320:	4691      	mov	r9, r2
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	6849      	ldr	r1, [r1, #4]
 8009326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009330:	f108 0601 	add.w	r6, r8, #1
 8009334:	42b3      	cmp	r3, r6
 8009336:	db0b      	blt.n	8009350 <__lshift+0x38>
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff fd97 	bl	8008e6c <_Balloc>
 800933e:	4605      	mov	r5, r0
 8009340:	b948      	cbnz	r0, 8009356 <__lshift+0x3e>
 8009342:	4602      	mov	r2, r0
 8009344:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009348:	4b27      	ldr	r3, [pc, #156]	@ (80093e8 <__lshift+0xd0>)
 800934a:	4828      	ldr	r0, [pc, #160]	@ (80093ec <__lshift+0xd4>)
 800934c:	f7fe fad4 	bl	80078f8 <__assert_func>
 8009350:	3101      	adds	r1, #1
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	e7ee      	b.n	8009334 <__lshift+0x1c>
 8009356:	2300      	movs	r3, #0
 8009358:	f100 0114 	add.w	r1, r0, #20
 800935c:	f100 0210 	add.w	r2, r0, #16
 8009360:	4618      	mov	r0, r3
 8009362:	4553      	cmp	r3, sl
 8009364:	db33      	blt.n	80093ce <__lshift+0xb6>
 8009366:	6920      	ldr	r0, [r4, #16]
 8009368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800936c:	f104 0314 	add.w	r3, r4, #20
 8009370:	f019 091f 	ands.w	r9, r9, #31
 8009374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800937c:	d02b      	beq.n	80093d6 <__lshift+0xbe>
 800937e:	468a      	mov	sl, r1
 8009380:	2200      	movs	r2, #0
 8009382:	f1c9 0e20 	rsb	lr, r9, #32
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	fa00 f009 	lsl.w	r0, r0, r9
 800938c:	4310      	orrs	r0, r2
 800938e:	f84a 0b04 	str.w	r0, [sl], #4
 8009392:	f853 2b04 	ldr.w	r2, [r3], #4
 8009396:	459c      	cmp	ip, r3
 8009398:	fa22 f20e 	lsr.w	r2, r2, lr
 800939c:	d8f3      	bhi.n	8009386 <__lshift+0x6e>
 800939e:	ebac 0304 	sub.w	r3, ip, r4
 80093a2:	3b15      	subs	r3, #21
 80093a4:	f023 0303 	bic.w	r3, r3, #3
 80093a8:	3304      	adds	r3, #4
 80093aa:	f104 0015 	add.w	r0, r4, #21
 80093ae:	4584      	cmp	ip, r0
 80093b0:	bf38      	it	cc
 80093b2:	2304      	movcc	r3, #4
 80093b4:	50ca      	str	r2, [r1, r3]
 80093b6:	b10a      	cbz	r2, 80093bc <__lshift+0xa4>
 80093b8:	f108 0602 	add.w	r6, r8, #2
 80093bc:	3e01      	subs	r6, #1
 80093be:	4638      	mov	r0, r7
 80093c0:	4621      	mov	r1, r4
 80093c2:	612e      	str	r6, [r5, #16]
 80093c4:	f7ff fd92 	bl	8008eec <_Bfree>
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80093d2:	3301      	adds	r3, #1
 80093d4:	e7c5      	b.n	8009362 <__lshift+0x4a>
 80093d6:	3904      	subs	r1, #4
 80093d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093dc:	459c      	cmp	ip, r3
 80093de:	f841 2f04 	str.w	r2, [r1, #4]!
 80093e2:	d8f9      	bhi.n	80093d8 <__lshift+0xc0>
 80093e4:	e7ea      	b.n	80093bc <__lshift+0xa4>
 80093e6:	bf00      	nop
 80093e8:	0800b143 	.word	0x0800b143
 80093ec:	0800b1b4 	.word	0x0800b1b4

080093f0 <__mcmp>:
 80093f0:	4603      	mov	r3, r0
 80093f2:	690a      	ldr	r2, [r1, #16]
 80093f4:	6900      	ldr	r0, [r0, #16]
 80093f6:	b530      	push	{r4, r5, lr}
 80093f8:	1a80      	subs	r0, r0, r2
 80093fa:	d10e      	bne.n	800941a <__mcmp+0x2a>
 80093fc:	3314      	adds	r3, #20
 80093fe:	3114      	adds	r1, #20
 8009400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800940c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009410:	4295      	cmp	r5, r2
 8009412:	d003      	beq.n	800941c <__mcmp+0x2c>
 8009414:	d205      	bcs.n	8009422 <__mcmp+0x32>
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	bd30      	pop	{r4, r5, pc}
 800941c:	42a3      	cmp	r3, r4
 800941e:	d3f3      	bcc.n	8009408 <__mcmp+0x18>
 8009420:	e7fb      	b.n	800941a <__mcmp+0x2a>
 8009422:	2001      	movs	r0, #1
 8009424:	e7f9      	b.n	800941a <__mcmp+0x2a>
	...

08009428 <__mdiff>:
 8009428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	4689      	mov	r9, r1
 800942e:	4606      	mov	r6, r0
 8009430:	4611      	mov	r1, r2
 8009432:	4648      	mov	r0, r9
 8009434:	4614      	mov	r4, r2
 8009436:	f7ff ffdb 	bl	80093f0 <__mcmp>
 800943a:	1e05      	subs	r5, r0, #0
 800943c:	d112      	bne.n	8009464 <__mdiff+0x3c>
 800943e:	4629      	mov	r1, r5
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff fd13 	bl	8008e6c <_Balloc>
 8009446:	4602      	mov	r2, r0
 8009448:	b928      	cbnz	r0, 8009456 <__mdiff+0x2e>
 800944a:	f240 2137 	movw	r1, #567	@ 0x237
 800944e:	4b3e      	ldr	r3, [pc, #248]	@ (8009548 <__mdiff+0x120>)
 8009450:	483e      	ldr	r0, [pc, #248]	@ (800954c <__mdiff+0x124>)
 8009452:	f7fe fa51 	bl	80078f8 <__assert_func>
 8009456:	2301      	movs	r3, #1
 8009458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800945c:	4610      	mov	r0, r2
 800945e:	b003      	add	sp, #12
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	bfbc      	itt	lt
 8009466:	464b      	movlt	r3, r9
 8009468:	46a1      	movlt	r9, r4
 800946a:	4630      	mov	r0, r6
 800946c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009470:	bfba      	itte	lt
 8009472:	461c      	movlt	r4, r3
 8009474:	2501      	movlt	r5, #1
 8009476:	2500      	movge	r5, #0
 8009478:	f7ff fcf8 	bl	8008e6c <_Balloc>
 800947c:	4602      	mov	r2, r0
 800947e:	b918      	cbnz	r0, 8009488 <__mdiff+0x60>
 8009480:	f240 2145 	movw	r1, #581	@ 0x245
 8009484:	4b30      	ldr	r3, [pc, #192]	@ (8009548 <__mdiff+0x120>)
 8009486:	e7e3      	b.n	8009450 <__mdiff+0x28>
 8009488:	f100 0b14 	add.w	fp, r0, #20
 800948c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009490:	f109 0310 	add.w	r3, r9, #16
 8009494:	60c5      	str	r5, [r0, #12]
 8009496:	f04f 0c00 	mov.w	ip, #0
 800949a:	f109 0514 	add.w	r5, r9, #20
 800949e:	46d9      	mov	r9, fp
 80094a0:	6926      	ldr	r6, [r4, #16]
 80094a2:	f104 0e14 	add.w	lr, r4, #20
 80094a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ba:	b281      	uxth	r1, r0
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	fa1f f38a 	uxth.w	r3, sl
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	0c00      	lsrs	r0, r0, #16
 80094c6:	4463      	add	r3, ip
 80094c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80094cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80094d6:	4576      	cmp	r6, lr
 80094d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094dc:	f849 3b04 	str.w	r3, [r9], #4
 80094e0:	d8e6      	bhi.n	80094b0 <__mdiff+0x88>
 80094e2:	1b33      	subs	r3, r6, r4
 80094e4:	3b15      	subs	r3, #21
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	3415      	adds	r4, #21
 80094ec:	3304      	adds	r3, #4
 80094ee:	42a6      	cmp	r6, r4
 80094f0:	bf38      	it	cc
 80094f2:	2304      	movcc	r3, #4
 80094f4:	441d      	add	r5, r3
 80094f6:	445b      	add	r3, fp
 80094f8:	461e      	mov	r6, r3
 80094fa:	462c      	mov	r4, r5
 80094fc:	4544      	cmp	r4, r8
 80094fe:	d30e      	bcc.n	800951e <__mdiff+0xf6>
 8009500:	f108 0103 	add.w	r1, r8, #3
 8009504:	1b49      	subs	r1, r1, r5
 8009506:	f021 0103 	bic.w	r1, r1, #3
 800950a:	3d03      	subs	r5, #3
 800950c:	45a8      	cmp	r8, r5
 800950e:	bf38      	it	cc
 8009510:	2100      	movcc	r1, #0
 8009512:	440b      	add	r3, r1
 8009514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009518:	b199      	cbz	r1, 8009542 <__mdiff+0x11a>
 800951a:	6117      	str	r7, [r2, #16]
 800951c:	e79e      	b.n	800945c <__mdiff+0x34>
 800951e:	46e6      	mov	lr, ip
 8009520:	f854 1b04 	ldr.w	r1, [r4], #4
 8009524:	fa1f fc81 	uxth.w	ip, r1
 8009528:	44f4      	add	ip, lr
 800952a:	0c08      	lsrs	r0, r1, #16
 800952c:	4471      	add	r1, lr
 800952e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009532:	b289      	uxth	r1, r1
 8009534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009538:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800953c:	f846 1b04 	str.w	r1, [r6], #4
 8009540:	e7dc      	b.n	80094fc <__mdiff+0xd4>
 8009542:	3f01      	subs	r7, #1
 8009544:	e7e6      	b.n	8009514 <__mdiff+0xec>
 8009546:	bf00      	nop
 8009548:	0800b143 	.word	0x0800b143
 800954c:	0800b1b4 	.word	0x0800b1b4

08009550 <__ulp>:
 8009550:	4b0e      	ldr	r3, [pc, #56]	@ (800958c <__ulp+0x3c>)
 8009552:	400b      	ands	r3, r1
 8009554:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009558:	2b00      	cmp	r3, #0
 800955a:	dc08      	bgt.n	800956e <__ulp+0x1e>
 800955c:	425b      	negs	r3, r3
 800955e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009562:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009566:	da04      	bge.n	8009572 <__ulp+0x22>
 8009568:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800956c:	4113      	asrs	r3, r2
 800956e:	2200      	movs	r2, #0
 8009570:	e008      	b.n	8009584 <__ulp+0x34>
 8009572:	f1a2 0314 	sub.w	r3, r2, #20
 8009576:	2b1e      	cmp	r3, #30
 8009578:	bfd6      	itet	le
 800957a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800957e:	2201      	movgt	r2, #1
 8009580:	40da      	lsrle	r2, r3
 8009582:	2300      	movs	r3, #0
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	7ff00000 	.word	0x7ff00000

08009590 <__b2d>:
 8009590:	6902      	ldr	r2, [r0, #16]
 8009592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009594:	f100 0614 	add.w	r6, r0, #20
 8009598:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800959c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80095a0:	4f1e      	ldr	r7, [pc, #120]	@ (800961c <__b2d+0x8c>)
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7ff fd54 	bl	8009050 <__hi0bits>
 80095a8:	4603      	mov	r3, r0
 80095aa:	f1c0 0020 	rsb	r0, r0, #32
 80095ae:	2b0a      	cmp	r3, #10
 80095b0:	f1a2 0504 	sub.w	r5, r2, #4
 80095b4:	6008      	str	r0, [r1, #0]
 80095b6:	dc12      	bgt.n	80095de <__b2d+0x4e>
 80095b8:	42ae      	cmp	r6, r5
 80095ba:	bf2c      	ite	cs
 80095bc:	2200      	movcs	r2, #0
 80095be:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80095c2:	f1c3 0c0b 	rsb	ip, r3, #11
 80095c6:	3315      	adds	r3, #21
 80095c8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80095cc:	fa04 f303 	lsl.w	r3, r4, r3
 80095d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80095d4:	ea4e 0107 	orr.w	r1, lr, r7
 80095d8:	431a      	orrs	r2, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095de:	42ae      	cmp	r6, r5
 80095e0:	bf36      	itet	cc
 80095e2:	f1a2 0508 	subcc.w	r5, r2, #8
 80095e6:	2200      	movcs	r2, #0
 80095e8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80095ec:	3b0b      	subs	r3, #11
 80095ee:	d012      	beq.n	8009616 <__b2d+0x86>
 80095f0:	f1c3 0720 	rsb	r7, r3, #32
 80095f4:	fa22 f107 	lsr.w	r1, r2, r7
 80095f8:	409c      	lsls	r4, r3
 80095fa:	430c      	orrs	r4, r1
 80095fc:	42b5      	cmp	r5, r6
 80095fe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009602:	bf94      	ite	ls
 8009604:	2400      	movls	r4, #0
 8009606:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800960a:	409a      	lsls	r2, r3
 800960c:	40fc      	lsrs	r4, r7
 800960e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009612:	4322      	orrs	r2, r4
 8009614:	e7e1      	b.n	80095da <__b2d+0x4a>
 8009616:	ea44 0107 	orr.w	r1, r4, r7
 800961a:	e7de      	b.n	80095da <__b2d+0x4a>
 800961c:	3ff00000 	.word	0x3ff00000

08009620 <__d2b>:
 8009620:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009624:	2101      	movs	r1, #1
 8009626:	4690      	mov	r8, r2
 8009628:	4699      	mov	r9, r3
 800962a:	9e08      	ldr	r6, [sp, #32]
 800962c:	f7ff fc1e 	bl	8008e6c <_Balloc>
 8009630:	4604      	mov	r4, r0
 8009632:	b930      	cbnz	r0, 8009642 <__d2b+0x22>
 8009634:	4602      	mov	r2, r0
 8009636:	f240 310f 	movw	r1, #783	@ 0x30f
 800963a:	4b23      	ldr	r3, [pc, #140]	@ (80096c8 <__d2b+0xa8>)
 800963c:	4823      	ldr	r0, [pc, #140]	@ (80096cc <__d2b+0xac>)
 800963e:	f7fe f95b 	bl	80078f8 <__assert_func>
 8009642:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009646:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800964a:	b10d      	cbz	r5, 8009650 <__d2b+0x30>
 800964c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f1b8 0300 	subs.w	r3, r8, #0
 8009656:	d024      	beq.n	80096a2 <__d2b+0x82>
 8009658:	4668      	mov	r0, sp
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	f7ff fd17 	bl	800908e <__lo0bits>
 8009660:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009664:	b1d8      	cbz	r0, 800969e <__d2b+0x7e>
 8009666:	f1c0 0320 	rsb	r3, r0, #32
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	430b      	orrs	r3, r1
 8009670:	40c2      	lsrs	r2, r0
 8009672:	6163      	str	r3, [r4, #20]
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bf0c      	ite	eq
 800967c:	2201      	moveq	r2, #1
 800967e:	2202      	movne	r2, #2
 8009680:	61a3      	str	r3, [r4, #24]
 8009682:	6122      	str	r2, [r4, #16]
 8009684:	b1ad      	cbz	r5, 80096b2 <__d2b+0x92>
 8009686:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800968a:	4405      	add	r5, r0
 800968c:	6035      	str	r5, [r6, #0]
 800968e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009694:	6018      	str	r0, [r3, #0]
 8009696:	4620      	mov	r0, r4
 8009698:	b002      	add	sp, #8
 800969a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800969e:	6161      	str	r1, [r4, #20]
 80096a0:	e7e9      	b.n	8009676 <__d2b+0x56>
 80096a2:	a801      	add	r0, sp, #4
 80096a4:	f7ff fcf3 	bl	800908e <__lo0bits>
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	3020      	adds	r0, #32
 80096b0:	e7e7      	b.n	8009682 <__d2b+0x62>
 80096b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096ba:	6030      	str	r0, [r6, #0]
 80096bc:	6918      	ldr	r0, [r3, #16]
 80096be:	f7ff fcc7 	bl	8009050 <__hi0bits>
 80096c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096c6:	e7e4      	b.n	8009692 <__d2b+0x72>
 80096c8:	0800b143 	.word	0x0800b143
 80096cc:	0800b1b4 	.word	0x0800b1b4

080096d0 <__ratio>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	b085      	sub	sp, #20
 80096d6:	e9cd 1000 	strd	r1, r0, [sp]
 80096da:	a902      	add	r1, sp, #8
 80096dc:	f7ff ff58 	bl	8009590 <__b2d>
 80096e0:	468b      	mov	fp, r1
 80096e2:	4606      	mov	r6, r0
 80096e4:	460f      	mov	r7, r1
 80096e6:	9800      	ldr	r0, [sp, #0]
 80096e8:	a903      	add	r1, sp, #12
 80096ea:	f7ff ff51 	bl	8009590 <__b2d>
 80096ee:	460d      	mov	r5, r1
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	4689      	mov	r9, r1
 80096f4:	6919      	ldr	r1, [r3, #16]
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	4604      	mov	r4, r0
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	4630      	mov	r0, r6
 80096fe:	1ac9      	subs	r1, r1, r3
 8009700:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfcd      	iteet	gt
 800970e:	463a      	movgt	r2, r7
 8009710:	462a      	movle	r2, r5
 8009712:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009716:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800971a:	bfd8      	it	le
 800971c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009720:	464b      	mov	r3, r9
 8009722:	4622      	mov	r2, r4
 8009724:	4659      	mov	r1, fp
 8009726:	f7f7 f801 	bl	800072c <__aeabi_ddiv>
 800972a:	b005      	add	sp, #20
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009730 <__copybits>:
 8009730:	3901      	subs	r1, #1
 8009732:	b570      	push	{r4, r5, r6, lr}
 8009734:	1149      	asrs	r1, r1, #5
 8009736:	6914      	ldr	r4, [r2, #16]
 8009738:	3101      	adds	r1, #1
 800973a:	f102 0314 	add.w	r3, r2, #20
 800973e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009742:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009746:	1f05      	subs	r5, r0, #4
 8009748:	42a3      	cmp	r3, r4
 800974a:	d30c      	bcc.n	8009766 <__copybits+0x36>
 800974c:	1aa3      	subs	r3, r4, r2
 800974e:	3b11      	subs	r3, #17
 8009750:	f023 0303 	bic.w	r3, r3, #3
 8009754:	3211      	adds	r2, #17
 8009756:	42a2      	cmp	r2, r4
 8009758:	bf88      	it	hi
 800975a:	2300      	movhi	r3, #0
 800975c:	4418      	add	r0, r3
 800975e:	2300      	movs	r3, #0
 8009760:	4288      	cmp	r0, r1
 8009762:	d305      	bcc.n	8009770 <__copybits+0x40>
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	f853 6b04 	ldr.w	r6, [r3], #4
 800976a:	f845 6f04 	str.w	r6, [r5, #4]!
 800976e:	e7eb      	b.n	8009748 <__copybits+0x18>
 8009770:	f840 3b04 	str.w	r3, [r0], #4
 8009774:	e7f4      	b.n	8009760 <__copybits+0x30>

08009776 <__any_on>:
 8009776:	f100 0214 	add.w	r2, r0, #20
 800977a:	6900      	ldr	r0, [r0, #16]
 800977c:	114b      	asrs	r3, r1, #5
 800977e:	4298      	cmp	r0, r3
 8009780:	b510      	push	{r4, lr}
 8009782:	db11      	blt.n	80097a8 <__any_on+0x32>
 8009784:	dd0a      	ble.n	800979c <__any_on+0x26>
 8009786:	f011 011f 	ands.w	r1, r1, #31
 800978a:	d007      	beq.n	800979c <__any_on+0x26>
 800978c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009790:	fa24 f001 	lsr.w	r0, r4, r1
 8009794:	fa00 f101 	lsl.w	r1, r0, r1
 8009798:	428c      	cmp	r4, r1
 800979a:	d10b      	bne.n	80097b4 <__any_on+0x3e>
 800979c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d803      	bhi.n	80097ac <__any_on+0x36>
 80097a4:	2000      	movs	r0, #0
 80097a6:	bd10      	pop	{r4, pc}
 80097a8:	4603      	mov	r3, r0
 80097aa:	e7f7      	b.n	800979c <__any_on+0x26>
 80097ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d0f5      	beq.n	80097a0 <__any_on+0x2a>
 80097b4:	2001      	movs	r0, #1
 80097b6:	e7f6      	b.n	80097a6 <__any_on+0x30>

080097b8 <_strtol_l.constprop.0>:
 80097b8:	2b24      	cmp	r3, #36	@ 0x24
 80097ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097be:	4686      	mov	lr, r0
 80097c0:	4690      	mov	r8, r2
 80097c2:	d801      	bhi.n	80097c8 <_strtol_l.constprop.0+0x10>
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d106      	bne.n	80097d6 <_strtol_l.constprop.0+0x1e>
 80097c8:	f7fe f842 	bl	8007850 <__errno>
 80097cc:	2316      	movs	r3, #22
 80097ce:	6003      	str	r3, [r0, #0]
 80097d0:	2000      	movs	r0, #0
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	460d      	mov	r5, r1
 80097d8:	4833      	ldr	r0, [pc, #204]	@ (80098a8 <_strtol_l.constprop.0+0xf0>)
 80097da:	462a      	mov	r2, r5
 80097dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e0:	5d06      	ldrb	r6, [r0, r4]
 80097e2:	f016 0608 	ands.w	r6, r6, #8
 80097e6:	d1f8      	bne.n	80097da <_strtol_l.constprop.0+0x22>
 80097e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80097ea:	d12d      	bne.n	8009848 <_strtol_l.constprop.0+0x90>
 80097ec:	2601      	movs	r6, #1
 80097ee:	782c      	ldrb	r4, [r5, #0]
 80097f0:	1c95      	adds	r5, r2, #2
 80097f2:	f033 0210 	bics.w	r2, r3, #16
 80097f6:	d109      	bne.n	800980c <_strtol_l.constprop.0+0x54>
 80097f8:	2c30      	cmp	r4, #48	@ 0x30
 80097fa:	d12a      	bne.n	8009852 <_strtol_l.constprop.0+0x9a>
 80097fc:	782a      	ldrb	r2, [r5, #0]
 80097fe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009802:	2a58      	cmp	r2, #88	@ 0x58
 8009804:	d125      	bne.n	8009852 <_strtol_l.constprop.0+0x9a>
 8009806:	2310      	movs	r3, #16
 8009808:	786c      	ldrb	r4, [r5, #1]
 800980a:	3502      	adds	r5, #2
 800980c:	2200      	movs	r2, #0
 800980e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009812:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009816:	fbbc f9f3 	udiv	r9, ip, r3
 800981a:	4610      	mov	r0, r2
 800981c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009820:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009824:	2f09      	cmp	r7, #9
 8009826:	d81b      	bhi.n	8009860 <_strtol_l.constprop.0+0xa8>
 8009828:	463c      	mov	r4, r7
 800982a:	42a3      	cmp	r3, r4
 800982c:	dd27      	ble.n	800987e <_strtol_l.constprop.0+0xc6>
 800982e:	1c57      	adds	r7, r2, #1
 8009830:	d007      	beq.n	8009842 <_strtol_l.constprop.0+0x8a>
 8009832:	4581      	cmp	r9, r0
 8009834:	d320      	bcc.n	8009878 <_strtol_l.constprop.0+0xc0>
 8009836:	d101      	bne.n	800983c <_strtol_l.constprop.0+0x84>
 8009838:	45a2      	cmp	sl, r4
 800983a:	db1d      	blt.n	8009878 <_strtol_l.constprop.0+0xc0>
 800983c:	2201      	movs	r2, #1
 800983e:	fb00 4003 	mla	r0, r0, r3, r4
 8009842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009846:	e7eb      	b.n	8009820 <_strtol_l.constprop.0+0x68>
 8009848:	2c2b      	cmp	r4, #43	@ 0x2b
 800984a:	bf04      	itt	eq
 800984c:	782c      	ldrbeq	r4, [r5, #0]
 800984e:	1c95      	addeq	r5, r2, #2
 8009850:	e7cf      	b.n	80097f2 <_strtol_l.constprop.0+0x3a>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1da      	bne.n	800980c <_strtol_l.constprop.0+0x54>
 8009856:	2c30      	cmp	r4, #48	@ 0x30
 8009858:	bf0c      	ite	eq
 800985a:	2308      	moveq	r3, #8
 800985c:	230a      	movne	r3, #10
 800985e:	e7d5      	b.n	800980c <_strtol_l.constprop.0+0x54>
 8009860:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009864:	2f19      	cmp	r7, #25
 8009866:	d801      	bhi.n	800986c <_strtol_l.constprop.0+0xb4>
 8009868:	3c37      	subs	r4, #55	@ 0x37
 800986a:	e7de      	b.n	800982a <_strtol_l.constprop.0+0x72>
 800986c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009870:	2f19      	cmp	r7, #25
 8009872:	d804      	bhi.n	800987e <_strtol_l.constprop.0+0xc6>
 8009874:	3c57      	subs	r4, #87	@ 0x57
 8009876:	e7d8      	b.n	800982a <_strtol_l.constprop.0+0x72>
 8009878:	f04f 32ff 	mov.w	r2, #4294967295
 800987c:	e7e1      	b.n	8009842 <_strtol_l.constprop.0+0x8a>
 800987e:	1c53      	adds	r3, r2, #1
 8009880:	d108      	bne.n	8009894 <_strtol_l.constprop.0+0xdc>
 8009882:	2322      	movs	r3, #34	@ 0x22
 8009884:	4660      	mov	r0, ip
 8009886:	f8ce 3000 	str.w	r3, [lr]
 800988a:	f1b8 0f00 	cmp.w	r8, #0
 800988e:	d0a0      	beq.n	80097d2 <_strtol_l.constprop.0+0x1a>
 8009890:	1e69      	subs	r1, r5, #1
 8009892:	e006      	b.n	80098a2 <_strtol_l.constprop.0+0xea>
 8009894:	b106      	cbz	r6, 8009898 <_strtol_l.constprop.0+0xe0>
 8009896:	4240      	negs	r0, r0
 8009898:	f1b8 0f00 	cmp.w	r8, #0
 800989c:	d099      	beq.n	80097d2 <_strtol_l.constprop.0+0x1a>
 800989e:	2a00      	cmp	r2, #0
 80098a0:	d1f6      	bne.n	8009890 <_strtol_l.constprop.0+0xd8>
 80098a2:	f8c8 1000 	str.w	r1, [r8]
 80098a6:	e794      	b.n	80097d2 <_strtol_l.constprop.0+0x1a>
 80098a8:	0800b311 	.word	0x0800b311

080098ac <_strtol_r>:
 80098ac:	f7ff bf84 	b.w	80097b8 <_strtol_l.constprop.0>

080098b0 <__ascii_wctomb>:
 80098b0:	4603      	mov	r3, r0
 80098b2:	4608      	mov	r0, r1
 80098b4:	b141      	cbz	r1, 80098c8 <__ascii_wctomb+0x18>
 80098b6:	2aff      	cmp	r2, #255	@ 0xff
 80098b8:	d904      	bls.n	80098c4 <__ascii_wctomb+0x14>
 80098ba:	228a      	movs	r2, #138	@ 0x8a
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	4770      	bx	lr
 80098c4:	2001      	movs	r0, #1
 80098c6:	700a      	strb	r2, [r1, #0]
 80098c8:	4770      	bx	lr

080098ca <__ssputs_r>:
 80098ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ce:	461f      	mov	r7, r3
 80098d0:	688e      	ldr	r6, [r1, #8]
 80098d2:	4682      	mov	sl, r0
 80098d4:	42be      	cmp	r6, r7
 80098d6:	460c      	mov	r4, r1
 80098d8:	4690      	mov	r8, r2
 80098da:	680b      	ldr	r3, [r1, #0]
 80098dc:	d82d      	bhi.n	800993a <__ssputs_r+0x70>
 80098de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098e6:	d026      	beq.n	8009936 <__ssputs_r+0x6c>
 80098e8:	6965      	ldr	r5, [r4, #20]
 80098ea:	6909      	ldr	r1, [r1, #16]
 80098ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f0:	eba3 0901 	sub.w	r9, r3, r1
 80098f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098f8:	1c7b      	adds	r3, r7, #1
 80098fa:	444b      	add	r3, r9
 80098fc:	106d      	asrs	r5, r5, #1
 80098fe:	429d      	cmp	r5, r3
 8009900:	bf38      	it	cc
 8009902:	461d      	movcc	r5, r3
 8009904:	0553      	lsls	r3, r2, #21
 8009906:	d527      	bpl.n	8009958 <__ssputs_r+0x8e>
 8009908:	4629      	mov	r1, r5
 800990a:	f7ff fa11 	bl	8008d30 <_malloc_r>
 800990e:	4606      	mov	r6, r0
 8009910:	b360      	cbz	r0, 800996c <__ssputs_r+0xa2>
 8009912:	464a      	mov	r2, r9
 8009914:	6921      	ldr	r1, [r4, #16]
 8009916:	f7fd ffd6 	bl	80078c6 <memcpy>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	6126      	str	r6, [r4, #16]
 8009928:	444e      	add	r6, r9
 800992a:	6026      	str	r6, [r4, #0]
 800992c:	463e      	mov	r6, r7
 800992e:	6165      	str	r5, [r4, #20]
 8009930:	eba5 0509 	sub.w	r5, r5, r9
 8009934:	60a5      	str	r5, [r4, #8]
 8009936:	42be      	cmp	r6, r7
 8009938:	d900      	bls.n	800993c <__ssputs_r+0x72>
 800993a:	463e      	mov	r6, r7
 800993c:	4632      	mov	r2, r6
 800993e:	4641      	mov	r1, r8
 8009940:	6820      	ldr	r0, [r4, #0]
 8009942:	f000 f9d3 	bl	8009cec <memmove>
 8009946:	2000      	movs	r0, #0
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	1b9b      	subs	r3, r3, r6
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	4433      	add	r3, r6
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009958:	462a      	mov	r2, r5
 800995a:	f000 fa0c 	bl	8009d76 <_realloc_r>
 800995e:	4606      	mov	r6, r0
 8009960:	2800      	cmp	r0, #0
 8009962:	d1e0      	bne.n	8009926 <__ssputs_r+0x5c>
 8009964:	4650      	mov	r0, sl
 8009966:	6921      	ldr	r1, [r4, #16]
 8009968:	f7fe fe36 	bl	80085d8 <_free_r>
 800996c:	230c      	movs	r3, #12
 800996e:	f8ca 3000 	str.w	r3, [sl]
 8009972:	89a3      	ldrh	r3, [r4, #12]
 8009974:	f04f 30ff 	mov.w	r0, #4294967295
 8009978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	e7e9      	b.n	8009954 <__ssputs_r+0x8a>

08009980 <_svfiprintf_r>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4698      	mov	r8, r3
 8009986:	898b      	ldrh	r3, [r1, #12]
 8009988:	4607      	mov	r7, r0
 800998a:	061b      	lsls	r3, r3, #24
 800998c:	460d      	mov	r5, r1
 800998e:	4614      	mov	r4, r2
 8009990:	b09d      	sub	sp, #116	@ 0x74
 8009992:	d510      	bpl.n	80099b6 <_svfiprintf_r+0x36>
 8009994:	690b      	ldr	r3, [r1, #16]
 8009996:	b973      	cbnz	r3, 80099b6 <_svfiprintf_r+0x36>
 8009998:	2140      	movs	r1, #64	@ 0x40
 800999a:	f7ff f9c9 	bl	8008d30 <_malloc_r>
 800999e:	6028      	str	r0, [r5, #0]
 80099a0:	6128      	str	r0, [r5, #16]
 80099a2:	b930      	cbnz	r0, 80099b2 <_svfiprintf_r+0x32>
 80099a4:	230c      	movs	r3, #12
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	b01d      	add	sp, #116	@ 0x74
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	2340      	movs	r3, #64	@ 0x40
 80099b4:	616b      	str	r3, [r5, #20]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ba:	2320      	movs	r3, #32
 80099bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099c0:	2330      	movs	r3, #48	@ 0x30
 80099c2:	f04f 0901 	mov.w	r9, #1
 80099c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009b64 <_svfiprintf_r+0x1e4>
 80099ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099d2:	4623      	mov	r3, r4
 80099d4:	469a      	mov	sl, r3
 80099d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099da:	b10a      	cbz	r2, 80099e0 <_svfiprintf_r+0x60>
 80099dc:	2a25      	cmp	r2, #37	@ 0x25
 80099de:	d1f9      	bne.n	80099d4 <_svfiprintf_r+0x54>
 80099e0:	ebba 0b04 	subs.w	fp, sl, r4
 80099e4:	d00b      	beq.n	80099fe <_svfiprintf_r+0x7e>
 80099e6:	465b      	mov	r3, fp
 80099e8:	4622      	mov	r2, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff ff6c 	bl	80098ca <__ssputs_r>
 80099f2:	3001      	adds	r0, #1
 80099f4:	f000 80a7 	beq.w	8009b46 <_svfiprintf_r+0x1c6>
 80099f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099fa:	445a      	add	r2, fp
 80099fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80099fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 809f 	beq.w	8009b46 <_svfiprintf_r+0x1c6>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a12:	f10a 0a01 	add.w	sl, sl, #1
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a20:	4654      	mov	r4, sl
 8009a22:	2205      	movs	r2, #5
 8009a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a28:	484e      	ldr	r0, [pc, #312]	@ (8009b64 <_svfiprintf_r+0x1e4>)
 8009a2a:	f7fd ff3e 	bl	80078aa <memchr>
 8009a2e:	9a04      	ldr	r2, [sp, #16]
 8009a30:	b9d8      	cbnz	r0, 8009a6a <_svfiprintf_r+0xea>
 8009a32:	06d0      	lsls	r0, r2, #27
 8009a34:	bf44      	itt	mi
 8009a36:	2320      	movmi	r3, #32
 8009a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a3c:	0711      	lsls	r1, r2, #28
 8009a3e:	bf44      	itt	mi
 8009a40:	232b      	movmi	r3, #43	@ 0x2b
 8009a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a4c:	d015      	beq.n	8009a7a <_svfiprintf_r+0xfa>
 8009a4e:	4654      	mov	r4, sl
 8009a50:	2000      	movs	r0, #0
 8009a52:	f04f 0c0a 	mov.w	ip, #10
 8009a56:	9a07      	ldr	r2, [sp, #28]
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5e:	3b30      	subs	r3, #48	@ 0x30
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d94b      	bls.n	8009afc <_svfiprintf_r+0x17c>
 8009a64:	b1b0      	cbz	r0, 8009a94 <_svfiprintf_r+0x114>
 8009a66:	9207      	str	r2, [sp, #28]
 8009a68:	e014      	b.n	8009a94 <_svfiprintf_r+0x114>
 8009a6a:	eba0 0308 	sub.w	r3, r0, r8
 8009a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a72:	4313      	orrs	r3, r2
 8009a74:	46a2      	mov	sl, r4
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	e7d2      	b.n	8009a20 <_svfiprintf_r+0xa0>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	1d19      	adds	r1, r3, #4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	9103      	str	r1, [sp, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bfbb      	ittet	lt
 8009a86:	425b      	neglt	r3, r3
 8009a88:	f042 0202 	orrlt.w	r2, r2, #2
 8009a8c:	9307      	strge	r3, [sp, #28]
 8009a8e:	9307      	strlt	r3, [sp, #28]
 8009a90:	bfb8      	it	lt
 8009a92:	9204      	strlt	r2, [sp, #16]
 8009a94:	7823      	ldrb	r3, [r4, #0]
 8009a96:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a98:	d10a      	bne.n	8009ab0 <_svfiprintf_r+0x130>
 8009a9a:	7863      	ldrb	r3, [r4, #1]
 8009a9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a9e:	d132      	bne.n	8009b06 <_svfiprintf_r+0x186>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	3402      	adds	r4, #2
 8009aa4:	1d1a      	adds	r2, r3, #4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	9203      	str	r2, [sp, #12]
 8009aaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009b68 <_svfiprintf_r+0x1e8>
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	4650      	mov	r0, sl
 8009ab8:	7821      	ldrb	r1, [r4, #0]
 8009aba:	f7fd fef6 	bl	80078aa <memchr>
 8009abe:	b138      	cbz	r0, 8009ad0 <_svfiprintf_r+0x150>
 8009ac0:	2240      	movs	r2, #64	@ 0x40
 8009ac2:	9b04      	ldr	r3, [sp, #16]
 8009ac4:	eba0 000a 	sub.w	r0, r0, sl
 8009ac8:	4082      	lsls	r2, r0
 8009aca:	4313      	orrs	r3, r2
 8009acc:	3401      	adds	r4, #1
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad4:	2206      	movs	r2, #6
 8009ad6:	4825      	ldr	r0, [pc, #148]	@ (8009b6c <_svfiprintf_r+0x1ec>)
 8009ad8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009adc:	f7fd fee5 	bl	80078aa <memchr>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d036      	beq.n	8009b52 <_svfiprintf_r+0x1d2>
 8009ae4:	4b22      	ldr	r3, [pc, #136]	@ (8009b70 <_svfiprintf_r+0x1f0>)
 8009ae6:	bb1b      	cbnz	r3, 8009b30 <_svfiprintf_r+0x1b0>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	3307      	adds	r3, #7
 8009aec:	f023 0307 	bic.w	r3, r3, #7
 8009af0:	3308      	adds	r3, #8
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af6:	4433      	add	r3, r6
 8009af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009afa:	e76a      	b.n	80099d2 <_svfiprintf_r+0x52>
 8009afc:	460c      	mov	r4, r1
 8009afe:	2001      	movs	r0, #1
 8009b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b04:	e7a8      	b.n	8009a58 <_svfiprintf_r+0xd8>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f04f 0c0a 	mov.w	ip, #10
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	3401      	adds	r4, #1
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b18:	3a30      	subs	r2, #48	@ 0x30
 8009b1a:	2a09      	cmp	r2, #9
 8009b1c:	d903      	bls.n	8009b26 <_svfiprintf_r+0x1a6>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c6      	beq.n	8009ab0 <_svfiprintf_r+0x130>
 8009b22:	9105      	str	r1, [sp, #20]
 8009b24:	e7c4      	b.n	8009ab0 <_svfiprintf_r+0x130>
 8009b26:	4604      	mov	r4, r0
 8009b28:	2301      	movs	r3, #1
 8009b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b2e:	e7f0      	b.n	8009b12 <_svfiprintf_r+0x192>
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4638      	mov	r0, r7
 8009b38:	4b0e      	ldr	r3, [pc, #56]	@ (8009b74 <_svfiprintf_r+0x1f4>)
 8009b3a:	a904      	add	r1, sp, #16
 8009b3c:	f7fc fed4 	bl	80068e8 <_printf_float>
 8009b40:	1c42      	adds	r2, r0, #1
 8009b42:	4606      	mov	r6, r0
 8009b44:	d1d6      	bne.n	8009af4 <_svfiprintf_r+0x174>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	065b      	lsls	r3, r3, #25
 8009b4a:	f53f af2d 	bmi.w	80099a8 <_svfiprintf_r+0x28>
 8009b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b50:	e72c      	b.n	80099ac <_svfiprintf_r+0x2c>
 8009b52:	ab03      	add	r3, sp, #12
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	462a      	mov	r2, r5
 8009b58:	4638      	mov	r0, r7
 8009b5a:	4b06      	ldr	r3, [pc, #24]	@ (8009b74 <_svfiprintf_r+0x1f4>)
 8009b5c:	a904      	add	r1, sp, #16
 8009b5e:	f7fd f961 	bl	8006e24 <_printf_i>
 8009b62:	e7ed      	b.n	8009b40 <_svfiprintf_r+0x1c0>
 8009b64:	0800b411 	.word	0x0800b411
 8009b68:	0800b417 	.word	0x0800b417
 8009b6c:	0800b41b 	.word	0x0800b41b
 8009b70:	080068e9 	.word	0x080068e9
 8009b74:	080098cb 	.word	0x080098cb

08009b78 <__sflush_r>:
 8009b78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	0716      	lsls	r6, r2, #28
 8009b80:	4605      	mov	r5, r0
 8009b82:	460c      	mov	r4, r1
 8009b84:	d454      	bmi.n	8009c30 <__sflush_r+0xb8>
 8009b86:	684b      	ldr	r3, [r1, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dc02      	bgt.n	8009b92 <__sflush_r+0x1a>
 8009b8c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd48      	ble.n	8009c24 <__sflush_r+0xac>
 8009b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b94:	2e00      	cmp	r6, #0
 8009b96:	d045      	beq.n	8009c24 <__sflush_r+0xac>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b9e:	682f      	ldr	r7, [r5, #0]
 8009ba0:	6a21      	ldr	r1, [r4, #32]
 8009ba2:	602b      	str	r3, [r5, #0]
 8009ba4:	d030      	beq.n	8009c08 <__sflush_r+0x90>
 8009ba6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	0759      	lsls	r1, r3, #29
 8009bac:	d505      	bpl.n	8009bba <__sflush_r+0x42>
 8009bae:	6863      	ldr	r3, [r4, #4]
 8009bb0:	1ad2      	subs	r2, r2, r3
 8009bb2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bb4:	b10b      	cbz	r3, 8009bba <__sflush_r+0x42>
 8009bb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bb8:	1ad2      	subs	r2, r2, r3
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bc0:	6a21      	ldr	r1, [r4, #32]
 8009bc2:	47b0      	blx	r6
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	d106      	bne.n	8009bd8 <__sflush_r+0x60>
 8009bca:	6829      	ldr	r1, [r5, #0]
 8009bcc:	291d      	cmp	r1, #29
 8009bce:	d82b      	bhi.n	8009c28 <__sflush_r+0xb0>
 8009bd0:	4a28      	ldr	r2, [pc, #160]	@ (8009c74 <__sflush_r+0xfc>)
 8009bd2:	410a      	asrs	r2, r1
 8009bd4:	07d6      	lsls	r6, r2, #31
 8009bd6:	d427      	bmi.n	8009c28 <__sflush_r+0xb0>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	6062      	str	r2, [r4, #4]
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	04d9      	lsls	r1, r3, #19
 8009be0:	6022      	str	r2, [r4, #0]
 8009be2:	d504      	bpl.n	8009bee <__sflush_r+0x76>
 8009be4:	1c42      	adds	r2, r0, #1
 8009be6:	d101      	bne.n	8009bec <__sflush_r+0x74>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b903      	cbnz	r3, 8009bee <__sflush_r+0x76>
 8009bec:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bf0:	602f      	str	r7, [r5, #0]
 8009bf2:	b1b9      	cbz	r1, 8009c24 <__sflush_r+0xac>
 8009bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bf8:	4299      	cmp	r1, r3
 8009bfa:	d002      	beq.n	8009c02 <__sflush_r+0x8a>
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7fe fceb 	bl	80085d8 <_free_r>
 8009c02:	2300      	movs	r3, #0
 8009c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c06:	e00d      	b.n	8009c24 <__sflush_r+0xac>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b0      	blx	r6
 8009c0e:	4602      	mov	r2, r0
 8009c10:	1c50      	adds	r0, r2, #1
 8009c12:	d1c9      	bne.n	8009ba8 <__sflush_r+0x30>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c6      	beq.n	8009ba8 <__sflush_r+0x30>
 8009c1a:	2b1d      	cmp	r3, #29
 8009c1c:	d001      	beq.n	8009c22 <__sflush_r+0xaa>
 8009c1e:	2b16      	cmp	r3, #22
 8009c20:	d11d      	bne.n	8009c5e <__sflush_r+0xe6>
 8009c22:	602f      	str	r7, [r5, #0]
 8009c24:	2000      	movs	r0, #0
 8009c26:	e021      	b.n	8009c6c <__sflush_r+0xf4>
 8009c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c2c:	b21b      	sxth	r3, r3
 8009c2e:	e01a      	b.n	8009c66 <__sflush_r+0xee>
 8009c30:	690f      	ldr	r7, [r1, #16]
 8009c32:	2f00      	cmp	r7, #0
 8009c34:	d0f6      	beq.n	8009c24 <__sflush_r+0xac>
 8009c36:	0793      	lsls	r3, r2, #30
 8009c38:	bf18      	it	ne
 8009c3a:	2300      	movne	r3, #0
 8009c3c:	680e      	ldr	r6, [r1, #0]
 8009c3e:	bf08      	it	eq
 8009c40:	694b      	ldreq	r3, [r1, #20]
 8009c42:	1bf6      	subs	r6, r6, r7
 8009c44:	600f      	str	r7, [r1, #0]
 8009c46:	608b      	str	r3, [r1, #8]
 8009c48:	2e00      	cmp	r6, #0
 8009c4a:	ddeb      	ble.n	8009c24 <__sflush_r+0xac>
 8009c4c:	4633      	mov	r3, r6
 8009c4e:	463a      	mov	r2, r7
 8009c50:	4628      	mov	r0, r5
 8009c52:	6a21      	ldr	r1, [r4, #32]
 8009c54:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009c58:	47e0      	blx	ip
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	dc07      	bgt.n	8009c6e <__sflush_r+0xf6>
 8009c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c66:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6e:	4407      	add	r7, r0
 8009c70:	1a36      	subs	r6, r6, r0
 8009c72:	e7e9      	b.n	8009c48 <__sflush_r+0xd0>
 8009c74:	dfbffffe 	.word	0xdfbffffe

08009c78 <_fflush_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	690b      	ldr	r3, [r1, #16]
 8009c7c:	4605      	mov	r5, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	b913      	cbnz	r3, 8009c88 <_fflush_r+0x10>
 8009c82:	2500      	movs	r5, #0
 8009c84:	4628      	mov	r0, r5
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	b118      	cbz	r0, 8009c92 <_fflush_r+0x1a>
 8009c8a:	6a03      	ldr	r3, [r0, #32]
 8009c8c:	b90b      	cbnz	r3, 8009c92 <_fflush_r+0x1a>
 8009c8e:	f7fd fc85 	bl	800759c <__sinit>
 8009c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d0f3      	beq.n	8009c82 <_fflush_r+0xa>
 8009c9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c9c:	07d0      	lsls	r0, r2, #31
 8009c9e:	d404      	bmi.n	8009caa <_fflush_r+0x32>
 8009ca0:	0599      	lsls	r1, r3, #22
 8009ca2:	d402      	bmi.n	8009caa <_fflush_r+0x32>
 8009ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ca6:	f7fd fdfe 	bl	80078a6 <__retarget_lock_acquire_recursive>
 8009caa:	4628      	mov	r0, r5
 8009cac:	4621      	mov	r1, r4
 8009cae:	f7ff ff63 	bl	8009b78 <__sflush_r>
 8009cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	07da      	lsls	r2, r3, #31
 8009cb8:	d4e4      	bmi.n	8009c84 <_fflush_r+0xc>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	059b      	lsls	r3, r3, #22
 8009cbe:	d4e1      	bmi.n	8009c84 <_fflush_r+0xc>
 8009cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cc2:	f7fd fdf1 	bl	80078a8 <__retarget_lock_release_recursive>
 8009cc6:	e7dd      	b.n	8009c84 <_fflush_r+0xc>

08009cc8 <fiprintf>:
 8009cc8:	b40e      	push	{r1, r2, r3}
 8009cca:	b503      	push	{r0, r1, lr}
 8009ccc:	4601      	mov	r1, r0
 8009cce:	ab03      	add	r3, sp, #12
 8009cd0:	4805      	ldr	r0, [pc, #20]	@ (8009ce8 <fiprintf+0x20>)
 8009cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f000 f8a1 	bl	8009e20 <_vfiprintf_r>
 8009cde:	b002      	add	sp, #8
 8009ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce4:	b003      	add	sp, #12
 8009ce6:	4770      	bx	lr
 8009ce8:	20000184 	.word	0x20000184

08009cec <memmove>:
 8009cec:	4288      	cmp	r0, r1
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	eb01 0402 	add.w	r4, r1, r2
 8009cf4:	d902      	bls.n	8009cfc <memmove+0x10>
 8009cf6:	4284      	cmp	r4, r0
 8009cf8:	4623      	mov	r3, r4
 8009cfa:	d807      	bhi.n	8009d0c <memmove+0x20>
 8009cfc:	1e43      	subs	r3, r0, #1
 8009cfe:	42a1      	cmp	r1, r4
 8009d00:	d008      	beq.n	8009d14 <memmove+0x28>
 8009d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d0a:	e7f8      	b.n	8009cfe <memmove+0x12>
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	4402      	add	r2, r0
 8009d10:	428a      	cmp	r2, r1
 8009d12:	d100      	bne.n	8009d16 <memmove+0x2a>
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d1e:	e7f7      	b.n	8009d10 <memmove+0x24>

08009d20 <_sbrk_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	2300      	movs	r3, #0
 8009d24:	4d05      	ldr	r5, [pc, #20]	@ (8009d3c <_sbrk_r+0x1c>)
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	602b      	str	r3, [r5, #0]
 8009d2c:	f7f8 ffc2 	bl	8002cb4 <_sbrk>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_sbrk_r+0x1a>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_sbrk_r+0x1a>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	200006e0 	.word	0x200006e0

08009d40 <abort>:
 8009d40:	2006      	movs	r0, #6
 8009d42:	b508      	push	{r3, lr}
 8009d44:	f000 fa40 	bl	800a1c8 <raise>
 8009d48:	2001      	movs	r0, #1
 8009d4a:	f7f8 ff3e 	bl	8002bca <_exit>

08009d4e <_calloc_r>:
 8009d4e:	b570      	push	{r4, r5, r6, lr}
 8009d50:	fba1 5402 	umull	r5, r4, r1, r2
 8009d54:	b93c      	cbnz	r4, 8009d66 <_calloc_r+0x18>
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7fe ffea 	bl	8008d30 <_malloc_r>
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	b928      	cbnz	r0, 8009d6c <_calloc_r+0x1e>
 8009d60:	2600      	movs	r6, #0
 8009d62:	4630      	mov	r0, r6
 8009d64:	bd70      	pop	{r4, r5, r6, pc}
 8009d66:	220c      	movs	r2, #12
 8009d68:	6002      	str	r2, [r0, #0]
 8009d6a:	e7f9      	b.n	8009d60 <_calloc_r+0x12>
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f7fd fcad 	bl	80076ce <memset>
 8009d74:	e7f5      	b.n	8009d62 <_calloc_r+0x14>

08009d76 <_realloc_r>:
 8009d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7a:	4680      	mov	r8, r0
 8009d7c:	4615      	mov	r5, r2
 8009d7e:	460c      	mov	r4, r1
 8009d80:	b921      	cbnz	r1, 8009d8c <_realloc_r+0x16>
 8009d82:	4611      	mov	r1, r2
 8009d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d88:	f7fe bfd2 	b.w	8008d30 <_malloc_r>
 8009d8c:	b92a      	cbnz	r2, 8009d9a <_realloc_r+0x24>
 8009d8e:	f7fe fc23 	bl	80085d8 <_free_r>
 8009d92:	2400      	movs	r4, #0
 8009d94:	4620      	mov	r0, r4
 8009d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9a:	f000 fa31 	bl	800a200 <_malloc_usable_size_r>
 8009d9e:	4285      	cmp	r5, r0
 8009da0:	4606      	mov	r6, r0
 8009da2:	d802      	bhi.n	8009daa <_realloc_r+0x34>
 8009da4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009da8:	d8f4      	bhi.n	8009d94 <_realloc_r+0x1e>
 8009daa:	4629      	mov	r1, r5
 8009dac:	4640      	mov	r0, r8
 8009dae:	f7fe ffbf 	bl	8008d30 <_malloc_r>
 8009db2:	4607      	mov	r7, r0
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d0ec      	beq.n	8009d92 <_realloc_r+0x1c>
 8009db8:	42b5      	cmp	r5, r6
 8009dba:	462a      	mov	r2, r5
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	bf28      	it	cs
 8009dc0:	4632      	movcs	r2, r6
 8009dc2:	f7fd fd80 	bl	80078c6 <memcpy>
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f7fe fc05 	bl	80085d8 <_free_r>
 8009dce:	463c      	mov	r4, r7
 8009dd0:	e7e0      	b.n	8009d94 <_realloc_r+0x1e>

08009dd2 <__sfputc_r>:
 8009dd2:	6893      	ldr	r3, [r2, #8]
 8009dd4:	b410      	push	{r4}
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	6093      	str	r3, [r2, #8]
 8009ddc:	da07      	bge.n	8009dee <__sfputc_r+0x1c>
 8009dde:	6994      	ldr	r4, [r2, #24]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	db01      	blt.n	8009de8 <__sfputc_r+0x16>
 8009de4:	290a      	cmp	r1, #10
 8009de6:	d102      	bne.n	8009dee <__sfputc_r+0x1c>
 8009de8:	bc10      	pop	{r4}
 8009dea:	f000 b931 	b.w	800a050 <__swbuf_r>
 8009dee:	6813      	ldr	r3, [r2, #0]
 8009df0:	1c58      	adds	r0, r3, #1
 8009df2:	6010      	str	r0, [r2, #0]
 8009df4:	7019      	strb	r1, [r3, #0]
 8009df6:	4608      	mov	r0, r1
 8009df8:	bc10      	pop	{r4}
 8009dfa:	4770      	bx	lr

08009dfc <__sfputs_r>:
 8009dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfe:	4606      	mov	r6, r0
 8009e00:	460f      	mov	r7, r1
 8009e02:	4614      	mov	r4, r2
 8009e04:	18d5      	adds	r5, r2, r3
 8009e06:	42ac      	cmp	r4, r5
 8009e08:	d101      	bne.n	8009e0e <__sfputs_r+0x12>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	e007      	b.n	8009e1e <__sfputs_r+0x22>
 8009e0e:	463a      	mov	r2, r7
 8009e10:	4630      	mov	r0, r6
 8009e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e16:	f7ff ffdc 	bl	8009dd2 <__sfputc_r>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	d1f3      	bne.n	8009e06 <__sfputs_r+0xa>
 8009e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e20 <_vfiprintf_r>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	460d      	mov	r5, r1
 8009e26:	4614      	mov	r4, r2
 8009e28:	4698      	mov	r8, r3
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	b09d      	sub	sp, #116	@ 0x74
 8009e2e:	b118      	cbz	r0, 8009e38 <_vfiprintf_r+0x18>
 8009e30:	6a03      	ldr	r3, [r0, #32]
 8009e32:	b90b      	cbnz	r3, 8009e38 <_vfiprintf_r+0x18>
 8009e34:	f7fd fbb2 	bl	800759c <__sinit>
 8009e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x2a>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x2a>
 8009e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e46:	f7fd fd2e 	bl	80078a6 <__retarget_lock_acquire_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	071b      	lsls	r3, r3, #28
 8009e4e:	d501      	bpl.n	8009e54 <_vfiprintf_r+0x34>
 8009e50:	692b      	ldr	r3, [r5, #16]
 8009e52:	b99b      	cbnz	r3, 8009e7c <_vfiprintf_r+0x5c>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4630      	mov	r0, r6
 8009e58:	f000 f938 	bl	800a0cc <__swsetup_r>
 8009e5c:	b170      	cbz	r0, 8009e7c <_vfiprintf_r+0x5c>
 8009e5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e60:	07dc      	lsls	r4, r3, #31
 8009e62:	d504      	bpl.n	8009e6e <_vfiprintf_r+0x4e>
 8009e64:	f04f 30ff 	mov.w	r0, #4294967295
 8009e68:	b01d      	add	sp, #116	@ 0x74
 8009e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	0598      	lsls	r0, r3, #22
 8009e72:	d4f7      	bmi.n	8009e64 <_vfiprintf_r+0x44>
 8009e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e76:	f7fd fd17 	bl	80078a8 <__retarget_lock_release_recursive>
 8009e7a:	e7f3      	b.n	8009e64 <_vfiprintf_r+0x44>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e80:	2320      	movs	r3, #32
 8009e82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e86:	2330      	movs	r3, #48	@ 0x30
 8009e88:	f04f 0901 	mov.w	r9, #1
 8009e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e90:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a03c <_vfiprintf_r+0x21c>
 8009e94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e98:	4623      	mov	r3, r4
 8009e9a:	469a      	mov	sl, r3
 8009e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea0:	b10a      	cbz	r2, 8009ea6 <_vfiprintf_r+0x86>
 8009ea2:	2a25      	cmp	r2, #37	@ 0x25
 8009ea4:	d1f9      	bne.n	8009e9a <_vfiprintf_r+0x7a>
 8009ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eaa:	d00b      	beq.n	8009ec4 <_vfiprintf_r+0xa4>
 8009eac:	465b      	mov	r3, fp
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7ff ffa2 	bl	8009dfc <__sfputs_r>
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f000 80a7 	beq.w	800a00c <_vfiprintf_r+0x1ec>
 8009ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ec0:	445a      	add	r2, fp
 8009ec2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 809f 	beq.w	800a00c <_vfiprintf_r+0x1ec>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ed8:	f10a 0a01 	add.w	sl, sl, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	9307      	str	r3, [sp, #28]
 8009ee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ee6:	4654      	mov	r4, sl
 8009ee8:	2205      	movs	r2, #5
 8009eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eee:	4853      	ldr	r0, [pc, #332]	@ (800a03c <_vfiprintf_r+0x21c>)
 8009ef0:	f7fd fcdb 	bl	80078aa <memchr>
 8009ef4:	9a04      	ldr	r2, [sp, #16]
 8009ef6:	b9d8      	cbnz	r0, 8009f30 <_vfiprintf_r+0x110>
 8009ef8:	06d1      	lsls	r1, r2, #27
 8009efa:	bf44      	itt	mi
 8009efc:	2320      	movmi	r3, #32
 8009efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f02:	0713      	lsls	r3, r2, #28
 8009f04:	bf44      	itt	mi
 8009f06:	232b      	movmi	r3, #43	@ 0x2b
 8009f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f12:	d015      	beq.n	8009f40 <_vfiprintf_r+0x120>
 8009f14:	4654      	mov	r4, sl
 8009f16:	2000      	movs	r0, #0
 8009f18:	f04f 0c0a 	mov.w	ip, #10
 8009f1c:	9a07      	ldr	r2, [sp, #28]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f24:	3b30      	subs	r3, #48	@ 0x30
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d94b      	bls.n	8009fc2 <_vfiprintf_r+0x1a2>
 8009f2a:	b1b0      	cbz	r0, 8009f5a <_vfiprintf_r+0x13a>
 8009f2c:	9207      	str	r2, [sp, #28]
 8009f2e:	e014      	b.n	8009f5a <_vfiprintf_r+0x13a>
 8009f30:	eba0 0308 	sub.w	r3, r0, r8
 8009f34:	fa09 f303 	lsl.w	r3, r9, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	46a2      	mov	sl, r4
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	e7d2      	b.n	8009ee6 <_vfiprintf_r+0xc6>
 8009f40:	9b03      	ldr	r3, [sp, #12]
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	9103      	str	r1, [sp, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	bfbb      	ittet	lt
 8009f4c:	425b      	neglt	r3, r3
 8009f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f52:	9307      	strge	r3, [sp, #28]
 8009f54:	9307      	strlt	r3, [sp, #28]
 8009f56:	bfb8      	it	lt
 8009f58:	9204      	strlt	r2, [sp, #16]
 8009f5a:	7823      	ldrb	r3, [r4, #0]
 8009f5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f5e:	d10a      	bne.n	8009f76 <_vfiprintf_r+0x156>
 8009f60:	7863      	ldrb	r3, [r4, #1]
 8009f62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f64:	d132      	bne.n	8009fcc <_vfiprintf_r+0x1ac>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3402      	adds	r4, #2
 8009f6a:	1d1a      	adds	r2, r3, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	9203      	str	r2, [sp, #12]
 8009f70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f74:	9305      	str	r3, [sp, #20]
 8009f76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a040 <_vfiprintf_r+0x220>
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	7821      	ldrb	r1, [r4, #0]
 8009f80:	f7fd fc93 	bl	80078aa <memchr>
 8009f84:	b138      	cbz	r0, 8009f96 <_vfiprintf_r+0x176>
 8009f86:	2240      	movs	r2, #64	@ 0x40
 8009f88:	9b04      	ldr	r3, [sp, #16]
 8009f8a:	eba0 000a 	sub.w	r0, r0, sl
 8009f8e:	4082      	lsls	r2, r0
 8009f90:	4313      	orrs	r3, r2
 8009f92:	3401      	adds	r4, #1
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9a:	2206      	movs	r2, #6
 8009f9c:	4829      	ldr	r0, [pc, #164]	@ (800a044 <_vfiprintf_r+0x224>)
 8009f9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fa2:	f7fd fc82 	bl	80078aa <memchr>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d03f      	beq.n	800a02a <_vfiprintf_r+0x20a>
 8009faa:	4b27      	ldr	r3, [pc, #156]	@ (800a048 <_vfiprintf_r+0x228>)
 8009fac:	bb1b      	cbnz	r3, 8009ff6 <_vfiprintf_r+0x1d6>
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	f023 0307 	bic.w	r3, r3, #7
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fbc:	443b      	add	r3, r7
 8009fbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fc0:	e76a      	b.n	8009e98 <_vfiprintf_r+0x78>
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fca:	e7a8      	b.n	8009f1e <_vfiprintf_r+0xfe>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f04f 0c0a 	mov.w	ip, #10
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	3401      	adds	r4, #1
 8009fd6:	9305      	str	r3, [sp, #20]
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fde:	3a30      	subs	r2, #48	@ 0x30
 8009fe0:	2a09      	cmp	r2, #9
 8009fe2:	d903      	bls.n	8009fec <_vfiprintf_r+0x1cc>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0c6      	beq.n	8009f76 <_vfiprintf_r+0x156>
 8009fe8:	9105      	str	r1, [sp, #20]
 8009fea:	e7c4      	b.n	8009f76 <_vfiprintf_r+0x156>
 8009fec:	4604      	mov	r4, r0
 8009fee:	2301      	movs	r3, #1
 8009ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ff4:	e7f0      	b.n	8009fd8 <_vfiprintf_r+0x1b8>
 8009ff6:	ab03      	add	r3, sp, #12
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	4b13      	ldr	r3, [pc, #76]	@ (800a04c <_vfiprintf_r+0x22c>)
 800a000:	a904      	add	r1, sp, #16
 800a002:	f7fc fc71 	bl	80068e8 <_printf_float>
 800a006:	4607      	mov	r7, r0
 800a008:	1c78      	adds	r0, r7, #1
 800a00a:	d1d6      	bne.n	8009fba <_vfiprintf_r+0x19a>
 800a00c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d405      	bmi.n	800a01e <_vfiprintf_r+0x1fe>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d402      	bmi.n	800a01e <_vfiprintf_r+0x1fe>
 800a018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a01a:	f7fd fc45 	bl	80078a8 <__retarget_lock_release_recursive>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	065b      	lsls	r3, r3, #25
 800a022:	f53f af1f 	bmi.w	8009e64 <_vfiprintf_r+0x44>
 800a026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a028:	e71e      	b.n	8009e68 <_vfiprintf_r+0x48>
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	4630      	mov	r0, r6
 800a032:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <_vfiprintf_r+0x22c>)
 800a034:	a904      	add	r1, sp, #16
 800a036:	f7fc fef5 	bl	8006e24 <_printf_i>
 800a03a:	e7e4      	b.n	800a006 <_vfiprintf_r+0x1e6>
 800a03c:	0800b411 	.word	0x0800b411
 800a040:	0800b417 	.word	0x0800b417
 800a044:	0800b41b 	.word	0x0800b41b
 800a048:	080068e9 	.word	0x080068e9
 800a04c:	08009dfd 	.word	0x08009dfd

0800a050 <__swbuf_r>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	460e      	mov	r6, r1
 800a054:	4614      	mov	r4, r2
 800a056:	4605      	mov	r5, r0
 800a058:	b118      	cbz	r0, 800a062 <__swbuf_r+0x12>
 800a05a:	6a03      	ldr	r3, [r0, #32]
 800a05c:	b90b      	cbnz	r3, 800a062 <__swbuf_r+0x12>
 800a05e:	f7fd fa9d 	bl	800759c <__sinit>
 800a062:	69a3      	ldr	r3, [r4, #24]
 800a064:	60a3      	str	r3, [r4, #8]
 800a066:	89a3      	ldrh	r3, [r4, #12]
 800a068:	071a      	lsls	r2, r3, #28
 800a06a:	d501      	bpl.n	800a070 <__swbuf_r+0x20>
 800a06c:	6923      	ldr	r3, [r4, #16]
 800a06e:	b943      	cbnz	r3, 800a082 <__swbuf_r+0x32>
 800a070:	4621      	mov	r1, r4
 800a072:	4628      	mov	r0, r5
 800a074:	f000 f82a 	bl	800a0cc <__swsetup_r>
 800a078:	b118      	cbz	r0, 800a082 <__swbuf_r+0x32>
 800a07a:	f04f 37ff 	mov.w	r7, #4294967295
 800a07e:	4638      	mov	r0, r7
 800a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	6922      	ldr	r2, [r4, #16]
 800a086:	b2f6      	uxtb	r6, r6
 800a088:	1a98      	subs	r0, r3, r2
 800a08a:	6963      	ldr	r3, [r4, #20]
 800a08c:	4637      	mov	r7, r6
 800a08e:	4283      	cmp	r3, r0
 800a090:	dc05      	bgt.n	800a09e <__swbuf_r+0x4e>
 800a092:	4621      	mov	r1, r4
 800a094:	4628      	mov	r0, r5
 800a096:	f7ff fdef 	bl	8009c78 <_fflush_r>
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d1ed      	bne.n	800a07a <__swbuf_r+0x2a>
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	6022      	str	r2, [r4, #0]
 800a0aa:	701e      	strb	r6, [r3, #0]
 800a0ac:	6962      	ldr	r2, [r4, #20]
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d004      	beq.n	800a0be <__swbuf_r+0x6e>
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d5e1      	bpl.n	800a07e <__swbuf_r+0x2e>
 800a0ba:	2e0a      	cmp	r6, #10
 800a0bc:	d1df      	bne.n	800a07e <__swbuf_r+0x2e>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7ff fdd9 	bl	8009c78 <_fflush_r>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d0d9      	beq.n	800a07e <__swbuf_r+0x2e>
 800a0ca:	e7d6      	b.n	800a07a <__swbuf_r+0x2a>

0800a0cc <__swsetup_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4b29      	ldr	r3, [pc, #164]	@ (800a174 <__swsetup_r+0xa8>)
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	6818      	ldr	r0, [r3, #0]
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	b118      	cbz	r0, 800a0e0 <__swsetup_r+0x14>
 800a0d8:	6a03      	ldr	r3, [r0, #32]
 800a0da:	b90b      	cbnz	r3, 800a0e0 <__swsetup_r+0x14>
 800a0dc:	f7fd fa5e 	bl	800759c <__sinit>
 800a0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e4:	0719      	lsls	r1, r3, #28
 800a0e6:	d422      	bmi.n	800a12e <__swsetup_r+0x62>
 800a0e8:	06da      	lsls	r2, r3, #27
 800a0ea:	d407      	bmi.n	800a0fc <__swsetup_r+0x30>
 800a0ec:	2209      	movs	r2, #9
 800a0ee:	602a      	str	r2, [r5, #0]
 800a0f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e033      	b.n	800a164 <__swsetup_r+0x98>
 800a0fc:	0758      	lsls	r0, r3, #29
 800a0fe:	d512      	bpl.n	800a126 <__swsetup_r+0x5a>
 800a100:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a102:	b141      	cbz	r1, 800a116 <__swsetup_r+0x4a>
 800a104:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a108:	4299      	cmp	r1, r3
 800a10a:	d002      	beq.n	800a112 <__swsetup_r+0x46>
 800a10c:	4628      	mov	r0, r5
 800a10e:	f7fe fa63 	bl	80085d8 <_free_r>
 800a112:	2300      	movs	r3, #0
 800a114:	6363      	str	r3, [r4, #52]	@ 0x34
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a11c:	81a3      	strh	r3, [r4, #12]
 800a11e:	2300      	movs	r3, #0
 800a120:	6063      	str	r3, [r4, #4]
 800a122:	6923      	ldr	r3, [r4, #16]
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	f043 0308 	orr.w	r3, r3, #8
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	6923      	ldr	r3, [r4, #16]
 800a130:	b94b      	cbnz	r3, 800a146 <__swsetup_r+0x7a>
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a13c:	d003      	beq.n	800a146 <__swsetup_r+0x7a>
 800a13e:	4621      	mov	r1, r4
 800a140:	4628      	mov	r0, r5
 800a142:	f000 f88a 	bl	800a25a <__smakebuf_r>
 800a146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14a:	f013 0201 	ands.w	r2, r3, #1
 800a14e:	d00a      	beq.n	800a166 <__swsetup_r+0x9a>
 800a150:	2200      	movs	r2, #0
 800a152:	60a2      	str	r2, [r4, #8]
 800a154:	6962      	ldr	r2, [r4, #20]
 800a156:	4252      	negs	r2, r2
 800a158:	61a2      	str	r2, [r4, #24]
 800a15a:	6922      	ldr	r2, [r4, #16]
 800a15c:	b942      	cbnz	r2, 800a170 <__swsetup_r+0xa4>
 800a15e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a162:	d1c5      	bne.n	800a0f0 <__swsetup_r+0x24>
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	0799      	lsls	r1, r3, #30
 800a168:	bf58      	it	pl
 800a16a:	6962      	ldrpl	r2, [r4, #20]
 800a16c:	60a2      	str	r2, [r4, #8]
 800a16e:	e7f4      	b.n	800a15a <__swsetup_r+0x8e>
 800a170:	2000      	movs	r0, #0
 800a172:	e7f7      	b.n	800a164 <__swsetup_r+0x98>
 800a174:	20000184 	.word	0x20000184

0800a178 <_raise_r>:
 800a178:	291f      	cmp	r1, #31
 800a17a:	b538      	push	{r3, r4, r5, lr}
 800a17c:	4605      	mov	r5, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	d904      	bls.n	800a18c <_raise_r+0x14>
 800a182:	2316      	movs	r3, #22
 800a184:	6003      	str	r3, [r0, #0]
 800a186:	f04f 30ff 	mov.w	r0, #4294967295
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a18e:	b112      	cbz	r2, 800a196 <_raise_r+0x1e>
 800a190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a194:	b94b      	cbnz	r3, 800a1aa <_raise_r+0x32>
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f830 	bl	800a1fc <_getpid_r>
 800a19c:	4622      	mov	r2, r4
 800a19e:	4601      	mov	r1, r0
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1a6:	f000 b817 	b.w	800a1d8 <_kill_r>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d00a      	beq.n	800a1c4 <_raise_r+0x4c>
 800a1ae:	1c59      	adds	r1, r3, #1
 800a1b0:	d103      	bne.n	800a1ba <_raise_r+0x42>
 800a1b2:	2316      	movs	r3, #22
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	e7e7      	b.n	800a18a <_raise_r+0x12>
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a1c2:	4798      	blx	r3
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7e0      	b.n	800a18a <_raise_r+0x12>

0800a1c8 <raise>:
 800a1c8:	4b02      	ldr	r3, [pc, #8]	@ (800a1d4 <raise+0xc>)
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	6818      	ldr	r0, [r3, #0]
 800a1ce:	f7ff bfd3 	b.w	800a178 <_raise_r>
 800a1d2:	bf00      	nop
 800a1d4:	20000184 	.word	0x20000184

0800a1d8 <_kill_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4d06      	ldr	r5, [pc, #24]	@ (800a1f8 <_kill_r+0x20>)
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	4611      	mov	r1, r2
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	f7f8 fce0 	bl	8002baa <_kill>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d102      	bne.n	800a1f4 <_kill_r+0x1c>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	b103      	cbz	r3, 800a1f4 <_kill_r+0x1c>
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200006e0 	.word	0x200006e0

0800a1fc <_getpid_r>:
 800a1fc:	f7f8 bcce 	b.w	8002b9c <_getpid>

0800a200 <_malloc_usable_size_r>:
 800a200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a204:	1f18      	subs	r0, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfbc      	itt	lt
 800a20a:	580b      	ldrlt	r3, [r1, r0]
 800a20c:	18c0      	addlt	r0, r0, r3
 800a20e:	4770      	bx	lr

0800a210 <__swhatbuf_r>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	460c      	mov	r4, r1
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	4615      	mov	r5, r2
 800a21a:	2900      	cmp	r1, #0
 800a21c:	461e      	mov	r6, r3
 800a21e:	b096      	sub	sp, #88	@ 0x58
 800a220:	da0c      	bge.n	800a23c <__swhatbuf_r+0x2c>
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	2100      	movs	r1, #0
 800a226:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a22a:	bf14      	ite	ne
 800a22c:	2340      	movne	r3, #64	@ 0x40
 800a22e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a232:	2000      	movs	r0, #0
 800a234:	6031      	str	r1, [r6, #0]
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	b016      	add	sp, #88	@ 0x58
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	466a      	mov	r2, sp
 800a23e:	f000 f849 	bl	800a2d4 <_fstat_r>
 800a242:	2800      	cmp	r0, #0
 800a244:	dbed      	blt.n	800a222 <__swhatbuf_r+0x12>
 800a246:	9901      	ldr	r1, [sp, #4]
 800a248:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a24c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a250:	4259      	negs	r1, r3
 800a252:	4159      	adcs	r1, r3
 800a254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a258:	e7eb      	b.n	800a232 <__swhatbuf_r+0x22>

0800a25a <__smakebuf_r>:
 800a25a:	898b      	ldrh	r3, [r1, #12]
 800a25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a25e:	079d      	lsls	r5, r3, #30
 800a260:	4606      	mov	r6, r0
 800a262:	460c      	mov	r4, r1
 800a264:	d507      	bpl.n	800a276 <__smakebuf_r+0x1c>
 800a266:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	6123      	str	r3, [r4, #16]
 800a26e:	2301      	movs	r3, #1
 800a270:	6163      	str	r3, [r4, #20]
 800a272:	b003      	add	sp, #12
 800a274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a276:	466a      	mov	r2, sp
 800a278:	ab01      	add	r3, sp, #4
 800a27a:	f7ff ffc9 	bl	800a210 <__swhatbuf_r>
 800a27e:	9f00      	ldr	r7, [sp, #0]
 800a280:	4605      	mov	r5, r0
 800a282:	4639      	mov	r1, r7
 800a284:	4630      	mov	r0, r6
 800a286:	f7fe fd53 	bl	8008d30 <_malloc_r>
 800a28a:	b948      	cbnz	r0, 800a2a0 <__smakebuf_r+0x46>
 800a28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a290:	059a      	lsls	r2, r3, #22
 800a292:	d4ee      	bmi.n	800a272 <__smakebuf_r+0x18>
 800a294:	f023 0303 	bic.w	r3, r3, #3
 800a298:	f043 0302 	orr.w	r3, r3, #2
 800a29c:	81a3      	strh	r3, [r4, #12]
 800a29e:	e7e2      	b.n	800a266 <__smakebuf_r+0xc>
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	6020      	str	r0, [r4, #0]
 800a2b0:	b15b      	cbz	r3, 800a2ca <__smakebuf_r+0x70>
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b8:	f000 f81e 	bl	800a2f8 <_isatty_r>
 800a2bc:	b128      	cbz	r0, 800a2ca <__smakebuf_r+0x70>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	f023 0303 	bic.w	r3, r3, #3
 800a2c4:	f043 0301 	orr.w	r3, r3, #1
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	431d      	orrs	r5, r3
 800a2ce:	81a5      	strh	r5, [r4, #12]
 800a2d0:	e7cf      	b.n	800a272 <__smakebuf_r+0x18>
	...

0800a2d4 <_fstat_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	4d06      	ldr	r5, [pc, #24]	@ (800a2f4 <_fstat_r+0x20>)
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f8 fcc1 	bl	8002c68 <_fstat>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_fstat_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_fstat_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	200006e0 	.word	0x200006e0

0800a2f8 <_isatty_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4d05      	ldr	r5, [pc, #20]	@ (800a314 <_isatty_r+0x1c>)
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f8 fcbf 	bl	8002c86 <_isatty>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_isatty_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_isatty_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	200006e0 	.word	0x200006e0

0800a318 <cosf>:
 800a318:	b507      	push	{r0, r1, r2, lr}
 800a31a:	4a1a      	ldr	r2, [pc, #104]	@ (800a384 <cosf+0x6c>)
 800a31c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a320:	4293      	cmp	r3, r2
 800a322:	4601      	mov	r1, r0
 800a324:	d805      	bhi.n	800a332 <cosf+0x1a>
 800a326:	2100      	movs	r1, #0
 800a328:	b003      	add	sp, #12
 800a32a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a32e:	f000 b865 	b.w	800a3fc <__kernel_cosf>
 800a332:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a336:	d304      	bcc.n	800a342 <cosf+0x2a>
 800a338:	f7f6 fc1a 	bl	8000b70 <__aeabi_fsub>
 800a33c:	b003      	add	sp, #12
 800a33e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a342:	4669      	mov	r1, sp
 800a344:	f000 f950 	bl	800a5e8 <__ieee754_rem_pio2f>
 800a348:	f000 0203 	and.w	r2, r0, #3
 800a34c:	2a01      	cmp	r2, #1
 800a34e:	d007      	beq.n	800a360 <cosf+0x48>
 800a350:	2a02      	cmp	r2, #2
 800a352:	d00c      	beq.n	800a36e <cosf+0x56>
 800a354:	b982      	cbnz	r2, 800a378 <cosf+0x60>
 800a356:	9901      	ldr	r1, [sp, #4]
 800a358:	9800      	ldr	r0, [sp, #0]
 800a35a:	f000 f84f 	bl	800a3fc <__kernel_cosf>
 800a35e:	e7ed      	b.n	800a33c <cosf+0x24>
 800a360:	9901      	ldr	r1, [sp, #4]
 800a362:	9800      	ldr	r0, [sp, #0]
 800a364:	f000 f8ca 	bl	800a4fc <__kernel_sinf>
 800a368:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a36c:	e7e6      	b.n	800a33c <cosf+0x24>
 800a36e:	9901      	ldr	r1, [sp, #4]
 800a370:	9800      	ldr	r0, [sp, #0]
 800a372:	f000 f843 	bl	800a3fc <__kernel_cosf>
 800a376:	e7f7      	b.n	800a368 <cosf+0x50>
 800a378:	2201      	movs	r2, #1
 800a37a:	9901      	ldr	r1, [sp, #4]
 800a37c:	9800      	ldr	r0, [sp, #0]
 800a37e:	f000 f8bd 	bl	800a4fc <__kernel_sinf>
 800a382:	e7db      	b.n	800a33c <cosf+0x24>
 800a384:	3f490fd8 	.word	0x3f490fd8

0800a388 <sinf>:
 800a388:	b507      	push	{r0, r1, r2, lr}
 800a38a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3f8 <sinf+0x70>)
 800a38c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a390:	4293      	cmp	r3, r2
 800a392:	4601      	mov	r1, r0
 800a394:	d806      	bhi.n	800a3a4 <sinf+0x1c>
 800a396:	2200      	movs	r2, #0
 800a398:	2100      	movs	r1, #0
 800a39a:	b003      	add	sp, #12
 800a39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a0:	f000 b8ac 	b.w	800a4fc <__kernel_sinf>
 800a3a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a3a8:	d304      	bcc.n	800a3b4 <sinf+0x2c>
 800a3aa:	f7f6 fbe1 	bl	8000b70 <__aeabi_fsub>
 800a3ae:	b003      	add	sp, #12
 800a3b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3b4:	4669      	mov	r1, sp
 800a3b6:	f000 f917 	bl	800a5e8 <__ieee754_rem_pio2f>
 800a3ba:	f000 0003 	and.w	r0, r0, #3
 800a3be:	2801      	cmp	r0, #1
 800a3c0:	d008      	beq.n	800a3d4 <sinf+0x4c>
 800a3c2:	2802      	cmp	r0, #2
 800a3c4:	d00b      	beq.n	800a3de <sinf+0x56>
 800a3c6:	b990      	cbnz	r0, 800a3ee <sinf+0x66>
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	9901      	ldr	r1, [sp, #4]
 800a3cc:	9800      	ldr	r0, [sp, #0]
 800a3ce:	f000 f895 	bl	800a4fc <__kernel_sinf>
 800a3d2:	e7ec      	b.n	800a3ae <sinf+0x26>
 800a3d4:	9901      	ldr	r1, [sp, #4]
 800a3d6:	9800      	ldr	r0, [sp, #0]
 800a3d8:	f000 f810 	bl	800a3fc <__kernel_cosf>
 800a3dc:	e7e7      	b.n	800a3ae <sinf+0x26>
 800a3de:	2201      	movs	r2, #1
 800a3e0:	9901      	ldr	r1, [sp, #4]
 800a3e2:	9800      	ldr	r0, [sp, #0]
 800a3e4:	f000 f88a 	bl	800a4fc <__kernel_sinf>
 800a3e8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a3ec:	e7df      	b.n	800a3ae <sinf+0x26>
 800a3ee:	9901      	ldr	r1, [sp, #4]
 800a3f0:	9800      	ldr	r0, [sp, #0]
 800a3f2:	f000 f803 	bl	800a3fc <__kernel_cosf>
 800a3f6:	e7f7      	b.n	800a3e8 <sinf+0x60>
 800a3f8:	3f490fd8 	.word	0x3f490fd8

0800a3fc <__kernel_cosf>:
 800a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a400:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a404:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800a408:	4606      	mov	r6, r0
 800a40a:	4688      	mov	r8, r1
 800a40c:	d203      	bcs.n	800a416 <__kernel_cosf+0x1a>
 800a40e:	f7f6 fe95 	bl	800113c <__aeabi_f2iz>
 800a412:	2800      	cmp	r0, #0
 800a414:	d05c      	beq.n	800a4d0 <__kernel_cosf+0xd4>
 800a416:	4631      	mov	r1, r6
 800a418:	4630      	mov	r0, r6
 800a41a:	f7f6 fcb3 	bl	8000d84 <__aeabi_fmul>
 800a41e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a422:	4604      	mov	r4, r0
 800a424:	f7f6 fcae 	bl	8000d84 <__aeabi_fmul>
 800a428:	492b      	ldr	r1, [pc, #172]	@ (800a4d8 <__kernel_cosf+0xdc>)
 800a42a:	4607      	mov	r7, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	f7f6 fca9 	bl	8000d84 <__aeabi_fmul>
 800a432:	492a      	ldr	r1, [pc, #168]	@ (800a4dc <__kernel_cosf+0xe0>)
 800a434:	f7f6 fb9e 	bl	8000b74 <__addsf3>
 800a438:	4621      	mov	r1, r4
 800a43a:	f7f6 fca3 	bl	8000d84 <__aeabi_fmul>
 800a43e:	4928      	ldr	r1, [pc, #160]	@ (800a4e0 <__kernel_cosf+0xe4>)
 800a440:	f7f6 fb96 	bl	8000b70 <__aeabi_fsub>
 800a444:	4621      	mov	r1, r4
 800a446:	f7f6 fc9d 	bl	8000d84 <__aeabi_fmul>
 800a44a:	4926      	ldr	r1, [pc, #152]	@ (800a4e4 <__kernel_cosf+0xe8>)
 800a44c:	f7f6 fb92 	bl	8000b74 <__addsf3>
 800a450:	4621      	mov	r1, r4
 800a452:	f7f6 fc97 	bl	8000d84 <__aeabi_fmul>
 800a456:	4924      	ldr	r1, [pc, #144]	@ (800a4e8 <__kernel_cosf+0xec>)
 800a458:	f7f6 fb8a 	bl	8000b70 <__aeabi_fsub>
 800a45c:	4621      	mov	r1, r4
 800a45e:	f7f6 fc91 	bl	8000d84 <__aeabi_fmul>
 800a462:	4922      	ldr	r1, [pc, #136]	@ (800a4ec <__kernel_cosf+0xf0>)
 800a464:	f7f6 fb86 	bl	8000b74 <__addsf3>
 800a468:	4621      	mov	r1, r4
 800a46a:	f7f6 fc8b 	bl	8000d84 <__aeabi_fmul>
 800a46e:	4621      	mov	r1, r4
 800a470:	f7f6 fc88 	bl	8000d84 <__aeabi_fmul>
 800a474:	4641      	mov	r1, r8
 800a476:	4604      	mov	r4, r0
 800a478:	4630      	mov	r0, r6
 800a47a:	f7f6 fc83 	bl	8000d84 <__aeabi_fmul>
 800a47e:	4601      	mov	r1, r0
 800a480:	4620      	mov	r0, r4
 800a482:	f7f6 fb75 	bl	8000b70 <__aeabi_fsub>
 800a486:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f0 <__kernel_cosf+0xf4>)
 800a488:	4604      	mov	r4, r0
 800a48a:	429d      	cmp	r5, r3
 800a48c:	d80a      	bhi.n	800a4a4 <__kernel_cosf+0xa8>
 800a48e:	4601      	mov	r1, r0
 800a490:	4638      	mov	r0, r7
 800a492:	f7f6 fb6d 	bl	8000b70 <__aeabi_fsub>
 800a496:	4601      	mov	r1, r0
 800a498:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a49c:	f7f6 fb68 	bl	8000b70 <__aeabi_fsub>
 800a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a4:	4b13      	ldr	r3, [pc, #76]	@ (800a4f4 <__kernel_cosf+0xf8>)
 800a4a6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	bf8c      	ite	hi
 800a4ae:	4d12      	ldrhi	r5, [pc, #72]	@ (800a4f8 <__kernel_cosf+0xfc>)
 800a4b0:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800a4b4:	4629      	mov	r1, r5
 800a4b6:	f7f6 fb5b 	bl	8000b70 <__aeabi_fsub>
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	4606      	mov	r6, r0
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f7f6 fb56 	bl	8000b70 <__aeabi_fsub>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7f6 fb53 	bl	8000b70 <__aeabi_fsub>
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	e7e5      	b.n	800a49c <__kernel_cosf+0xa0>
 800a4d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a4d4:	e7e4      	b.n	800a4a0 <__kernel_cosf+0xa4>
 800a4d6:	bf00      	nop
 800a4d8:	ad47d74e 	.word	0xad47d74e
 800a4dc:	310f74f6 	.word	0x310f74f6
 800a4e0:	3493f27c 	.word	0x3493f27c
 800a4e4:	37d00d01 	.word	0x37d00d01
 800a4e8:	3ab60b61 	.word	0x3ab60b61
 800a4ec:	3d2aaaab 	.word	0x3d2aaaab
 800a4f0:	3e999999 	.word	0x3e999999
 800a4f4:	3f480000 	.word	0x3f480000
 800a4f8:	3e900000 	.word	0x3e900000

0800a4fc <__kernel_sinf>:
 800a4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a500:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a504:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a508:	4604      	mov	r4, r0
 800a50a:	460f      	mov	r7, r1
 800a50c:	4691      	mov	r9, r2
 800a50e:	d203      	bcs.n	800a518 <__kernel_sinf+0x1c>
 800a510:	f7f6 fe14 	bl	800113c <__aeabi_f2iz>
 800a514:	2800      	cmp	r0, #0
 800a516:	d035      	beq.n	800a584 <__kernel_sinf+0x88>
 800a518:	4621      	mov	r1, r4
 800a51a:	4620      	mov	r0, r4
 800a51c:	f7f6 fc32 	bl	8000d84 <__aeabi_fmul>
 800a520:	4605      	mov	r5, r0
 800a522:	4601      	mov	r1, r0
 800a524:	4620      	mov	r0, r4
 800a526:	f7f6 fc2d 	bl	8000d84 <__aeabi_fmul>
 800a52a:	4929      	ldr	r1, [pc, #164]	@ (800a5d0 <__kernel_sinf+0xd4>)
 800a52c:	4606      	mov	r6, r0
 800a52e:	4628      	mov	r0, r5
 800a530:	f7f6 fc28 	bl	8000d84 <__aeabi_fmul>
 800a534:	4927      	ldr	r1, [pc, #156]	@ (800a5d4 <__kernel_sinf+0xd8>)
 800a536:	f7f6 fb1b 	bl	8000b70 <__aeabi_fsub>
 800a53a:	4629      	mov	r1, r5
 800a53c:	f7f6 fc22 	bl	8000d84 <__aeabi_fmul>
 800a540:	4925      	ldr	r1, [pc, #148]	@ (800a5d8 <__kernel_sinf+0xdc>)
 800a542:	f7f6 fb17 	bl	8000b74 <__addsf3>
 800a546:	4629      	mov	r1, r5
 800a548:	f7f6 fc1c 	bl	8000d84 <__aeabi_fmul>
 800a54c:	4923      	ldr	r1, [pc, #140]	@ (800a5dc <__kernel_sinf+0xe0>)
 800a54e:	f7f6 fb0f 	bl	8000b70 <__aeabi_fsub>
 800a552:	4629      	mov	r1, r5
 800a554:	f7f6 fc16 	bl	8000d84 <__aeabi_fmul>
 800a558:	4921      	ldr	r1, [pc, #132]	@ (800a5e0 <__kernel_sinf+0xe4>)
 800a55a:	f7f6 fb0b 	bl	8000b74 <__addsf3>
 800a55e:	4680      	mov	r8, r0
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	d111      	bne.n	800a58a <__kernel_sinf+0x8e>
 800a566:	4601      	mov	r1, r0
 800a568:	4628      	mov	r0, r5
 800a56a:	f7f6 fc0b 	bl	8000d84 <__aeabi_fmul>
 800a56e:	491d      	ldr	r1, [pc, #116]	@ (800a5e4 <__kernel_sinf+0xe8>)
 800a570:	f7f6 fafe 	bl	8000b70 <__aeabi_fsub>
 800a574:	4631      	mov	r1, r6
 800a576:	f7f6 fc05 	bl	8000d84 <__aeabi_fmul>
 800a57a:	4601      	mov	r1, r0
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7f6 faf9 	bl	8000b74 <__addsf3>
 800a582:	4604      	mov	r4, r0
 800a584:	4620      	mov	r0, r4
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a58e:	4638      	mov	r0, r7
 800a590:	f7f6 fbf8 	bl	8000d84 <__aeabi_fmul>
 800a594:	4641      	mov	r1, r8
 800a596:	4681      	mov	r9, r0
 800a598:	4630      	mov	r0, r6
 800a59a:	f7f6 fbf3 	bl	8000d84 <__aeabi_fmul>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	4648      	mov	r0, r9
 800a5a2:	f7f6 fae5 	bl	8000b70 <__aeabi_fsub>
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f6 fbec 	bl	8000d84 <__aeabi_fmul>
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	f7f6 fadf 	bl	8000b70 <__aeabi_fsub>
 800a5b2:	490c      	ldr	r1, [pc, #48]	@ (800a5e4 <__kernel_sinf+0xe8>)
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f7f6 fbe4 	bl	8000d84 <__aeabi_fmul>
 800a5bc:	4601      	mov	r1, r0
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7f6 fad8 	bl	8000b74 <__addsf3>
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7f6 fad2 	bl	8000b70 <__aeabi_fsub>
 800a5cc:	e7d9      	b.n	800a582 <__kernel_sinf+0x86>
 800a5ce:	bf00      	nop
 800a5d0:	2f2ec9d3 	.word	0x2f2ec9d3
 800a5d4:	32d72f34 	.word	0x32d72f34
 800a5d8:	3638ef1b 	.word	0x3638ef1b
 800a5dc:	39500d01 	.word	0x39500d01
 800a5e0:	3c088889 	.word	0x3c088889
 800a5e4:	3e2aaaab 	.word	0x3e2aaaab

0800a5e8 <__ieee754_rem_pio2f>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	4aa4      	ldr	r2, [pc, #656]	@ (800a880 <__ieee754_rem_pio2f+0x298>)
 800a5ee:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800a5f2:	4590      	cmp	r8, r2
 800a5f4:	460c      	mov	r4, r1
 800a5f6:	4682      	mov	sl, r0
 800a5f8:	b087      	sub	sp, #28
 800a5fa:	d804      	bhi.n	800a606 <__ieee754_rem_pio2f+0x1e>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6008      	str	r0, [r1, #0]
 800a600:	604b      	str	r3, [r1, #4]
 800a602:	2500      	movs	r5, #0
 800a604:	e01d      	b.n	800a642 <__ieee754_rem_pio2f+0x5a>
 800a606:	4a9f      	ldr	r2, [pc, #636]	@ (800a884 <__ieee754_rem_pio2f+0x29c>)
 800a608:	4590      	cmp	r8, r2
 800a60a:	d84f      	bhi.n	800a6ac <__ieee754_rem_pio2f+0xc4>
 800a60c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800a610:	2800      	cmp	r0, #0
 800a612:	499d      	ldr	r1, [pc, #628]	@ (800a888 <__ieee754_rem_pio2f+0x2a0>)
 800a614:	4f9d      	ldr	r7, [pc, #628]	@ (800a88c <__ieee754_rem_pio2f+0x2a4>)
 800a616:	f025 050f 	bic.w	r5, r5, #15
 800a61a:	dd24      	ble.n	800a666 <__ieee754_rem_pio2f+0x7e>
 800a61c:	f7f6 faa8 	bl	8000b70 <__aeabi_fsub>
 800a620:	42bd      	cmp	r5, r7
 800a622:	4606      	mov	r6, r0
 800a624:	d011      	beq.n	800a64a <__ieee754_rem_pio2f+0x62>
 800a626:	499a      	ldr	r1, [pc, #616]	@ (800a890 <__ieee754_rem_pio2f+0x2a8>)
 800a628:	f7f6 faa2 	bl	8000b70 <__aeabi_fsub>
 800a62c:	4601      	mov	r1, r0
 800a62e:	4605      	mov	r5, r0
 800a630:	4630      	mov	r0, r6
 800a632:	f7f6 fa9d 	bl	8000b70 <__aeabi_fsub>
 800a636:	4996      	ldr	r1, [pc, #600]	@ (800a890 <__ieee754_rem_pio2f+0x2a8>)
 800a638:	f7f6 fa9a 	bl	8000b70 <__aeabi_fsub>
 800a63c:	6025      	str	r5, [r4, #0]
 800a63e:	2501      	movs	r5, #1
 800a640:	6060      	str	r0, [r4, #4]
 800a642:	4628      	mov	r0, r5
 800a644:	b007      	add	sp, #28
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64a:	4992      	ldr	r1, [pc, #584]	@ (800a894 <__ieee754_rem_pio2f+0x2ac>)
 800a64c:	f7f6 fa90 	bl	8000b70 <__aeabi_fsub>
 800a650:	4991      	ldr	r1, [pc, #580]	@ (800a898 <__ieee754_rem_pio2f+0x2b0>)
 800a652:	4606      	mov	r6, r0
 800a654:	f7f6 fa8c 	bl	8000b70 <__aeabi_fsub>
 800a658:	4601      	mov	r1, r0
 800a65a:	4605      	mov	r5, r0
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7f6 fa87 	bl	8000b70 <__aeabi_fsub>
 800a662:	498d      	ldr	r1, [pc, #564]	@ (800a898 <__ieee754_rem_pio2f+0x2b0>)
 800a664:	e7e8      	b.n	800a638 <__ieee754_rem_pio2f+0x50>
 800a666:	f7f6 fa85 	bl	8000b74 <__addsf3>
 800a66a:	42bd      	cmp	r5, r7
 800a66c:	4606      	mov	r6, r0
 800a66e:	d00f      	beq.n	800a690 <__ieee754_rem_pio2f+0xa8>
 800a670:	4987      	ldr	r1, [pc, #540]	@ (800a890 <__ieee754_rem_pio2f+0x2a8>)
 800a672:	f7f6 fa7f 	bl	8000b74 <__addsf3>
 800a676:	4601      	mov	r1, r0
 800a678:	4605      	mov	r5, r0
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7f6 fa78 	bl	8000b70 <__aeabi_fsub>
 800a680:	4983      	ldr	r1, [pc, #524]	@ (800a890 <__ieee754_rem_pio2f+0x2a8>)
 800a682:	f7f6 fa77 	bl	8000b74 <__addsf3>
 800a686:	6025      	str	r5, [r4, #0]
 800a688:	6060      	str	r0, [r4, #4]
 800a68a:	f04f 35ff 	mov.w	r5, #4294967295
 800a68e:	e7d8      	b.n	800a642 <__ieee754_rem_pio2f+0x5a>
 800a690:	4980      	ldr	r1, [pc, #512]	@ (800a894 <__ieee754_rem_pio2f+0x2ac>)
 800a692:	f7f6 fa6f 	bl	8000b74 <__addsf3>
 800a696:	4980      	ldr	r1, [pc, #512]	@ (800a898 <__ieee754_rem_pio2f+0x2b0>)
 800a698:	4606      	mov	r6, r0
 800a69a:	f7f6 fa6b 	bl	8000b74 <__addsf3>
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f7f6 fa64 	bl	8000b70 <__aeabi_fsub>
 800a6a8:	497b      	ldr	r1, [pc, #492]	@ (800a898 <__ieee754_rem_pio2f+0x2b0>)
 800a6aa:	e7ea      	b.n	800a682 <__ieee754_rem_pio2f+0x9a>
 800a6ac:	4a7b      	ldr	r2, [pc, #492]	@ (800a89c <__ieee754_rem_pio2f+0x2b4>)
 800a6ae:	4590      	cmp	r8, r2
 800a6b0:	f200 8095 	bhi.w	800a7de <__ieee754_rem_pio2f+0x1f6>
 800a6b4:	f000 f8fe 	bl	800a8b4 <fabsf>
 800a6b8:	4979      	ldr	r1, [pc, #484]	@ (800a8a0 <__ieee754_rem_pio2f+0x2b8>)
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	f7f6 fb62 	bl	8000d84 <__aeabi_fmul>
 800a6c0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800a6c4:	f7f6 fa56 	bl	8000b74 <__addsf3>
 800a6c8:	f7f6 fd38 	bl	800113c <__aeabi_f2iz>
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	f7f6 fb05 	bl	8000cdc <__aeabi_i2f>
 800a6d2:	496d      	ldr	r1, [pc, #436]	@ (800a888 <__ieee754_rem_pio2f+0x2a0>)
 800a6d4:	4681      	mov	r9, r0
 800a6d6:	f7f6 fb55 	bl	8000d84 <__aeabi_fmul>
 800a6da:	4601      	mov	r1, r0
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7f6 fa47 	bl	8000b70 <__aeabi_fsub>
 800a6e2:	496b      	ldr	r1, [pc, #428]	@ (800a890 <__ieee754_rem_pio2f+0x2a8>)
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	f7f6 fb4c 	bl	8000d84 <__aeabi_fmul>
 800a6ec:	2d1f      	cmp	r5, #31
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	dc0e      	bgt.n	800a710 <__ieee754_rem_pio2f+0x128>
 800a6f2:	4a6c      	ldr	r2, [pc, #432]	@ (800a8a4 <__ieee754_rem_pio2f+0x2bc>)
 800a6f4:	1e69      	subs	r1, r5, #1
 800a6f6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6fa:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800a6fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a702:	4293      	cmp	r3, r2
 800a704:	d004      	beq.n	800a710 <__ieee754_rem_pio2f+0x128>
 800a706:	4631      	mov	r1, r6
 800a708:	4638      	mov	r0, r7
 800a70a:	f7f6 fa31 	bl	8000b70 <__aeabi_fsub>
 800a70e:	e00b      	b.n	800a728 <__ieee754_rem_pio2f+0x140>
 800a710:	4631      	mov	r1, r6
 800a712:	4638      	mov	r0, r7
 800a714:	f7f6 fa2c 	bl	8000b70 <__aeabi_fsub>
 800a718:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a71c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800a720:	2b08      	cmp	r3, #8
 800a722:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800a726:	dc01      	bgt.n	800a72c <__ieee754_rem_pio2f+0x144>
 800a728:	6020      	str	r0, [r4, #0]
 800a72a:	e026      	b.n	800a77a <__ieee754_rem_pio2f+0x192>
 800a72c:	4959      	ldr	r1, [pc, #356]	@ (800a894 <__ieee754_rem_pio2f+0x2ac>)
 800a72e:	4648      	mov	r0, r9
 800a730:	f7f6 fb28 	bl	8000d84 <__aeabi_fmul>
 800a734:	4606      	mov	r6, r0
 800a736:	4601      	mov	r1, r0
 800a738:	4638      	mov	r0, r7
 800a73a:	f7f6 fa19 	bl	8000b70 <__aeabi_fsub>
 800a73e:	4601      	mov	r1, r0
 800a740:	4680      	mov	r8, r0
 800a742:	4638      	mov	r0, r7
 800a744:	f7f6 fa14 	bl	8000b70 <__aeabi_fsub>
 800a748:	4631      	mov	r1, r6
 800a74a:	f7f6 fa11 	bl	8000b70 <__aeabi_fsub>
 800a74e:	4606      	mov	r6, r0
 800a750:	4951      	ldr	r1, [pc, #324]	@ (800a898 <__ieee754_rem_pio2f+0x2b0>)
 800a752:	4648      	mov	r0, r9
 800a754:	f7f6 fb16 	bl	8000d84 <__aeabi_fmul>
 800a758:	4631      	mov	r1, r6
 800a75a:	f7f6 fa09 	bl	8000b70 <__aeabi_fsub>
 800a75e:	4601      	mov	r1, r0
 800a760:	4606      	mov	r6, r0
 800a762:	4640      	mov	r0, r8
 800a764:	f7f6 fa04 	bl	8000b70 <__aeabi_fsub>
 800a768:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a76c:	ebab 0b03 	sub.w	fp, fp, r3
 800a770:	f1bb 0f19 	cmp.w	fp, #25
 800a774:	dc18      	bgt.n	800a7a8 <__ieee754_rem_pio2f+0x1c0>
 800a776:	4647      	mov	r7, r8
 800a778:	6020      	str	r0, [r4, #0]
 800a77a:	f8d4 8000 	ldr.w	r8, [r4]
 800a77e:	4638      	mov	r0, r7
 800a780:	4641      	mov	r1, r8
 800a782:	f7f6 f9f5 	bl	8000b70 <__aeabi_fsub>
 800a786:	4631      	mov	r1, r6
 800a788:	f7f6 f9f2 	bl	8000b70 <__aeabi_fsub>
 800a78c:	f1ba 0f00 	cmp.w	sl, #0
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	f6bf af56 	bge.w	800a642 <__ieee754_rem_pio2f+0x5a>
 800a796:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800a79a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800a79e:	f8c4 8000 	str.w	r8, [r4]
 800a7a2:	6060      	str	r0, [r4, #4]
 800a7a4:	426d      	negs	r5, r5
 800a7a6:	e74c      	b.n	800a642 <__ieee754_rem_pio2f+0x5a>
 800a7a8:	493f      	ldr	r1, [pc, #252]	@ (800a8a8 <__ieee754_rem_pio2f+0x2c0>)
 800a7aa:	4648      	mov	r0, r9
 800a7ac:	f7f6 faea 	bl	8000d84 <__aeabi_fmul>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	f7f6 f9db 	bl	8000b70 <__aeabi_fsub>
 800a7ba:	4601      	mov	r1, r0
 800a7bc:	4607      	mov	r7, r0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	f7f6 f9d6 	bl	8000b70 <__aeabi_fsub>
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	f7f6 f9d3 	bl	8000b70 <__aeabi_fsub>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	4937      	ldr	r1, [pc, #220]	@ (800a8ac <__ieee754_rem_pio2f+0x2c4>)
 800a7ce:	4648      	mov	r0, r9
 800a7d0:	f7f6 fad8 	bl	8000d84 <__aeabi_fmul>
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	f7f6 f9cb 	bl	8000b70 <__aeabi_fsub>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	e793      	b.n	800a706 <__ieee754_rem_pio2f+0x11e>
 800a7de:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800a7e2:	d305      	bcc.n	800a7f0 <__ieee754_rem_pio2f+0x208>
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	f7f6 f9c3 	bl	8000b70 <__aeabi_fsub>
 800a7ea:	6060      	str	r0, [r4, #4]
 800a7ec:	6020      	str	r0, [r4, #0]
 800a7ee:	e708      	b.n	800a602 <__ieee754_rem_pio2f+0x1a>
 800a7f0:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800a7f4:	3e86      	subs	r6, #134	@ 0x86
 800a7f6:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	f7f6 fc9e 	bl	800113c <__aeabi_f2iz>
 800a800:	f7f6 fa6c 	bl	8000cdc <__aeabi_i2f>
 800a804:	4601      	mov	r1, r0
 800a806:	9003      	str	r0, [sp, #12]
 800a808:	4640      	mov	r0, r8
 800a80a:	f7f6 f9b1 	bl	8000b70 <__aeabi_fsub>
 800a80e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a812:	f7f6 fab7 	bl	8000d84 <__aeabi_fmul>
 800a816:	4607      	mov	r7, r0
 800a818:	f7f6 fc90 	bl	800113c <__aeabi_f2iz>
 800a81c:	f7f6 fa5e 	bl	8000cdc <__aeabi_i2f>
 800a820:	4601      	mov	r1, r0
 800a822:	9004      	str	r0, [sp, #16]
 800a824:	4605      	mov	r5, r0
 800a826:	4638      	mov	r0, r7
 800a828:	f7f6 f9a2 	bl	8000b70 <__aeabi_fsub>
 800a82c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800a830:	f7f6 faa8 	bl	8000d84 <__aeabi_fmul>
 800a834:	2100      	movs	r1, #0
 800a836:	9005      	str	r0, [sp, #20]
 800a838:	f7f6 fc38 	bl	80010ac <__aeabi_fcmpeq>
 800a83c:	b1f0      	cbz	r0, 800a87c <__ieee754_rem_pio2f+0x294>
 800a83e:	2100      	movs	r1, #0
 800a840:	4628      	mov	r0, r5
 800a842:	f7f6 fc33 	bl	80010ac <__aeabi_fcmpeq>
 800a846:	2800      	cmp	r0, #0
 800a848:	bf14      	ite	ne
 800a84a:	2301      	movne	r3, #1
 800a84c:	2302      	moveq	r3, #2
 800a84e:	4a18      	ldr	r2, [pc, #96]	@ (800a8b0 <__ieee754_rem_pio2f+0x2c8>)
 800a850:	4621      	mov	r1, r4
 800a852:	9201      	str	r2, [sp, #4]
 800a854:	2202      	movs	r2, #2
 800a856:	a803      	add	r0, sp, #12
 800a858:	9200      	str	r2, [sp, #0]
 800a85a:	4632      	mov	r2, r6
 800a85c:	f000 f82e 	bl	800a8bc <__kernel_rem_pio2f>
 800a860:	f1ba 0f00 	cmp.w	sl, #0
 800a864:	4605      	mov	r5, r0
 800a866:	f6bf aeec 	bge.w	800a642 <__ieee754_rem_pio2f+0x5a>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a878:	6063      	str	r3, [r4, #4]
 800a87a:	e793      	b.n	800a7a4 <__ieee754_rem_pio2f+0x1bc>
 800a87c:	2303      	movs	r3, #3
 800a87e:	e7e6      	b.n	800a84e <__ieee754_rem_pio2f+0x266>
 800a880:	3f490fd8 	.word	0x3f490fd8
 800a884:	4016cbe3 	.word	0x4016cbe3
 800a888:	3fc90f80 	.word	0x3fc90f80
 800a88c:	3fc90fd0 	.word	0x3fc90fd0
 800a890:	37354443 	.word	0x37354443
 800a894:	37354400 	.word	0x37354400
 800a898:	2e85a308 	.word	0x2e85a308
 800a89c:	43490f80 	.word	0x43490f80
 800a8a0:	3f22f984 	.word	0x3f22f984
 800a8a4:	0800b424 	.word	0x0800b424
 800a8a8:	2e85a300 	.word	0x2e85a300
 800a8ac:	248d3132 	.word	0x248d3132
 800a8b0:	0800b4a4 	.word	0x0800b4a4

0800a8b4 <fabsf>:
 800a8b4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a8b8:	4770      	bx	lr
	...

0800a8bc <__kernel_rem_pio2f>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b0db      	sub	sp, #364	@ 0x16c
 800a8c2:	9202      	str	r2, [sp, #8]
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800a8c8:	4bad      	ldr	r3, [pc, #692]	@ (800ab80 <__kernel_rem_pio2f+0x2c4>)
 800a8ca:	9005      	str	r0, [sp, #20]
 800a8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d0:	9100      	str	r1, [sp, #0]
 800a8d2:	9301      	str	r3, [sp, #4]
 800a8d4:	9b04      	ldr	r3, [sp, #16]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	9303      	str	r3, [sp, #12]
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	1d1a      	adds	r2, r3, #4
 800a8de:	f2c0 8099 	blt.w	800aa14 <__kernel_rem_pio2f+0x158>
 800a8e2:	1edc      	subs	r4, r3, #3
 800a8e4:	bf48      	it	mi
 800a8e6:	1d1c      	addmi	r4, r3, #4
 800a8e8:	10e4      	asrs	r4, r4, #3
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	f04f 0b00 	mov.w	fp, #0
 800a8f0:	1c67      	adds	r7, r4, #1
 800a8f2:	00fb      	lsls	r3, r7, #3
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	9a03      	ldr	r2, [sp, #12]
 800a8fa:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	eba4 0802 	sub.w	r8, r4, r2
 800a904:	eb03 0902 	add.w	r9, r3, r2
 800a908:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a90a:	ae1e      	add	r6, sp, #120	@ 0x78
 800a90c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800a910:	454d      	cmp	r5, r9
 800a912:	f340 8081 	ble.w	800aa18 <__kernel_rem_pio2f+0x15c>
 800a916:	9a04      	ldr	r2, [sp, #16]
 800a918:	ab1e      	add	r3, sp, #120	@ 0x78
 800a91a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800a91e:	f04f 0900 	mov.w	r9, #0
 800a922:	2300      	movs	r3, #0
 800a924:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	4591      	cmp	r9, r2
 800a92c:	f340 809c 	ble.w	800aa68 <__kernel_rem_pio2f+0x1ac>
 800a930:	4613      	mov	r3, r2
 800a932:	aa0a      	add	r2, sp, #40	@ 0x28
 800a934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a938:	9308      	str	r3, [sp, #32]
 800a93a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800a93c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a940:	9c01      	ldr	r4, [sp, #4]
 800a942:	9307      	str	r3, [sp, #28]
 800a944:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800a948:	4646      	mov	r6, r8
 800a94a:	4625      	mov	r5, r4
 800a94c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800a950:	ab5a      	add	r3, sp, #360	@ 0x168
 800a952:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a956:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800a95a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800a95e:	2d00      	cmp	r5, #0
 800a960:	f300 8087 	bgt.w	800aa72 <__kernel_rem_pio2f+0x1b6>
 800a964:	4639      	mov	r1, r7
 800a966:	4658      	mov	r0, fp
 800a968:	f000 fa48 	bl	800adfc <scalbnf>
 800a96c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800a970:	4605      	mov	r5, r0
 800a972:	f7f6 fa07 	bl	8000d84 <__aeabi_fmul>
 800a976:	f000 fa8d 	bl	800ae94 <floorf>
 800a97a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800a97e:	f7f6 fa01 	bl	8000d84 <__aeabi_fmul>
 800a982:	4601      	mov	r1, r0
 800a984:	4628      	mov	r0, r5
 800a986:	f7f6 f8f3 	bl	8000b70 <__aeabi_fsub>
 800a98a:	4605      	mov	r5, r0
 800a98c:	f7f6 fbd6 	bl	800113c <__aeabi_f2iz>
 800a990:	4606      	mov	r6, r0
 800a992:	f7f6 f9a3 	bl	8000cdc <__aeabi_i2f>
 800a996:	4601      	mov	r1, r0
 800a998:	4628      	mov	r0, r5
 800a99a:	f7f6 f8e9 	bl	8000b70 <__aeabi_fsub>
 800a99e:	2f00      	cmp	r7, #0
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	f340 8083 	ble.w	800aaac <__kernel_rem_pio2f+0x1f0>
 800a9a6:	1e62      	subs	r2, r4, #1
 800a9a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9aa:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a9ae:	f1c7 0108 	rsb	r1, r7, #8
 800a9b2:	fa45 f301 	asr.w	r3, r5, r1
 800a9b6:	441e      	add	r6, r3
 800a9b8:	408b      	lsls	r3, r1
 800a9ba:	1aed      	subs	r5, r5, r3
 800a9bc:	ab0a      	add	r3, sp, #40	@ 0x28
 800a9be:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a9c2:	f1c7 0307 	rsb	r3, r7, #7
 800a9c6:	411d      	asrs	r5, r3
 800a9c8:	2d00      	cmp	r5, #0
 800a9ca:	dd7c      	ble.n	800aac6 <__kernel_rem_pio2f+0x20a>
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4692      	mov	sl, r2
 800a9d0:	3601      	adds	r6, #1
 800a9d2:	4294      	cmp	r4, r2
 800a9d4:	f300 80ac 	bgt.w	800ab30 <__kernel_rem_pio2f+0x274>
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	dd05      	ble.n	800a9e8 <__kernel_rem_pio2f+0x12c>
 800a9dc:	2f01      	cmp	r7, #1
 800a9de:	f000 80b8 	beq.w	800ab52 <__kernel_rem_pio2f+0x296>
 800a9e2:	2f02      	cmp	r7, #2
 800a9e4:	f000 80bf 	beq.w	800ab66 <__kernel_rem_pio2f+0x2aa>
 800a9e8:	2d02      	cmp	r5, #2
 800a9ea:	d16c      	bne.n	800aac6 <__kernel_rem_pio2f+0x20a>
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800a9f2:	f7f6 f8bd 	bl	8000b70 <__aeabi_fsub>
 800a9f6:	4681      	mov	r9, r0
 800a9f8:	f1ba 0f00 	cmp.w	sl, #0
 800a9fc:	d063      	beq.n	800aac6 <__kernel_rem_pio2f+0x20a>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800aa04:	f000 f9fa 	bl	800adfc <scalbnf>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4648      	mov	r0, r9
 800aa0c:	f7f6 f8b0 	bl	8000b70 <__aeabi_fsub>
 800aa10:	4681      	mov	r9, r0
 800aa12:	e058      	b.n	800aac6 <__kernel_rem_pio2f+0x20a>
 800aa14:	2400      	movs	r4, #0
 800aa16:	e768      	b.n	800a8ea <__kernel_rem_pio2f+0x2e>
 800aa18:	eb18 0f05 	cmn.w	r8, r5
 800aa1c:	d407      	bmi.n	800aa2e <__kernel_rem_pio2f+0x172>
 800aa1e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800aa22:	f7f6 f95b 	bl	8000cdc <__aeabi_i2f>
 800aa26:	f846 0b04 	str.w	r0, [r6], #4
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	e770      	b.n	800a910 <__kernel_rem_pio2f+0x54>
 800aa2e:	4658      	mov	r0, fp
 800aa30:	e7f9      	b.n	800aa26 <__kernel_rem_pio2f+0x16a>
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	9b05      	ldr	r3, [sp, #20]
 800aa36:	f8da 1000 	ldr.w	r1, [sl]
 800aa3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aa3e:	f7f6 f9a1 	bl	8000d84 <__aeabi_fmul>
 800aa42:	4601      	mov	r1, r0
 800aa44:	4630      	mov	r0, r6
 800aa46:	f7f6 f895 	bl	8000b74 <__addsf3>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	9b07      	ldr	r3, [sp, #28]
 800aa4e:	f108 0801 	add.w	r8, r8, #1
 800aa52:	9a03      	ldr	r2, [sp, #12]
 800aa54:	f1aa 0a04 	sub.w	sl, sl, #4
 800aa58:	4590      	cmp	r8, r2
 800aa5a:	ddea      	ble.n	800aa32 <__kernel_rem_pio2f+0x176>
 800aa5c:	f84b 6b04 	str.w	r6, [fp], #4
 800aa60:	f109 0901 	add.w	r9, r9, #1
 800aa64:	3504      	adds	r5, #4
 800aa66:	e75f      	b.n	800a928 <__kernel_rem_pio2f+0x6c>
 800aa68:	46aa      	mov	sl, r5
 800aa6a:	461e      	mov	r6, r3
 800aa6c:	f04f 0800 	mov.w	r8, #0
 800aa70:	e7ef      	b.n	800aa52 <__kernel_rem_pio2f+0x196>
 800aa72:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800aa76:	4658      	mov	r0, fp
 800aa78:	f7f6 f984 	bl	8000d84 <__aeabi_fmul>
 800aa7c:	f7f6 fb5e 	bl	800113c <__aeabi_f2iz>
 800aa80:	f7f6 f92c 	bl	8000cdc <__aeabi_i2f>
 800aa84:	4649      	mov	r1, r9
 800aa86:	9009      	str	r0, [sp, #36]	@ 0x24
 800aa88:	f7f6 f97c 	bl	8000d84 <__aeabi_fmul>
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	4658      	mov	r0, fp
 800aa90:	f7f6 f86e 	bl	8000b70 <__aeabi_fsub>
 800aa94:	f7f6 fb52 	bl	800113c <__aeabi_f2iz>
 800aa98:	3d01      	subs	r5, #1
 800aa9a:	f846 0b04 	str.w	r0, [r6], #4
 800aa9e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800aaa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaa4:	f7f6 f866 	bl	8000b74 <__addsf3>
 800aaa8:	4683      	mov	fp, r0
 800aaaa:	e758      	b.n	800a95e <__kernel_rem_pio2f+0xa2>
 800aaac:	d105      	bne.n	800aaba <__kernel_rem_pio2f+0x1fe>
 800aaae:	1e63      	subs	r3, r4, #1
 800aab0:	aa0a      	add	r2, sp, #40	@ 0x28
 800aab2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800aab6:	11ed      	asrs	r5, r5, #7
 800aab8:	e786      	b.n	800a9c8 <__kernel_rem_pio2f+0x10c>
 800aaba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800aabe:	f7f6 fb13 	bl	80010e8 <__aeabi_fcmpge>
 800aac2:	4605      	mov	r5, r0
 800aac4:	bb90      	cbnz	r0, 800ab2c <__kernel_rem_pio2f+0x270>
 800aac6:	2100      	movs	r1, #0
 800aac8:	4648      	mov	r0, r9
 800aaca:	f7f6 faef 	bl	80010ac <__aeabi_fcmpeq>
 800aace:	2800      	cmp	r0, #0
 800aad0:	f000 8090 	beq.w	800abf4 <__kernel_rem_pio2f+0x338>
 800aad4:	2200      	movs	r2, #0
 800aad6:	1e63      	subs	r3, r4, #1
 800aad8:	9901      	ldr	r1, [sp, #4]
 800aada:	428b      	cmp	r3, r1
 800aadc:	da4a      	bge.n	800ab74 <__kernel_rem_pio2f+0x2b8>
 800aade:	2a00      	cmp	r2, #0
 800aae0:	d076      	beq.n	800abd0 <__kernel_rem_pio2f+0x314>
 800aae2:	3c01      	subs	r4, #1
 800aae4:	ab0a      	add	r3, sp, #40	@ 0x28
 800aae6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aaea:	3f08      	subs	r7, #8
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0f8      	beq.n	800aae2 <__kernel_rem_pio2f+0x226>
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800aaf6:	f000 f981 	bl	800adfc <scalbnf>
 800aafa:	46a2      	mov	sl, r4
 800aafc:	4607      	mov	r7, r0
 800aafe:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800ab02:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800ab06:	f1ba 0f00 	cmp.w	sl, #0
 800ab0a:	f280 80a1 	bge.w	800ac50 <__kernel_rem_pio2f+0x394>
 800ab0e:	4627      	mov	r7, r4
 800ab10:	2200      	movs	r2, #0
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	f2c0 80cb 	blt.w	800acae <__kernel_rem_pio2f+0x3f2>
 800ab18:	a946      	add	r1, sp, #280	@ 0x118
 800ab1a:	4690      	mov	r8, r2
 800ab1c:	f04f 0a00 	mov.w	sl, #0
 800ab20:	4b18      	ldr	r3, [pc, #96]	@ (800ab84 <__kernel_rem_pio2f+0x2c8>)
 800ab22:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800ab26:	eba4 0907 	sub.w	r9, r4, r7
 800ab2a:	e0b4      	b.n	800ac96 <__kernel_rem_pio2f+0x3da>
 800ab2c:	2502      	movs	r5, #2
 800ab2e:	e74d      	b.n	800a9cc <__kernel_rem_pio2f+0x110>
 800ab30:	f858 3b04 	ldr.w	r3, [r8], #4
 800ab34:	f1ba 0f00 	cmp.w	sl, #0
 800ab38:	d108      	bne.n	800ab4c <__kernel_rem_pio2f+0x290>
 800ab3a:	b123      	cbz	r3, 800ab46 <__kernel_rem_pio2f+0x28a>
 800ab3c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800ab40:	f848 3c04 	str.w	r3, [r8, #-4]
 800ab44:	2301      	movs	r3, #1
 800ab46:	469a      	mov	sl, r3
 800ab48:	3201      	adds	r2, #1
 800ab4a:	e742      	b.n	800a9d2 <__kernel_rem_pio2f+0x116>
 800ab4c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800ab50:	e7f6      	b.n	800ab40 <__kernel_rem_pio2f+0x284>
 800ab52:	1e62      	subs	r2, r4, #1
 800ab54:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5e:	a90a      	add	r1, sp, #40	@ 0x28
 800ab60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab64:	e740      	b.n	800a9e8 <__kernel_rem_pio2f+0x12c>
 800ab66:	1e62      	subs	r2, r4, #1
 800ab68:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab72:	e7f4      	b.n	800ab5e <__kernel_rem_pio2f+0x2a2>
 800ab74:	a90a      	add	r1, sp, #40	@ 0x28
 800ab76:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	e7ab      	b.n	800aad8 <__kernel_rem_pio2f+0x21c>
 800ab80:	0800b7e8 	.word	0x0800b7e8
 800ab84:	0800b7bc 	.word	0x0800b7bc
 800ab88:	3301      	adds	r3, #1
 800ab8a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab8e:	2900      	cmp	r1, #0
 800ab90:	d0fa      	beq.n	800ab88 <__kernel_rem_pio2f+0x2cc>
 800ab92:	9a04      	ldr	r2, [sp, #16]
 800ab94:	a91e      	add	r1, sp, #120	@ 0x78
 800ab96:	18a2      	adds	r2, r4, r2
 800ab98:	1c66      	adds	r6, r4, #1
 800ab9a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800ab9e:	441c      	add	r4, r3
 800aba0:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800aba4:	42b4      	cmp	r4, r6
 800aba6:	f6ff aecd 	blt.w	800a944 <__kernel_rem_pio2f+0x88>
 800abaa:	9b07      	ldr	r3, [sp, #28]
 800abac:	46ab      	mov	fp, r5
 800abae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800abb2:	f7f6 f893 	bl	8000cdc <__aeabi_i2f>
 800abb6:	f04f 0a00 	mov.w	sl, #0
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	6028      	str	r0, [r5, #0]
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	459a      	cmp	sl, r3
 800abc4:	dd07      	ble.n	800abd6 <__kernel_rem_pio2f+0x31a>
 800abc6:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800abca:	3504      	adds	r5, #4
 800abcc:	3601      	adds	r6, #1
 800abce:	e7e9      	b.n	800aba4 <__kernel_rem_pio2f+0x2e8>
 800abd0:	2301      	movs	r3, #1
 800abd2:	9a08      	ldr	r2, [sp, #32]
 800abd4:	e7d9      	b.n	800ab8a <__kernel_rem_pio2f+0x2ce>
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	f85b 0904 	ldr.w	r0, [fp], #-4
 800abdc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800abe0:	f7f6 f8d0 	bl	8000d84 <__aeabi_fmul>
 800abe4:	4601      	mov	r1, r0
 800abe6:	4640      	mov	r0, r8
 800abe8:	f7f5 ffc4 	bl	8000b74 <__addsf3>
 800abec:	f10a 0a01 	add.w	sl, sl, #1
 800abf0:	4680      	mov	r8, r0
 800abf2:	e7e5      	b.n	800abc0 <__kernel_rem_pio2f+0x304>
 800abf4:	9b06      	ldr	r3, [sp, #24]
 800abf6:	9a02      	ldr	r2, [sp, #8]
 800abf8:	4648      	mov	r0, r9
 800abfa:	1a99      	subs	r1, r3, r2
 800abfc:	f000 f8fe 	bl	800adfc <scalbnf>
 800ac00:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ac04:	4680      	mov	r8, r0
 800ac06:	f7f6 fa6f 	bl	80010e8 <__aeabi_fcmpge>
 800ac0a:	b1f8      	cbz	r0, 800ac4c <__kernel_rem_pio2f+0x390>
 800ac0c:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800ac10:	4640      	mov	r0, r8
 800ac12:	f7f6 f8b7 	bl	8000d84 <__aeabi_fmul>
 800ac16:	f7f6 fa91 	bl	800113c <__aeabi_f2iz>
 800ac1a:	f7f6 f85f 	bl	8000cdc <__aeabi_i2f>
 800ac1e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800ac22:	4681      	mov	r9, r0
 800ac24:	f7f6 f8ae 	bl	8000d84 <__aeabi_fmul>
 800ac28:	4601      	mov	r1, r0
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7f5 ffa0 	bl	8000b70 <__aeabi_fsub>
 800ac30:	f7f6 fa84 	bl	800113c <__aeabi_f2iz>
 800ac34:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac3a:	4648      	mov	r0, r9
 800ac3c:	3401      	adds	r4, #1
 800ac3e:	3708      	adds	r7, #8
 800ac40:	f7f6 fa7c 	bl	800113c <__aeabi_f2iz>
 800ac44:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac4a:	e751      	b.n	800aaf0 <__kernel_rem_pio2f+0x234>
 800ac4c:	4640      	mov	r0, r8
 800ac4e:	e7f7      	b.n	800ac40 <__kernel_rem_pio2f+0x384>
 800ac50:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac52:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac56:	f7f6 f841 	bl	8000cdc <__aeabi_i2f>
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f6 f892 	bl	8000d84 <__aeabi_fmul>
 800ac60:	4649      	mov	r1, r9
 800ac62:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800ac66:	4638      	mov	r0, r7
 800ac68:	f7f6 f88c 	bl	8000d84 <__aeabi_fmul>
 800ac6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac70:	4607      	mov	r7, r0
 800ac72:	e748      	b.n	800ab06 <__kernel_rem_pio2f+0x24a>
 800ac74:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac78:	f85b 1b04 	ldr.w	r1, [fp], #4
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	9302      	str	r3, [sp, #8]
 800ac80:	f7f6 f880 	bl	8000d84 <__aeabi_fmul>
 800ac84:	4601      	mov	r1, r0
 800ac86:	4640      	mov	r0, r8
 800ac88:	f7f5 ff74 	bl	8000b74 <__addsf3>
 800ac8c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac90:	4680      	mov	r8, r0
 800ac92:	f10a 0a01 	add.w	sl, sl, #1
 800ac96:	9901      	ldr	r1, [sp, #4]
 800ac98:	458a      	cmp	sl, r1
 800ac9a:	dc01      	bgt.n	800aca0 <__kernel_rem_pio2f+0x3e4>
 800ac9c:	45d1      	cmp	r9, sl
 800ac9e:	dae9      	bge.n	800ac74 <__kernel_rem_pio2f+0x3b8>
 800aca0:	ab5a      	add	r3, sp, #360	@ 0x168
 800aca2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800aca6:	f849 8ca0 	str.w	r8, [r9, #-160]
 800acaa:	3f01      	subs	r7, #1
 800acac:	e731      	b.n	800ab12 <__kernel_rem_pio2f+0x256>
 800acae:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	dc07      	bgt.n	800acc4 <__kernel_rem_pio2f+0x408>
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dc4e      	bgt.n	800ad56 <__kernel_rem_pio2f+0x49a>
 800acb8:	d02e      	beq.n	800ad18 <__kernel_rem_pio2f+0x45c>
 800acba:	f006 0007 	and.w	r0, r6, #7
 800acbe:	b05b      	add	sp, #364	@ 0x16c
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d1f7      	bne.n	800acba <__kernel_rem_pio2f+0x3fe>
 800acca:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800acce:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800acd2:	46b8      	mov	r8, r7
 800acd4:	46a2      	mov	sl, r4
 800acd6:	f1ba 0f00 	cmp.w	sl, #0
 800acda:	dc49      	bgt.n	800ad70 <__kernel_rem_pio2f+0x4b4>
 800acdc:	46a1      	mov	r9, r4
 800acde:	f1b9 0f01 	cmp.w	r9, #1
 800ace2:	dc60      	bgt.n	800ada6 <__kernel_rem_pio2f+0x4ea>
 800ace4:	2000      	movs	r0, #0
 800ace6:	2c01      	cmp	r4, #1
 800ace8:	dc76      	bgt.n	800add8 <__kernel_rem_pio2f+0x51c>
 800acea:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800acec:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800acee:	2d00      	cmp	r5, #0
 800acf0:	d178      	bne.n	800ade4 <__kernel_rem_pio2f+0x528>
 800acf2:	9900      	ldr	r1, [sp, #0]
 800acf4:	600a      	str	r2, [r1, #0]
 800acf6:	460a      	mov	r2, r1
 800acf8:	604b      	str	r3, [r1, #4]
 800acfa:	6090      	str	r0, [r2, #8]
 800acfc:	e7dd      	b.n	800acba <__kernel_rem_pio2f+0x3fe>
 800acfe:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800ad02:	f7f5 ff37 	bl	8000b74 <__addsf3>
 800ad06:	3c01      	subs	r4, #1
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	daf8      	bge.n	800acfe <__kernel_rem_pio2f+0x442>
 800ad0c:	b10d      	cbz	r5, 800ad12 <__kernel_rem_pio2f+0x456>
 800ad0e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	6018      	str	r0, [r3, #0]
 800ad16:	e7d0      	b.n	800acba <__kernel_rem_pio2f+0x3fe>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	af32      	add	r7, sp, #200	@ 0xc8
 800ad1c:	e7f4      	b.n	800ad08 <__kernel_rem_pio2f+0x44c>
 800ad1e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800ad22:	f7f5 ff27 	bl	8000b74 <__addsf3>
 800ad26:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad2a:	f1b8 0f00 	cmp.w	r8, #0
 800ad2e:	daf6      	bge.n	800ad1e <__kernel_rem_pio2f+0x462>
 800ad30:	b1ad      	cbz	r5, 800ad5e <__kernel_rem_pio2f+0x4a2>
 800ad32:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800ad36:	9a00      	ldr	r2, [sp, #0]
 800ad38:	4601      	mov	r1, r0
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ad3e:	f7f5 ff17 	bl	8000b70 <__aeabi_fsub>
 800ad42:	f04f 0801 	mov.w	r8, #1
 800ad46:	4544      	cmp	r4, r8
 800ad48:	da0b      	bge.n	800ad62 <__kernel_rem_pio2f+0x4a6>
 800ad4a:	b10d      	cbz	r5, 800ad50 <__kernel_rem_pio2f+0x494>
 800ad4c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800ad50:	9b00      	ldr	r3, [sp, #0]
 800ad52:	6058      	str	r0, [r3, #4]
 800ad54:	e7b1      	b.n	800acba <__kernel_rem_pio2f+0x3fe>
 800ad56:	46a0      	mov	r8, r4
 800ad58:	2000      	movs	r0, #0
 800ad5a:	af32      	add	r7, sp, #200	@ 0xc8
 800ad5c:	e7e5      	b.n	800ad2a <__kernel_rem_pio2f+0x46e>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	e7e9      	b.n	800ad36 <__kernel_rem_pio2f+0x47a>
 800ad62:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ad66:	f7f5 ff05 	bl	8000b74 <__addsf3>
 800ad6a:	f108 0801 	add.w	r8, r8, #1
 800ad6e:	e7ea      	b.n	800ad46 <__kernel_rem_pio2f+0x48a>
 800ad70:	f8d8 3000 	ldr.w	r3, [r8]
 800ad74:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	9302      	str	r3, [sp, #8]
 800ad7e:	9201      	str	r2, [sp, #4]
 800ad80:	f7f5 fef8 	bl	8000b74 <__addsf3>
 800ad84:	9a01      	ldr	r2, [sp, #4]
 800ad86:	4601      	mov	r1, r0
 800ad88:	4681      	mov	r9, r0
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7f5 fef0 	bl	8000b70 <__aeabi_fsub>
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad96:	4619      	mov	r1, r3
 800ad98:	f7f5 feec 	bl	8000b74 <__addsf3>
 800ad9c:	f848 0904 	str.w	r0, [r8], #-4
 800ada0:	f8c8 9000 	str.w	r9, [r8]
 800ada4:	e797      	b.n	800acd6 <__kernel_rem_pio2f+0x41a>
 800ada6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800adaa:	f8d7 a000 	ldr.w	sl, [r7]
 800adae:	4618      	mov	r0, r3
 800adb0:	4651      	mov	r1, sl
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	f7f5 fede 	bl	8000b74 <__addsf3>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	4601      	mov	r1, r0
 800adbc:	4680      	mov	r8, r0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f5 fed6 	bl	8000b70 <__aeabi_fsub>
 800adc4:	4651      	mov	r1, sl
 800adc6:	f7f5 fed5 	bl	8000b74 <__addsf3>
 800adca:	f847 0904 	str.w	r0, [r7], #-4
 800adce:	f109 39ff 	add.w	r9, r9, #4294967295
 800add2:	f8c7 8000 	str.w	r8, [r7]
 800add6:	e782      	b.n	800acde <__kernel_rem_pio2f+0x422>
 800add8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800addc:	f7f5 feca 	bl	8000b74 <__addsf3>
 800ade0:	3c01      	subs	r4, #1
 800ade2:	e780      	b.n	800ace6 <__kernel_rem_pio2f+0x42a>
 800ade4:	9900      	ldr	r1, [sp, #0]
 800ade6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800adea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800adee:	600a      	str	r2, [r1, #0]
 800adf0:	604b      	str	r3, [r1, #4]
 800adf2:	460a      	mov	r2, r1
 800adf4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800adf8:	e77f      	b.n	800acfa <__kernel_rem_pio2f+0x43e>
 800adfa:	bf00      	nop

0800adfc <scalbnf>:
 800adfc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4603      	mov	r3, r0
 800ae04:	460d      	mov	r5, r1
 800ae06:	4604      	mov	r4, r0
 800ae08:	d02e      	beq.n	800ae68 <scalbnf+0x6c>
 800ae0a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ae0e:	d304      	bcc.n	800ae1a <scalbnf+0x1e>
 800ae10:	4601      	mov	r1, r0
 800ae12:	f7f5 feaf 	bl	8000b74 <__addsf3>
 800ae16:	4603      	mov	r3, r0
 800ae18:	e026      	b.n	800ae68 <scalbnf+0x6c>
 800ae1a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800ae1e:	d118      	bne.n	800ae52 <scalbnf+0x56>
 800ae20:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800ae24:	f7f5 ffae 	bl	8000d84 <__aeabi_fmul>
 800ae28:	4a17      	ldr	r2, [pc, #92]	@ (800ae88 <scalbnf+0x8c>)
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4295      	cmp	r5, r2
 800ae2e:	db0c      	blt.n	800ae4a <scalbnf+0x4e>
 800ae30:	4604      	mov	r4, r0
 800ae32:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800ae36:	3a19      	subs	r2, #25
 800ae38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ae3c:	428d      	cmp	r5, r1
 800ae3e:	dd0a      	ble.n	800ae56 <scalbnf+0x5a>
 800ae40:	4912      	ldr	r1, [pc, #72]	@ (800ae8c <scalbnf+0x90>)
 800ae42:	4618      	mov	r0, r3
 800ae44:	f361 001e 	bfi	r0, r1, #0, #31
 800ae48:	e000      	b.n	800ae4c <scalbnf+0x50>
 800ae4a:	4911      	ldr	r1, [pc, #68]	@ (800ae90 <scalbnf+0x94>)
 800ae4c:	f7f5 ff9a 	bl	8000d84 <__aeabi_fmul>
 800ae50:	e7e1      	b.n	800ae16 <scalbnf+0x1a>
 800ae52:	0dd2      	lsrs	r2, r2, #23
 800ae54:	e7f0      	b.n	800ae38 <scalbnf+0x3c>
 800ae56:	1951      	adds	r1, r2, r5
 800ae58:	29fe      	cmp	r1, #254	@ 0xfe
 800ae5a:	dcf1      	bgt.n	800ae40 <scalbnf+0x44>
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	dd05      	ble.n	800ae6c <scalbnf+0x70>
 800ae60:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ae64:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800ae68:	4618      	mov	r0, r3
 800ae6a:	bd38      	pop	{r3, r4, r5, pc}
 800ae6c:	f111 0f16 	cmn.w	r1, #22
 800ae70:	da01      	bge.n	800ae76 <scalbnf+0x7a>
 800ae72:	4907      	ldr	r1, [pc, #28]	@ (800ae90 <scalbnf+0x94>)
 800ae74:	e7e5      	b.n	800ae42 <scalbnf+0x46>
 800ae76:	f101 0019 	add.w	r0, r1, #25
 800ae7a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800ae7e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800ae82:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800ae86:	e7e1      	b.n	800ae4c <scalbnf+0x50>
 800ae88:	ffff3cb0 	.word	0xffff3cb0
 800ae8c:	7149f2ca 	.word	0x7149f2ca
 800ae90:	0da24260 	.word	0x0da24260

0800ae94 <floorf>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800ae9a:	3d7f      	subs	r5, #127	@ 0x7f
 800ae9c:	2d16      	cmp	r5, #22
 800ae9e:	4601      	mov	r1, r0
 800aea0:	4604      	mov	r4, r0
 800aea2:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800aea6:	dc26      	bgt.n	800aef6 <floorf+0x62>
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	da0f      	bge.n	800aecc <floorf+0x38>
 800aeac:	4917      	ldr	r1, [pc, #92]	@ (800af0c <floorf+0x78>)
 800aeae:	f7f5 fe61 	bl	8000b74 <__addsf3>
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	f7f6 f922 	bl	80010fc <__aeabi_fcmpgt>
 800aeb8:	b130      	cbz	r0, 800aec8 <floorf+0x34>
 800aeba:	2c00      	cmp	r4, #0
 800aebc:	da23      	bge.n	800af06 <floorf+0x72>
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	4c13      	ldr	r4, [pc, #76]	@ (800af10 <floorf+0x7c>)
 800aec2:	bf08      	it	eq
 800aec4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800aec8:	4621      	mov	r1, r4
 800aeca:	e01a      	b.n	800af02 <floorf+0x6e>
 800aecc:	4e11      	ldr	r6, [pc, #68]	@ (800af14 <floorf+0x80>)
 800aece:	412e      	asrs	r6, r5
 800aed0:	4230      	tst	r0, r6
 800aed2:	d016      	beq.n	800af02 <floorf+0x6e>
 800aed4:	490d      	ldr	r1, [pc, #52]	@ (800af0c <floorf+0x78>)
 800aed6:	f7f5 fe4d 	bl	8000b74 <__addsf3>
 800aeda:	2100      	movs	r1, #0
 800aedc:	f7f6 f90e 	bl	80010fc <__aeabi_fcmpgt>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d0f1      	beq.n	800aec8 <floorf+0x34>
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	bfbe      	ittt	lt
 800aee8:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800aeec:	412b      	asrlt	r3, r5
 800aeee:	18e4      	addlt	r4, r4, r3
 800aef0:	ea24 0406 	bic.w	r4, r4, r6
 800aef4:	e7e8      	b.n	800aec8 <floorf+0x34>
 800aef6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800aefa:	d302      	bcc.n	800af02 <floorf+0x6e>
 800aefc:	f7f5 fe3a 	bl	8000b74 <__addsf3>
 800af00:	4601      	mov	r1, r0
 800af02:	4608      	mov	r0, r1
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	2400      	movs	r4, #0
 800af08:	e7de      	b.n	800aec8 <floorf+0x34>
 800af0a:	bf00      	nop
 800af0c:	7149f2ca 	.word	0x7149f2ca
 800af10:	bf800000 	.word	0xbf800000
 800af14:	007fffff 	.word	0x007fffff

0800af18 <_init>:
 800af18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1a:	bf00      	nop
 800af1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af1e:	bc08      	pop	{r3}
 800af20:	469e      	mov	lr, r3
 800af22:	4770      	bx	lr

0800af24 <_fini>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr
