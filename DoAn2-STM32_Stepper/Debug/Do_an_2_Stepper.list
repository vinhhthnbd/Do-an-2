
Do_an_2_Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a610  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800a720  0800a720  0000b720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad58  0800ad58  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad58  0800ad58  0000bd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad60  0800ad60  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad60  0800ad60  0000bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad64  0800ad64  0000bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ad68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001d4  0800af3c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800af3c  0000c6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce48  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002016  00000000  00000000  00019045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0001b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5f  00000000  00000000  0001bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ece  00000000  00000000  0001c807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efe2  00000000  00000000  000356d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d016  00000000  00000000  000446b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d16cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  000d1710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d66ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a708 	.word	0x0800a708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a708 	.word	0x0800a708

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <__aeabi_d2lz>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	2200      	movs	r2, #0
 800118c:	2300      	movs	r3, #0
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	f7ff fc13 	bl	80009bc <__aeabi_dcmplt>
 8001196:	b928      	cbnz	r0, 80011a4 <__aeabi_d2lz+0x1c>
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011a0:	f000 b80a 	b.w	80011b8 <__aeabi_d2ulz>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011aa:	f000 f805 	bl	80011b8 <__aeabi_d2ulz>
 80011ae:	4240      	negs	r0, r0
 80011b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011b4:	bd38      	pop	{r3, r4, r5, pc}
 80011b6:	bf00      	nop

080011b8 <__aeabi_d2ulz>:
 80011b8:	b5d0      	push	{r4, r6, r7, lr}
 80011ba:	2200      	movs	r2, #0
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <__aeabi_d2ulz+0x34>)
 80011be:	4606      	mov	r6, r0
 80011c0:	460f      	mov	r7, r1
 80011c2:	f7ff f989 	bl	80004d8 <__aeabi_dmul>
 80011c6:	f7ff fc5f 	bl	8000a88 <__aeabi_d2uiz>
 80011ca:	4604      	mov	r4, r0
 80011cc:	f7ff f90a 	bl	80003e4 <__aeabi_ui2d>
 80011d0:	2200      	movs	r2, #0
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <__aeabi_d2ulz+0x38>)
 80011d4:	f7ff f980 	bl	80004d8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4630      	mov	r0, r6
 80011de:	4639      	mov	r1, r7
 80011e0:	f7fe ffc2 	bl	8000168 <__aeabi_dsub>
 80011e4:	f7ff fc50 	bl	8000a88 <__aeabi_d2uiz>
 80011e8:	4621      	mov	r1, r4
 80011ea:	bdd0      	pop	{r4, r6, r7, pc}
 80011ec:	3df00000 	.word	0x3df00000
 80011f0:	41f00000 	.word	0x41f00000

080011f4 <calculatePredictionValue>:

/*
 *
 */
void calculatePredictionValue(Robot_model_typedef *R,float sl,float sr)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
	R->sl=sl;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	605a      	str	r2, [r3, #4]
	R->sr=sr;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
	R->delta_theta=(R->sr-R->sl)/(2*RW_DISTANCE_WHEEL_CENTER);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff fcaa 	bl	8000b70 <__aeabi_fsub>
 800121c:	4603      	mov	r3, r0
 800121e:	494f      	ldr	r1, [pc, #316]	@ (800135c <calculatePredictionValue+0x168>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe63 	bl	8000eec <__aeabi_fdiv>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	62da      	str	r2, [r3, #44]	@ 0x2c
	R->s=(R->sr+R->sl)/2;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f7ff fc9b 	bl	8000b74 <__addsf3>
 800123e:	4603      	mov	r3, r0
 8001240:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe51 	bl	8000eec <__aeabi_fdiv>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	601a      	str	r2, [r3, #0]
	R->delta_x=R->s*cos(R->theta_prediction+R->delta_theta/2);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f8e6 	bl	8000428 <__aeabi_f2d>
 800125c:	4604      	mov	r4, r0
 800125e:	460d      	mov	r5, r1
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	695e      	ldr	r6, [r3, #20]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001268:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe3d 	bl	8000eec <__aeabi_fdiv>
 8001272:	4603      	mov	r3, r0
 8001274:	4619      	mov	r1, r3
 8001276:	4630      	mov	r0, r6
 8001278:	f7ff fc7c 	bl	8000b74 <__addsf3>
 800127c:	4603      	mov	r3, r0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8d2 	bl	8000428 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f008 fa1e 	bl	80096cc <cos>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff f91e 	bl	80004d8 <__aeabi_dmul>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fc10 	bl	8000ac8 <__aeabi_d2f>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
	R->delta_y=R->s*sin(R->theta_prediction+R->delta_theta/2);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f8b8 	bl	8000428 <__aeabi_f2d>
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	695e      	ldr	r6, [r3, #20]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe0f 	bl	8000eec <__aeabi_fdiv>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	4630      	mov	r0, r6
 80012d4:	f7ff fc4e 	bl	8000b74 <__addsf3>
 80012d8:	4603      	mov	r3, r0
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f008 fa36 	bl	8009758 <sin>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f8f0 	bl	80004d8 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbe2 	bl	8000ac8 <__aeabi_d2f>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	629a      	str	r2, [r3, #40]	@ 0x28
	R->x_prediction=R->x_prediction+R->delta_x;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	4610      	mov	r0, r2
 8001316:	f7ff fc2d 	bl	8000b74 <__addsf3>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	60da      	str	r2, [r3, #12]
	R->y_prediction=R->y_prediction+R->delta_y;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f7ff fc21 	bl	8000b74 <__addsf3>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]
	R->theta_prediction=R->theta_prediction+R->delta_theta;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f7ff fc15 	bl	8000b74 <__addsf3>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	615a      	str	r2, [r3, #20]
}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135a:	bf00      	nop
 800135c:	42300000 	.word	0x42300000

08001360 <BluetoothFrameHandler>:
 * @param rx_buffer The pointers of data we receive from UART
 * @param M1 The pointer of typedef struct that store first motor information
 * @param M2 The pointer of typedef struct that store second motor information
**/
void BluetoothFrameHandler(uint8_t *rx_buffer,uint8_t *tx_buffer,Robot_model_typedef *R)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
		if (*rx_buffer==FORWARD_COMMAND_CHARACTER)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b66      	cmp	r3, #102	@ 0x66
 8001372:	d10b      	bne.n	800138c <BluetoothFrameHandler+0x2c>
		{
			StepperSpeed(10, &Stepper1,STEPPER1_CONTROL);
 8001374:	2201      	movs	r2, #1
 8001376:	492c      	ldr	r1, [pc, #176]	@ (8001428 <BluetoothFrameHandler+0xc8>)
 8001378:	482c      	ldr	r0, [pc, #176]	@ (800142c <BluetoothFrameHandler+0xcc>)
 800137a:	f000 f8cd 	bl	8001518 <StepperSpeed>
			StepperSpeed(10, &Stepper2,STEPPER2_CONTROL);
 800137e:	f04f 32ff 	mov.w	r2, #4294967295
 8001382:	492b      	ldr	r1, [pc, #172]	@ (8001430 <BluetoothFrameHandler+0xd0>)
 8001384:	4829      	ldr	r0, [pc, #164]	@ (800142c <BluetoothFrameHandler+0xcc>)
 8001386:	f000 f8c7 	bl	8001518 <StepperSpeed>
		}
		else if(*rx_buffer==SEND_CORRECTION_DATA)
		{
			 bluetooth_allow_tx=1;
		}
}
 800138a:	e048      	b.n	800141e <BluetoothFrameHandler+0xbe>
		else if (*rx_buffer==BACKWARD_COMMAND_CHARACTER)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b62      	cmp	r3, #98	@ 0x62
 8001392:	d10b      	bne.n	80013ac <BluetoothFrameHandler+0x4c>
			StepperSpeed(-10, &Stepper1,STEPPER1_CONTROL);
 8001394:	2201      	movs	r2, #1
 8001396:	4924      	ldr	r1, [pc, #144]	@ (8001428 <BluetoothFrameHandler+0xc8>)
 8001398:	4826      	ldr	r0, [pc, #152]	@ (8001434 <BluetoothFrameHandler+0xd4>)
 800139a:	f000 f8bd 	bl	8001518 <StepperSpeed>
			StepperSpeed(-10, &Stepper2,STEPPER2_CONTROL);
 800139e:	f04f 32ff 	mov.w	r2, #4294967295
 80013a2:	4923      	ldr	r1, [pc, #140]	@ (8001430 <BluetoothFrameHandler+0xd0>)
 80013a4:	4823      	ldr	r0, [pc, #140]	@ (8001434 <BluetoothFrameHandler+0xd4>)
 80013a6:	f000 f8b7 	bl	8001518 <StepperSpeed>
}
 80013aa:	e038      	b.n	800141e <BluetoothFrameHandler+0xbe>
		else if (*rx_buffer==TURN_LEFT_COMMAND_CHARACTER)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b6c      	cmp	r3, #108	@ 0x6c
 80013b2:	d10b      	bne.n	80013cc <BluetoothFrameHandler+0x6c>
			StepperSpeed(3, &Stepper1,STEPPER1_CONTROL);
 80013b4:	2201      	movs	r2, #1
 80013b6:	491c      	ldr	r1, [pc, #112]	@ (8001428 <BluetoothFrameHandler+0xc8>)
 80013b8:	481f      	ldr	r0, [pc, #124]	@ (8001438 <BluetoothFrameHandler+0xd8>)
 80013ba:	f000 f8ad 	bl	8001518 <StepperSpeed>
			StepperSpeed(-3, &Stepper2,STEPPER2_CONTROL);
 80013be:	f04f 32ff 	mov.w	r2, #4294967295
 80013c2:	491b      	ldr	r1, [pc, #108]	@ (8001430 <BluetoothFrameHandler+0xd0>)
 80013c4:	481d      	ldr	r0, [pc, #116]	@ (800143c <BluetoothFrameHandler+0xdc>)
 80013c6:	f000 f8a7 	bl	8001518 <StepperSpeed>
}
 80013ca:	e028      	b.n	800141e <BluetoothFrameHandler+0xbe>
		else if (*rx_buffer==TURN_RIGHT_COMMAND_CHARACTER)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b72      	cmp	r3, #114	@ 0x72
 80013d2:	d10b      	bne.n	80013ec <BluetoothFrameHandler+0x8c>
			StepperSpeed(-3, &Stepper1,STEPPER1_CONTROL);
 80013d4:	2201      	movs	r2, #1
 80013d6:	4914      	ldr	r1, [pc, #80]	@ (8001428 <BluetoothFrameHandler+0xc8>)
 80013d8:	4818      	ldr	r0, [pc, #96]	@ (800143c <BluetoothFrameHandler+0xdc>)
 80013da:	f000 f89d 	bl	8001518 <StepperSpeed>
			StepperSpeed(3, &Stepper2,STEPPER2_CONTROL);
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	4913      	ldr	r1, [pc, #76]	@ (8001430 <BluetoothFrameHandler+0xd0>)
 80013e4:	4814      	ldr	r0, [pc, #80]	@ (8001438 <BluetoothFrameHandler+0xd8>)
 80013e6:	f000 f897 	bl	8001518 <StepperSpeed>
}
 80013ea:	e018      	b.n	800141e <BluetoothFrameHandler+0xbe>
		else if(*rx_buffer==STOP_COMMAND_CHARACTER)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b73      	cmp	r3, #115	@ 0x73
 80013f2:	d10d      	bne.n	8001410 <BluetoothFrameHandler+0xb0>
			StepperSpeed(0, &Stepper1,STEPPER1_CONTROL);
 80013f4:	2201      	movs	r2, #1
 80013f6:	490c      	ldr	r1, [pc, #48]	@ (8001428 <BluetoothFrameHandler+0xc8>)
 80013f8:	f04f 0000 	mov.w	r0, #0
 80013fc:	f000 f88c 	bl	8001518 <StepperSpeed>
			StepperSpeed(0, &Stepper2,STEPPER2_CONTROL);
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	490a      	ldr	r1, [pc, #40]	@ (8001430 <BluetoothFrameHandler+0xd0>)
 8001406:	f04f 0000 	mov.w	r0, #0
 800140a:	f000 f885 	bl	8001518 <StepperSpeed>
}
 800140e:	e006      	b.n	800141e <BluetoothFrameHandler+0xbe>
		else if(*rx_buffer==SEND_CORRECTION_DATA)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b63      	cmp	r3, #99	@ 0x63
 8001416:	d102      	bne.n	800141e <BluetoothFrameHandler+0xbe>
			 bluetooth_allow_tx=1;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <BluetoothFrameHandler+0xe0>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000420 	.word	0x20000420
 800142c:	41200000 	.word	0x41200000
 8001430:	20000438 	.word	0x20000438
 8001434:	c1200000 	.word	0xc1200000
 8001438:	40400000 	.word	0x40400000
 800143c:	c0400000 	.word	0xc0400000
 8001440:	2000058a 	.word	0x2000058a

08001444 <HAL_TIM_PeriodElapsedCallback>:
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d103      	bne.n	800145e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		timer3_int=1;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
	}
	else if(htim->Instance==TIM2)
	{
		timer2_int=1;
	}
}
 800145c:	e007      	b.n	800146e <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim->Instance==TIM2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001466:	d102      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x2a>
		timer2_int=1;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40000400 	.word	0x40000400
 800147c:	20000589 	.word	0x20000589
 8001480:	20000588 	.word	0x20000588

08001484 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d104      	bne.n	80014a0 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		memcpy(final_rx_buffer2,rx_buffer2,32);
 8001496:	2220      	movs	r2, #32
 8001498:	4904      	ldr	r1, [pc, #16]	@ (80014ac <HAL_UART_RxHalfCpltCallback+0x28>)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 800149c:	f005 fbef 	bl	8006c7e <memcpy>
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40004400 	.word	0x40004400
 80014ac:	20000490 	.word	0x20000490
 80014b0:	200004d0 	.word	0x200004d0

080014b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_UART_RxCpltCallback+0x48>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d016      	beq.n	80014f4 <HAL_UART_RxCpltCallback+0x40>
	{

	}
	else if(huart->Instance==USART2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <HAL_UART_RxCpltCallback+0x4c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d109      	bne.n	80014e4 <HAL_UART_RxCpltCallback+0x30>
	{
		memcpy(final_rx_buffer2+32,rx_buffer2+32,32);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_UART_RxCpltCallback+0x50>)
 80014d2:	490d      	ldr	r1, [pc, #52]	@ (8001508 <HAL_UART_RxCpltCallback+0x54>)
 80014d4:	2220      	movs	r2, #32
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 fbd1 	bl	8006c7e <memcpy>
		uart2_rx_check=1;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_UART_RxCpltCallback+0x58>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance==USART3)
	{
		bluetooth_rx_check=1;
	}
}
 80014e2:	e007      	b.n	80014f4 <HAL_UART_RxCpltCallback+0x40>
	else if(huart->Instance==USART3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <HAL_UART_RxCpltCallback+0x5c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d102      	bne.n	80014f4 <HAL_UART_RxCpltCallback+0x40>
		bluetooth_rx_check=1;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_UART_RxCpltCallback+0x60>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40013800 	.word	0x40013800
 8001500:	40004400 	.word	0x40004400
 8001504:	200004f0 	.word	0x200004f0
 8001508:	200004b0 	.word	0x200004b0
 800150c:	2000058c 	.word	0x2000058c
 8001510:	40004800 	.word	0x40004800
 8001514:	2000058b 	.word	0x2000058b

08001518 <StepperSpeed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void StepperSpeed(float v,StepperHandlle_Typedef *Stepper,controlDirection con)//(-200<y<200)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	71fb      	strb	r3, [r7, #7]
	float pps=v*200/60;
 8001526:	4929      	ldr	r1, [pc, #164]	@ (80015cc <StepperSpeed+0xb4>)
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff fc2b 	bl	8000d84 <__aeabi_fmul>
 800152e:	4603      	mov	r3, r0
 8001530:	4927      	ldr	r1, [pc, #156]	@ (80015d0 <StepperSpeed+0xb8>)
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fcda 	bl	8000eec <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	617b      	str	r3, [r7, #20]
	float a=50000/pps;
 800153c:	6979      	ldr	r1, [r7, #20]
 800153e:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <StepperSpeed+0xbc>)
 8001540:	f7ff fcd4 	bl	8000eec <__aeabi_fdiv>
 8001544:	4603      	mov	r3, r0
 8001546:	613b      	str	r3, [r7, #16]

    if (a < 0)
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	6938      	ldr	r0, [r7, #16]
 800154e:	f7ff fdb7 	bl	80010c0 <__aeabi_fcmplt>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <StepperSpeed+0x48>
    {
    	Stepper->Dir_M = -1;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	22ff      	movs	r2, #255	@ 0xff
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e00e      	b.n	800157e <StepperSpeed+0x66>
    }
    else if (a > 0)
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	6938      	ldr	r0, [r7, #16]
 8001566:	f7ff fdc9 	bl	80010fc <__aeabi_fcmpgt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <StepperSpeed+0x60>
    {
    	Stepper->Dir_M = 1;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e002      	b.n	800157e <StepperSpeed+0x66>
    }
	else
		Stepper->Dir_M = 0;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
    Stepper->Dir_M*=con;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f993 3000 	ldrsb.w	r3, [r3]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b25a      	sxtb	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	701a      	strb	r2, [r3, #0]
	Stepper->Count_BOT = abs((int)a);
 8001594:	6938      	ldr	r0, [r7, #16]
 8001596:	f7ff fdd1 	bl	800113c <__aeabi_f2iz>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bfb8      	it	lt
 80015a0:	425b      	neglt	r3, r3
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	815a      	strh	r2, [r3, #10]
	Stepper->Count_TOP =  abs((int)a/2);
 80015a8:	6938      	ldr	r0, [r7, #16]
 80015aa:	f7ff fdc7 	bl	800113c <__aeabi_f2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	0fda      	lsrs	r2, r3, #31
 80015b2:	4413      	add	r3, r2
 80015b4:	105b      	asrs	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bfb8      	it	lt
 80015ba:	425b      	neglt	r3, r3
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	811a      	strh	r2, [r3, #8]
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	43480000 	.word	0x43480000
 80015d0:	42700000 	.word	0x42700000
 80015d4:	47435000 	.word	0x47435000

080015d8 <ReadStepper>:

void ReadStepper(StepperHandlle_Typedef *stepper,readDirection read)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
	stepper->delta_step=stepper->Step-stepper->previous_step;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	819a      	strh	r2, [r3, #12]
	stepper->delta_step*=read;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001604:	b29b      	uxth	r3, r3
 8001606:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800160a:	b292      	uxth	r2, r2
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	b29b      	uxth	r3, r3
 8001612:	b21a      	sxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	819a      	strh	r2, [r3, #12]
	stepper->distance=((float)stepper->delta_step)/PULSE_PER_ROUND*2*PI*WHEEL_RADIUS;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb5c 	bl	8000cdc <__aeabi_i2f>
 8001624:	4603      	mov	r3, r0
 8001626:	4916      	ldr	r1, [pc, #88]	@ (8001680 <ReadStepper+0xa8>)
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc5f 	bl	8000eec <__aeabi_fdiv>
 800162e:	4603      	mov	r3, r0
 8001630:	4619      	mov	r1, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fa9e 	bl	8000b74 <__addsf3>
 8001638:	4603      	mov	r3, r0
 800163a:	4912      	ldr	r1, [pc, #72]	@ (8001684 <ReadStepper+0xac>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fba1 	bl	8000d84 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe feef 	bl	8000428 <__aeabi_f2d>
 800164a:	a30b      	add	r3, pc, #44	@ (adr r3, 8001678 <ReadStepper+0xa0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7fe ff42 	bl	80004d8 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa34 	bl	8000ac8 <__aeabi_d2f>
 8001660:	4602      	mov	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	611a      	str	r2, [r3, #16]
	stepper->previous_step=stepper->Step;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	80da      	strh	r2, [r3, #6]
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	5182a993 	.word	0x5182a993
 800167c:	403fdd49 	.word	0x403fdd49
 8001680:	43480000 	.word	0x43480000
 8001684:	40490fdb 	.word	0x40490fdb

08001688 <DealTimer3>:

void DealTimer3()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
		    	  {
		    		  StepperSpeed(0,&Stepper1, STEPPER1_CONTROL);
		    		  StepperSpeed(0, &Stepper2, STEPPER2_CONTROL);
		    	  }
#endif
		if (Stepper1.Dir_M != 0)
 800168c:	4b62      	ldr	r3, [pc, #392]	@ (8001818 <DealTimer3+0x190>)
 800168e:	f993 3000 	ldrsb.w	r3, [r3]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d057      	beq.n	8001746 <DealTimer3+0xbe>
		{                                                          //nếu MOTOR cho phép quay
			HAL_GPIO_WritePin(ENABLE1_GPIO_Port, ENABLE1_Pin, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2110      	movs	r1, #16
 800169a:	4860      	ldr	r0, [pc, #384]	@ (800181c <DealTimer3+0x194>)
 800169c:	f001 fc68 	bl	8002f70 <HAL_GPIO_WritePin>
		    if (Stepper1.Dir_M > 0)
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <DealTimer3+0x190>)
 80016a2:	f993 3000 	ldrsb.w	r3, [r3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dd05      	ble.n	80016b6 <DealTimer3+0x2e>
			{
		    	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, 1);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2101      	movs	r1, #1
 80016ae:	485c      	ldr	r0, [pc, #368]	@ (8001820 <DealTimer3+0x198>)
 80016b0:	f001 fc5e 	bl	8002f70 <HAL_GPIO_WritePin>
 80016b4:	e009      	b.n	80016ca <DealTimer3+0x42>
			}
		    else if (Stepper1.Dir_M < 0)
 80016b6:	4b58      	ldr	r3, [pc, #352]	@ (8001818 <DealTimer3+0x190>)
 80016b8:	f993 3000 	ldrsb.w	r3, [r3]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da04      	bge.n	80016ca <DealTimer3+0x42>
		    {
		    	HAL_GPIO_WritePin(DIR1_GPIO_Port,DIR1_Pin,0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2101      	movs	r1, #1
 80016c4:	4856      	ldr	r0, [pc, #344]	@ (8001820 <DealTimer3+0x198>)
 80016c6:	f001 fc53 	bl	8002f70 <HAL_GPIO_WritePin>
		    }
		    Stepper1.Count_timer++;
 80016ca:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <DealTimer3+0x190>)
 80016cc:	885b      	ldrh	r3, [r3, #2]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <DealTimer3+0x190>)
 80016d4:	805a      	strh	r2, [r3, #2]
		    if (Stepper1.Count_timer <= Stepper1.Count_TOP)
 80016d6:	4b50      	ldr	r3, [pc, #320]	@ (8001818 <DealTimer3+0x190>)
 80016d8:	885a      	ldrh	r2, [r3, #2]
 80016da:	4b4f      	ldr	r3, [pc, #316]	@ (8001818 <DealTimer3+0x190>)
 80016dc:	891b      	ldrh	r3, [r3, #8]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d805      	bhi.n	80016ee <DealTimer3+0x66>
		    	HAL_GPIO_WritePin(STEP1_GPIO_Port, STEP1_Pin, 1);//nếu là nhịp nằm trong phần cao trong xung STEP
 80016e2:	2201      	movs	r2, #1
 80016e4:	2140      	movs	r1, #64	@ 0x40
 80016e6:	484d      	ldr	r0, [pc, #308]	@ (800181c <DealTimer3+0x194>)
 80016e8:	f001 fc42 	bl	8002f70 <HAL_GPIO_WritePin>
 80016ec:	e004      	b.n	80016f8 <DealTimer3+0x70>
		    else
		    	HAL_GPIO_WritePin(STEP1_GPIO_Port, STEP1_Pin, 0);                                                 //nếu là nhịp nằm trong phần thấp của xung STEP
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	@ 0x40
 80016f2:	484a      	ldr	r0, [pc, #296]	@ (800181c <DealTimer3+0x194>)
 80016f4:	f001 fc3c 	bl	8002f70 <HAL_GPIO_WritePin>
		    if (Stepper1.Count_timer > Stepper1.Count_BOT)
 80016f8:	4b47      	ldr	r3, [pc, #284]	@ (8001818 <DealTimer3+0x190>)
 80016fa:	885a      	ldrh	r2, [r3, #2]
 80016fc:	4b46      	ldr	r3, [pc, #280]	@ (8001818 <DealTimer3+0x190>)
 80016fe:	895b      	ldrh	r3, [r3, #10]
 8001700:	429a      	cmp	r2, r3
 8001702:	d925      	bls.n	8001750 <DealTimer3+0xc8>
		    {
		      Stepper1.Count_timer = 0;                             //nếu là nhịp cuối của 1 xung STEP
 8001704:	4b44      	ldr	r3, [pc, #272]	@ (8001818 <DealTimer3+0x190>)
 8001706:	2200      	movs	r2, #0
 8001708:	805a      	strh	r2, [r3, #2]
		      if (Stepper1.Dir_M > 0)
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <DealTimer3+0x190>)
 800170c:	f993 3000 	ldrsb.w	r3, [r3]
 8001710:	2b00      	cmp	r3, #0
 8001712:	dd09      	ble.n	8001728 <DealTimer3+0xa0>
		      {
		    	  Stepper1.Step++;
 8001714:	4b40      	ldr	r3, [pc, #256]	@ (8001818 <DealTimer3+0x190>)
 8001716:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3301      	adds	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <DealTimer3+0x190>)
 8001724:	809a      	strh	r2, [r3, #4]
 8001726:	e013      	b.n	8001750 <DealTimer3+0xc8>
		      }
		      else if (Stepper1.Dir_M < 0)
 8001728:	4b3b      	ldr	r3, [pc, #236]	@ (8001818 <DealTimer3+0x190>)
 800172a:	f993 3000 	ldrsb.w	r3, [r3]
 800172e:	2b00      	cmp	r3, #0
 8001730:	da0e      	bge.n	8001750 <DealTimer3+0xc8>
		      {
		    	  Stepper1.Step--;
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <DealTimer3+0x190>)
 8001734:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21a      	sxth	r2, r3
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <DealTimer3+0x190>)
 8001742:	809a      	strh	r2, [r3, #4]
 8001744:	e004      	b.n	8001750 <DealTimer3+0xc8>
		      }
		    }
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE1_GPIO_Port,ENABLE1_Pin, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	2110      	movs	r1, #16
 800174a:	4834      	ldr	r0, [pc, #208]	@ (800181c <DealTimer3+0x194>)
 800174c:	f001 fc10 	bl	8002f70 <HAL_GPIO_WritePin>
		}
		if(Stepper2.Dir_M!=0)
 8001750:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <DealTimer3+0x19c>)
 8001752:	f993 3000 	ldrsb.w	r3, [r3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d057      	beq.n	800180a <DealTimer3+0x182>
		{
			HAL_GPIO_WritePin(ENABLE2_GPIO_Port, ENABLE2_Pin, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2120      	movs	r1, #32
 800175e:	482f      	ldr	r0, [pc, #188]	@ (800181c <DealTimer3+0x194>)
 8001760:	f001 fc06 	bl	8002f70 <HAL_GPIO_WritePin>
			if (Stepper2.Dir_M > 0)
 8001764:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <DealTimer3+0x19c>)
 8001766:	f993 3000 	ldrsb.w	r3, [r3]
 800176a:	2b00      	cmp	r3, #0
 800176c:	dd05      	ble.n	800177a <DealTimer3+0xf2>
			{
				HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	2102      	movs	r1, #2
 8001772:	482b      	ldr	r0, [pc, #172]	@ (8001820 <DealTimer3+0x198>)
 8001774:	f001 fbfc 	bl	8002f70 <HAL_GPIO_WritePin>
 8001778:	e009      	b.n	800178e <DealTimer3+0x106>
			}
			else if (Stepper2.Dir_M < 0)
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <DealTimer3+0x19c>)
 800177c:	f993 3000 	ldrsb.w	r3, [r3]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da04      	bge.n	800178e <DealTimer3+0x106>
			{
				HAL_GPIO_WritePin(DIR2_GPIO_Port,DIR2_Pin,0);
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4825      	ldr	r0, [pc, #148]	@ (8001820 <DealTimer3+0x198>)
 800178a:	f001 fbf1 	bl	8002f70 <HAL_GPIO_WritePin>
			}
			Stepper2.Count_timer++;
 800178e:	4b25      	ldr	r3, [pc, #148]	@ (8001824 <DealTimer3+0x19c>)
 8001790:	885b      	ldrh	r3, [r3, #2]
 8001792:	3301      	adds	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <DealTimer3+0x19c>)
 8001798:	805a      	strh	r2, [r3, #2]
			if (Stepper2.Count_timer <= Stepper2.Count_TOP)
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <DealTimer3+0x19c>)
 800179c:	885a      	ldrh	r2, [r3, #2]
 800179e:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <DealTimer3+0x19c>)
 80017a0:	891b      	ldrh	r3, [r3, #8]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d805      	bhi.n	80017b2 <DealTimer3+0x12a>
				HAL_GPIO_WritePin(STEP2_GPIO_Port, STEP2_Pin, 1);//nếu là nhịp nằm trong phần cao trong xung STEP
 80017a6:	2201      	movs	r2, #1
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	481c      	ldr	r0, [pc, #112]	@ (800181c <DealTimer3+0x194>)
 80017ac:	f001 fbe0 	bl	8002f70 <HAL_GPIO_WritePin>
 80017b0:	e004      	b.n	80017bc <DealTimer3+0x134>
			else
				HAL_GPIO_WritePin(STEP2_GPIO_Port, STEP2_Pin, 0);                                                 //nếu là nhịp nằm trong phần thấp của xung STEP
 80017b2:	2200      	movs	r2, #0
 80017b4:	2180      	movs	r1, #128	@ 0x80
 80017b6:	4819      	ldr	r0, [pc, #100]	@ (800181c <DealTimer3+0x194>)
 80017b8:	f001 fbda 	bl	8002f70 <HAL_GPIO_WritePin>
			if (Stepper2.Count_timer > Stepper2.Count_BOT)
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <DealTimer3+0x19c>)
 80017be:	885a      	ldrh	r2, [r3, #2]
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <DealTimer3+0x19c>)
 80017c2:	895b      	ldrh	r3, [r3, #10]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d925      	bls.n	8001814 <DealTimer3+0x18c>
			{
			  Stepper2.Count_timer = 0;                             //nếu là nhịp cuối của 1 xung STEP
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <DealTimer3+0x19c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	805a      	strh	r2, [r3, #2]
			  if (Stepper2.Dir_M > 0)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <DealTimer3+0x19c>)
 80017d0:	f993 3000 	ldrsb.w	r3, [r3]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dd09      	ble.n	80017ec <DealTimer3+0x164>
			  {
				  Stepper2.Step++;
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <DealTimer3+0x19c>)
 80017da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <DealTimer3+0x19c>)
 80017e8:	809a      	strh	r2, [r3, #4]
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE2_GPIO_Port,ENABLE2_Pin, 1);
		}
}
 80017ea:	e013      	b.n	8001814 <DealTimer3+0x18c>
			  else if (Stepper2.Dir_M < 0)
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <DealTimer3+0x19c>)
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da0e      	bge.n	8001814 <DealTimer3+0x18c>
				  Stepper2.Step--;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <DealTimer3+0x19c>)
 80017f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21a      	sxth	r2, r3
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <DealTimer3+0x19c>)
 8001806:	809a      	strh	r2, [r3, #4]
}
 8001808:	e004      	b.n	8001814 <DealTimer3+0x18c>
			HAL_GPIO_WritePin(ENABLE2_GPIO_Port,ENABLE2_Pin, 1);
 800180a:	2201      	movs	r2, #1
 800180c:	2120      	movs	r1, #32
 800180e:	4803      	ldr	r0, [pc, #12]	@ (800181c <DealTimer3+0x194>)
 8001810:	f001 fbae 	bl	8002f70 <HAL_GPIO_WritePin>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000420 	.word	0x20000420
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	20000438 	.word	0x20000438

08001828 <DealTimer2>:

void DealTimer2()
{
 8001828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af04      	add	r7, sp, #16
	ReadStepper(&Stepper1,STEPPER1_READ);
 8001830:	2101      	movs	r1, #1
 8001832:	4829      	ldr	r0, [pc, #164]	@ (80018d8 <DealTimer2+0xb0>)
 8001834:	f7ff fed0 	bl	80015d8 <ReadStepper>
	ReadStepper(&Stepper2,STEPPER2_READ);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	4827      	ldr	r0, [pc, #156]	@ (80018dc <DealTimer2+0xb4>)
 800183e:	f7ff fecb 	bl	80015d8 <ReadStepper>
	calculatePredictionValue(&R, Stepper1.distance,Stepper2.distance);
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <DealTimer2+0xb0>)
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	4a25      	ldr	r2, [pc, #148]	@ (80018dc <DealTimer2+0xb4>)
 8001848:	6912      	ldr	r2, [r2, #16]
 800184a:	4619      	mov	r1, r3
 800184c:	4824      	ldr	r0, [pc, #144]	@ (80018e0 <DealTimer2+0xb8>)
 800184e:	f7ff fcd1 	bl	80011f4 <calculatePredictionValue>
#if Test_UART_Receive==0
#if Test_UART_Transmit==0
	sprintf((char*)tx_buffer2,"%f/%f/%f\n",(R.x_prediction-R.x_correction),(R.y_prediction-R.y_correction),(R.theta_prediction-R.theta_correction));
 8001852:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <DealTimer2+0xb8>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <DealTimer2+0xb8>)
 8001858:	6992      	ldr	r2, [r2, #24]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff f987 	bl	8000b70 <__aeabi_fsub>
 8001862:	4603      	mov	r3, r0
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fddf 	bl	8000428 <__aeabi_f2d>
 800186a:	4680      	mov	r8, r0
 800186c:	4689      	mov	r9, r1
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <DealTimer2+0xb8>)
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <DealTimer2+0xb8>)
 8001874:	69d2      	ldr	r2, [r2, #28]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff f979 	bl	8000b70 <__aeabi_fsub>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fdd1 	bl	8000428 <__aeabi_f2d>
 8001886:	4604      	mov	r4, r0
 8001888:	460d      	mov	r5, r1
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <DealTimer2+0xb8>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <DealTimer2+0xb8>)
 8001890:	6a12      	ldr	r2, [r2, #32]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f96b 	bl	8000b70 <__aeabi_fsub>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fdc3 	bl	8000428 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018aa:	e9cd 4500 	strd	r4, r5, [sp]
 80018ae:	4642      	mov	r2, r8
 80018b0:	464b      	mov	r3, r9
 80018b2:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <DealTimer2+0xbc>)
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <DealTimer2+0xc0>)
 80018b6:	f005 f8df 	bl	8006a78 <siprintf>
#endif
#if Test_UART_Transmit==1
	sprintf((char*)tx_buffer2,"%f/%f/%f\n",1.0f,1.0f,1.0f);
#endif

	HAL_UART_Transmit_DMA(&huart2, tx_buffer2, strlen((char*)tx_buffer2));
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <DealTimer2+0xc0>)
 80018bc:	f7fe fc48 	bl	8000150 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <DealTimer2+0xc0>)
 80018c8:	4808      	ldr	r0, [pc, #32]	@ (80018ec <DealTimer2+0xc4>)
 80018ca:	f002 fbbb 	bl	8004044 <HAL_UART_Transmit_DMA>
#endif
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018d6:	bf00      	nop
 80018d8:	20000420 	.word	0x20000420
 80018dc:	20000438 	.word	0x20000438
 80018e0:	20000558 	.word	0x20000558
 80018e4:	0800a720 	.word	0x0800a720
 80018e8:	20000450 	.word	0x20000450
 80018ec:	20000280 	.word	0x20000280

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f8:	f000 fda4 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fc:	f000 f8b8 	bl	8001a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001900:	f000 fa20 	bl	8001d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8001904:	f000 f9e8 	bl	8001cd8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001908:	f000 f946 	bl	8001b98 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800190c:	f000 f990 	bl	8001c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001910:	f000 f9b8 	bl	8001c84 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001914:	f000 f8f2 	bl	8001afc <MX_TIM2_Init>
  Stepper1.Step=0;
  Stepper1.previous_step=0;
  Stepper2.Step=0;
  Stepper2.previous_step=0;
#endif
  HAL_TIM_Base_Start_IT(&htim3);
 8001918:	4846      	ldr	r0, [pc, #280]	@ (8001a34 <main+0x144>)
 800191a:	f001 ffa1 	bl	8003860 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800191e:	4846      	ldr	r0, [pc, #280]	@ (8001a38 <main+0x148>)
 8001920:	f001 ff9e 	bl	8003860 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rx_buffer2, 64);
 8001924:	2240      	movs	r2, #64	@ 0x40
 8001926:	4945      	ldr	r1, [pc, #276]	@ (8001a3c <main+0x14c>)
 8001928:	4845      	ldr	r0, [pc, #276]	@ (8001a40 <main+0x150>)
 800192a:	f002 fbfb 	bl	8004124 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, bluetooth_rx_buffer, 1);
 800192e:	2201      	movs	r2, #1
 8001930:	4944      	ldr	r1, [pc, #272]	@ (8001a44 <main+0x154>)
 8001932:	4845      	ldr	r0, [pc, #276]	@ (8001a48 <main+0x158>)
 8001934:	f002 fbf6 	bl	8004124 <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(timer3_int==1)
 8001938:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <main+0x15c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <main+0x5a>
	{
		DealTimer3();
 8001940:	f7ff fea2 	bl	8001688 <DealTimer3>
		timer3_int=0;
 8001944:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <main+0x15c>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	}
	if(timer2_int==1)
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <main+0x160>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d104      	bne.n	800195c <main+0x6c>
	{
		DealTimer2();
 8001952:	f7ff ff69 	bl	8001828 <DealTimer2>
		timer2_int=0;
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <main+0x160>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	}
	if(uart2_rx_check==1)
 800195c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <main+0x164>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d127      	bne.n	80019b6 <main+0xc6>
	{
		char *end;
		R.x_correction=strtof((char*)final_rx_buffer2,&end);
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	483b      	ldr	r0, [pc, #236]	@ (8001a58 <main+0x168>)
 800196c:	f004 f8fe 	bl	8005b6c <strtof>
 8001970:	4603      	mov	r3, r0
 8001972:	4a3a      	ldr	r2, [pc, #232]	@ (8001a5c <main+0x16c>)
 8001974:	6193      	str	r3, [r2, #24]
		R.y_correction=strtof(end,&end);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1d3a      	adds	r2, r7, #4
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f004 f8f5 	bl	8005b6c <strtof>
 8001982:	4603      	mov	r3, r0
 8001984:	4a35      	ldr	r2, [pc, #212]	@ (8001a5c <main+0x16c>)
 8001986:	61d3      	str	r3, [r2, #28]
		R.theta_correction=strtof(end,NULL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f004 f8ed 	bl	8005b6c <strtof>
 8001992:	4603      	mov	r3, r0
 8001994:	4a31      	ldr	r2, [pc, #196]	@ (8001a5c <main+0x16c>)
 8001996:	6213      	str	r3, [r2, #32]
		R.x_prediction=R.x_correction;
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <main+0x16c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a5c <main+0x16c>)
 800199e:	60d3      	str	r3, [r2, #12]
		R.y_prediction=R.y_correction;
 80019a0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <main+0x16c>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <main+0x16c>)
 80019a6:	6113      	str	r3, [r2, #16]
		R.theta_prediction=R.theta_correction;
 80019a8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <main+0x16c>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <main+0x16c>)
 80019ae:	6153      	str	r3, [r2, #20]
#if Test_UART_Receive==1
		sprintf((char*)tx_buffer2,"%f/%f/%f\n",(R.x_correction),(R.y_correction),(R.theta_correction));
		HAL_UART_Transmit_DMA(&huart2, tx_buffer2, strlen((char*)tx_buffer2));
#endif
		uart2_rx_check=0;
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <main+0x164>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
	}
	if(bluetooth_rx_check==1)
 80019b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <main+0x170>)
 80019b8:	f993 3000 	ldrsb.w	r3, [r3]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d107      	bne.n	80019d0 <main+0xe0>
	{
		BluetoothFrameHandler(bluetooth_rx_buffer,bluetooth_tx_buffer,&R);
 80019c0:	4a26      	ldr	r2, [pc, #152]	@ (8001a5c <main+0x16c>)
 80019c2:	4928      	ldr	r1, [pc, #160]	@ (8001a64 <main+0x174>)
 80019c4:	481f      	ldr	r0, [pc, #124]	@ (8001a44 <main+0x154>)
 80019c6:	f7ff fccb 	bl	8001360 <BluetoothFrameHandler>
		bluetooth_rx_check=0;
 80019ca:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <main+0x170>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	}
	if(bluetooth_allow_tx==1)
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <main+0x178>)
 80019d2:	f993 3000 	ldrsb.w	r3, [r3]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d1ae      	bne.n	8001938 <main+0x48>
	{
		sprintf((char*)bluetooth_tx_buffer,"%f/%f/%f\n",R.x_correction,R.y_correction,R.theta_correction);
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <main+0x16c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd22 	bl	8000428 <__aeabi_f2d>
 80019e4:	4680      	mov	r8, r0
 80019e6:	4689      	mov	r9, r1
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <main+0x16c>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd1b 	bl	8000428 <__aeabi_f2d>
 80019f2:	4604      	mov	r4, r0
 80019f4:	460d      	mov	r5, r1
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <main+0x16c>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd14 	bl	8000428 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a08:	e9cd 4500 	strd	r4, r5, [sp]
 8001a0c:	4642      	mov	r2, r8
 8001a0e:	464b      	mov	r3, r9
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <main+0x17c>)
 8001a12:	4814      	ldr	r0, [pc, #80]	@ (8001a64 <main+0x174>)
 8001a14:	f005 f830 	bl	8006a78 <siprintf>
		HAL_UART_Transmit_DMA(&huart3, bluetooth_tx_buffer,strlen((char*)bluetooth_tx_buffer));
 8001a18:	4812      	ldr	r0, [pc, #72]	@ (8001a64 <main+0x174>)
 8001a1a:	f7fe fb99 	bl	8000150 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	490f      	ldr	r1, [pc, #60]	@ (8001a64 <main+0x174>)
 8001a26:	4808      	ldr	r0, [pc, #32]	@ (8001a48 <main+0x158>)
 8001a28:	f002 fb0c 	bl	8004044 <HAL_UART_Transmit_DMA>
		bluetooth_allow_tx=0;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <main+0x178>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	if(timer3_int==1)
 8001a32:	e781      	b.n	8001938 <main+0x48>
 8001a34:	20000238 	.word	0x20000238
 8001a38:	200001f0 	.word	0x200001f0
 8001a3c:	20000490 	.word	0x20000490
 8001a40:	20000280 	.word	0x20000280
 8001a44:	20000510 	.word	0x20000510
 8001a48:	200002c8 	.word	0x200002c8
 8001a4c:	20000589 	.word	0x20000589
 8001a50:	20000588 	.word	0x20000588
 8001a54:	2000058c 	.word	0x2000058c
 8001a58:	200004d0 	.word	0x200004d0
 8001a5c:	20000558 	.word	0x20000558
 8001a60:	2000058b 	.word	0x2000058b
 8001a64:	20000518 	.word	0x20000518
 8001a68:	2000058a 	.word	0x2000058a
 8001a6c:	0800a720 	.word	0x0800a720

08001a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b090      	sub	sp, #64	@ 0x40
 8001a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a76:	f107 0318 	add.w	r3, r7, #24
 8001a7a:	2228      	movs	r2, #40	@ 0x28
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f005 f85d 	bl	8006b3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fa71 	bl	8002fa0 <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ac4:	f000 f99c 	bl	8001e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2302      	movs	r3, #2
 8001ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fcde 	bl	80034a4 <HAL_RCC_ClockConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001aee:	f000 f987 	bl	8001e00 <Error_Handler>
  }
}
 8001af2:	bf00      	nop
 8001af4:	3740      	adds	r7, #64	@ 0x40
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b18:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b22:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b30:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b42:	4814      	ldr	r0, [pc, #80]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b44:	f001 fe3c 	bl	80037c0 <HAL_TIM_Base_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b4e:	f000 f957 	bl	8001e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b60:	f001 ffc0 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b6a:	f000 f949 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b76:	463b      	mov	r3, r7
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <MX_TIM2_Init+0x98>)
 8001b7c:	f002 f9a2 	bl	8003ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b86:	f000 f93b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001f0 	.word	0x200001f0

08001b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <MX_TIM3_Init+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bbc:	2223      	movs	r2, #35	@ 0x23
 8001bbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20-1;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bc8:	2213      	movs	r2, #19
 8001bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bd8:	4813      	ldr	r0, [pc, #76]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bda:	f001 fdf1 	bl	80037c0 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001be4:	f000 f90c 	bl	8001e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001bf6:	f001 ff75 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c00:	f000 f8fe 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_TIM3_Init+0x90>)
 8001c12:	f002 f957 	bl	8003ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c1c:	f000 f8f0 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000238 	.word	0x20000238
 8001c2c:	40000400 	.word	0x40000400

08001c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <MX_USART2_UART_Init+0x50>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <MX_USART2_UART_Init+0x4c>)
 8001c68:	f002 f99c 	bl	8003fa4 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c72:	f000 f8c5 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000280 	.word	0x20000280
 8001c80:	40004400 	.word	0x40004400

08001c84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c88:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <MX_USART3_UART_Init+0x50>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cba:	4805      	ldr	r0, [pc, #20]	@ (8001cd0 <MX_USART3_UART_Init+0x4c>)
 8001cbc:	f002 f972 	bl	8003fa4 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cc6:	f000 f89b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002c8 	.word	0x200002c8
 8001cd4:	40004800 	.word	0x40004800

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <MX_DMA_Init+0x68>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4a17      	ldr	r2, [pc, #92]	@ (8001d40 <MX_DMA_Init+0x68>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6153      	str	r3, [r2, #20]
 8001cea:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_DMA_Init+0x68>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	200c      	movs	r0, #12
 8001cfc:	f000 fcdb 	bl	80026b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001d00:	200c      	movs	r0, #12
 8001d02:	f000 fcf4 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	200d      	movs	r0, #13
 8001d0c:	f000 fcd3 	bl	80026b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d10:	200d      	movs	r0, #13
 8001d12:	f000 fcec 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2010      	movs	r0, #16
 8001d1c:	f000 fccb 	bl	80026b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f000 fce4 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2011      	movs	r0, #17
 8001d2c:	f000 fcc3 	bl	80026b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d30:	2011      	movs	r0, #17
 8001d32:	f000 fcdc 	bl	80026ee <HAL_NVIC_EnableIRQ>

}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b17      	ldr	r3, [pc, #92]	@ (8001df4 <MX_GPIO_Init+0xb0>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE1_Pin|ENABLE2_Pin|STEP1_Pin|STEP2_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	21f0      	movs	r1, #240	@ 0xf0
 8001da4:	4814      	ldr	r0, [pc, #80]	@ (8001df8 <MX_GPIO_Init+0xb4>)
 8001da6:	f001 f8e3 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2103      	movs	r1, #3
 8001dae:	4813      	ldr	r0, [pc, #76]	@ (8001dfc <MX_GPIO_Init+0xb8>)
 8001db0:	f001 f8de 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE1_Pin ENABLE2_Pin STEP1_Pin STEP2_Pin */
  GPIO_InitStruct.Pin = ENABLE1_Pin|ENABLE2_Pin|STEP1_Pin|STEP2_Pin;
 8001db4:	23f0      	movs	r3, #240	@ 0xf0
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480b      	ldr	r0, [pc, #44]	@ (8001df8 <MX_GPIO_Init+0xb4>)
 8001dcc:	f000 ff4c 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_GPIO_Init+0xb8>)
 8001de8:	f000 ff3e 	bl	8002c68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <Error_Handler+0x8>

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_MspInit+0x5c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_MspInit+0x60>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_MspInit+0x60>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e80:	d114      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f000 fc09 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea4:	201c      	movs	r0, #28
 8001ea6:	f000 fc22 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eaa:	e018      	b.n	8001ede <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001eec <HAL_TIM_Base_MspInit+0x7c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d113      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	61d3      	str	r3, [r2, #28]
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_TIM_Base_MspInit+0x78>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	201d      	movs	r0, #29
 8001ed4:	f000 fbef 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ed8:	201d      	movs	r0, #29
 8001eda:	f000 fc08 	bl	80026ee <HAL_NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40000400 	.word	0x40000400

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a8c      	ldr	r2, [pc, #560]	@ (800213c <HAL_UART_MspInit+0x24c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	f040 8085 	bne.w	800201c <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	4b8b      	ldr	r3, [pc, #556]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a8a      	ldr	r2, [pc, #552]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b88      	ldr	r3, [pc, #544]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b85      	ldr	r3, [pc, #532]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	4a84      	ldr	r2, [pc, #528]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	6193      	str	r3, [r2, #24]
 8001f36:	4b82      	ldr	r3, [pc, #520]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PC_TO_MCU_TX_Pin;
 8001f42:	2304      	movs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PC_TO_MCU_TX_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	4619      	mov	r1, r3
 8001f54:	487b      	ldr	r0, [pc, #492]	@ (8002144 <HAL_UART_MspInit+0x254>)
 8001f56:	f000 fe87 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_TO_MCU_RX_Pin;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PC_TO_MCU_RX_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 0318 	add.w	r3, r7, #24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4875      	ldr	r0, [pc, #468]	@ (8002144 <HAL_UART_MspInit+0x254>)
 8001f6e:	f000 fe7b 	bl	8002c68 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f72:	4b75      	ldr	r3, [pc, #468]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f74:	4a75      	ldr	r2, [pc, #468]	@ (800214c <HAL_UART_MspInit+0x25c>)
 8001f76:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f78:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7e:	4b72      	ldr	r3, [pc, #456]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f84:	4b70      	ldr	r3, [pc, #448]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f90:	4b6d      	ldr	r3, [pc, #436]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f96:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f98:	2220      	movs	r2, #32
 8001f9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fa2:	4869      	ldr	r0, [pc, #420]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001fa4:	f000 fbbe 	bl	8002724 <HAL_DMA_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001fae:	f7ff ff27 	bl	8001e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a64      	ldr	r2, [pc, #400]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fb8:	4a63      	ldr	r2, [pc, #396]	@ (8002148 <HAL_UART_MspInit+0x258>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001fbe:	4b64      	ldr	r3, [pc, #400]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fc0:	4a64      	ldr	r2, [pc, #400]	@ (8002154 <HAL_UART_MspInit+0x264>)
 8001fc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc4:	4b62      	ldr	r3, [pc, #392]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b61      	ldr	r3, [pc, #388]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fd2:	2280      	movs	r2, #128	@ 0x80
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fe2:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fee:	4858      	ldr	r0, [pc, #352]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8001ff0:	f000 fb98 	bl	8002724 <HAL_DMA_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001ffa:	f7ff ff01 	bl	8001e00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a53      	ldr	r2, [pc, #332]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38
 8002004:	4a52      	ldr	r2, [pc, #328]	@ (8002150 <HAL_UART_MspInit+0x260>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2026      	movs	r0, #38	@ 0x26
 8002010:	f000 fb51 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002014:	2026      	movs	r0, #38	@ 0x26
 8002016:	f000 fb6a 	bl	80026ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800201a:	e08b      	b.n	8002134 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a4d      	ldr	r2, [pc, #308]	@ (8002158 <HAL_UART_MspInit+0x268>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 8086 	bne.w	8002134 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002028:	4b45      	ldr	r3, [pc, #276]	@ (8002140 <HAL_UART_MspInit+0x250>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a44      	ldr	r2, [pc, #272]	@ (8002140 <HAL_UART_MspInit+0x250>)
 800202e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b42      	ldr	r3, [pc, #264]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002040:	4b3f      	ldr	r3, [pc, #252]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a3e      	ldr	r2, [pc, #248]	@ (8002140 <HAL_UART_MspInit+0x250>)
 8002046:	f043 0308 	orr.w	r3, r3, #8
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <HAL_UART_MspInit+0x250>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLUETOOTH_TX_Pin;
 8002058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BLUETOOTH_TX_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	4619      	mov	r1, r3
 800206c:	483b      	ldr	r0, [pc, #236]	@ (800215c <HAL_UART_MspInit+0x26c>)
 800206e:	f000 fdfb 	bl	8002c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUETOOTH_RX_Pin;
 8002072:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BLUETOOTH_RX_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	4619      	mov	r1, r3
 8002086:	4835      	ldr	r0, [pc, #212]	@ (800215c <HAL_UART_MspInit+0x26c>)
 8002088:	f000 fdee 	bl	8002c68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800208c:	4b34      	ldr	r3, [pc, #208]	@ (8002160 <HAL_UART_MspInit+0x270>)
 800208e:	4a35      	ldr	r2, [pc, #212]	@ (8002164 <HAL_UART_MspInit+0x274>)
 8002090:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002092:	4b33      	ldr	r3, [pc, #204]	@ (8002160 <HAL_UART_MspInit+0x270>)
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_UART_MspInit+0x270>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020b2:	2220      	movs	r2, #32
 80020b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020bc:	4828      	ldr	r0, [pc, #160]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020be:	f000 fb31 	bl	8002724 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80020c8:	f7ff fe9a 	bl	8001e00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a24      	ldr	r2, [pc, #144]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020d2:	4a23      	ldr	r2, [pc, #140]	@ (8002160 <HAL_UART_MspInit+0x270>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020da:	4a24      	ldr	r2, [pc, #144]	@ (800216c <HAL_UART_MspInit+0x27c>)
 80020dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020e0:	2210      	movs	r2, #16
 80020e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e4:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_UART_MspInit+0x278>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002102:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <HAL_UART_MspInit+0x278>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002108:	4817      	ldr	r0, [pc, #92]	@ (8002168 <HAL_UART_MspInit+0x278>)
 800210a:	f000 fb0b 	bl	8002724 <HAL_DMA_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002114:	f7ff fe74 	bl	8001e00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <HAL_UART_MspInit+0x278>)
 800211c:	639a      	str	r2, [r3, #56]	@ 0x38
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <HAL_UART_MspInit+0x278>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	2027      	movs	r0, #39	@ 0x27
 800212a:	f000 fac4 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800212e:	2027      	movs	r0, #39	@ 0x27
 8002130:	f000 fadd 	bl	80026ee <HAL_NVIC_EnableIRQ>
}
 8002134:	bf00      	nop
 8002136:	3728      	adds	r7, #40	@ 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40004400 	.word	0x40004400
 8002140:	40021000 	.word	0x40021000
 8002144:	40010800 	.word	0x40010800
 8002148:	20000310 	.word	0x20000310
 800214c:	4002006c 	.word	0x4002006c
 8002150:	20000354 	.word	0x20000354
 8002154:	40020080 	.word	0x40020080
 8002158:	40004800 	.word	0x40004800
 800215c:	40010c00 	.word	0x40010c00
 8002160:	20000398 	.word	0x20000398
 8002164:	40020030 	.word	0x40020030
 8002168:	200003dc 	.word	0x200003dc
 800216c:	4002001c 	.word	0x4002001c

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <NMI_Handler+0x4>

08002178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <MemManage_Handler+0x4>

08002188 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <BusFault_Handler+0x4>

08002190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <UsageFault_Handler+0x4>

08002198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021c0:	f000 f986 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021cc:	4802      	ldr	r0, [pc, #8]	@ (80021d8 <DMA1_Channel2_IRQHandler+0x10>)
 80021ce:	f000 fc17 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200003dc 	.word	0x200003dc

080021dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021e0:	4802      	ldr	r0, [pc, #8]	@ (80021ec <DMA1_Channel3_IRQHandler+0x10>)
 80021e2:	f000 fc0d 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000398 	.word	0x20000398

080021f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <DMA1_Channel6_IRQHandler+0x10>)
 80021f6:	f000 fc03 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000310 	.word	0x20000310

08002204 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <DMA1_Channel7_IRQHandler+0x10>)
 800220a:	f000 fbf9 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000354 	.word	0x20000354

08002218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <TIM2_IRQHandler+0x10>)
 800221e:	f001 fb71 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200001f0 	.word	0x200001f0

0800222c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <TIM3_IRQHandler+0x10>)
 8002232:	f001 fb67 	bl	8003904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000238 	.word	0x20000238

08002240 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <USART2_IRQHandler+0x10>)
 8002246:	f001 ff93 	bl	8004170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000280 	.word	0x20000280

08002254 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <USART3_IRQHandler+0x10>)
 800225a:	f001 ff89 	bl	8004170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200002c8 	.word	0x200002c8

08002268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <_kill>:

int _kill(int pid, int sig)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002280:	f004 fcc2 	bl	8006c08 <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	2216      	movs	r2, #22
 8002288:	601a      	str	r2, [r3, #0]
  return -1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_exit>:

void _exit (int status)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800229e:	f04f 31ff 	mov.w	r1, #4294967295
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffe7 	bl	8002276 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <_exit+0x12>

080022ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	e00a      	b.n	80022d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022be:	f3af 8000 	nop.w
 80022c2:	4601      	mov	r1, r0
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	dbf0      	blt.n	80022be <_read+0x12>
  }

  return len;
 80022dc:	687b      	ldr	r3, [r7, #4]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e009      	b.n	800230c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	dbf1      	blt.n	80022f8 <_write+0x12>
  }
  return len;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_close>:

int _close(int file)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002344:	605a      	str	r2, [r3, #4]
  return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <_isatty>:

int _isatty(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
	...

08002380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002388:	4a14      	ldr	r2, [pc, #80]	@ (80023dc <_sbrk+0x5c>)
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <_sbrk+0x60>)
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <_sbrk+0x64>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <_sbrk+0x68>)
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d207      	bcs.n	80023c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b0:	f004 fc2a 	bl	8006c08 <__errno>
 80023b4:	4603      	mov	r3, r0
 80023b6:	220c      	movs	r2, #12
 80023b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	e009      	b.n	80023d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c6:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <_sbrk+0x64>)
 80023d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20005000 	.word	0x20005000
 80023e0:	00000400 	.word	0x00000400
 80023e4:	20000590 	.word	0x20000590
 80023e8:	200006e8 	.word	0x200006e8

080023ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f8:	f7ff fff8 	bl	80023ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480b      	ldr	r0, [pc, #44]	@ (800242c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023fe:	490c      	ldr	r1, [pc, #48]	@ (8002430 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002400:	4a0c      	ldr	r2, [pc, #48]	@ (8002434 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002414:	4c09      	ldr	r4, [pc, #36]	@ (800243c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002422:	f004 fbf7 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002426:	f7ff fa63 	bl	80018f0 <main>
  bx lr
 800242a:	4770      	bx	lr
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002434:	0800ad68 	.word	0x0800ad68
  ldr r2, =_sbss
 8002438:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800243c:	200006e4 	.word	0x200006e4

08002440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC1_2_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_Init+0x28>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	@ (800246c <HAL_Init+0x28>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 f923 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	200f      	movs	r0, #15
 800245c:	f000 f808 	bl	8002470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff fcd4 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_InitTick+0x54>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x58>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f93b 	bl	800270a <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00e      	b.n	80024bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d80a      	bhi.n	80024ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f000 f903 	bl	80026b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b0:	4a06      	ldr	r2, [pc, #24]	@ (80024cc <HAL_InitTick+0x5c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_IncTick+0x1c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_IncTick+0x20>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a03      	ldr	r2, [pc, #12]	@ (80024f0 <HAL_IncTick+0x20>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20000594 	.word	0x20000594

080024f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b02      	ldr	r3, [pc, #8]	@ (8002504 <HAL_GetTick+0x10>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	20000594 	.word	0x20000594

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	@ (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4906      	ldr	r1, [pc, #24]	@ (80025a0 <__NVIC_EnableIRQ+0x34>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	@ (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff90 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	@ (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff2d 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c8:	f7ff ff42 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	6978      	ldr	r0, [r7, #20]
 80026d4:	f7ff ff90 	bl	80025f8 <NVIC_EncodePriority>
 80026d8:	4602      	mov	r2, r0
 80026da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff5f 	bl	80025a4 <__NVIC_SetPriority>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff35 	bl	800256c <__NVIC_EnableIRQ>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff ffa2 	bl	800265c <SysTick_Config>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e043      	b.n	80027c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <HAL_DMA_Init+0xa8>)
 8002742:	4413      	add	r3, r2
 8002744:	4a22      	ldr	r2, [pc, #136]	@ (80027d0 <HAL_DMA_Init+0xac>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	009a      	lsls	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <HAL_DMA_Init+0xb0>)
 8002756:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800276e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002772:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	bffdfff8 	.word	0xbffdfff8
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	40020000 	.word	0x40020000

080027d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_DMA_Start_IT+0x20>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e04b      	b.n	8002890 <HAL_DMA_Start_IT+0xb8>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d13a      	bne.n	8002882 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0201 	bic.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f9eb 	bl	8002c0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 020e 	orr.w	r2, r2, #14
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e00f      	b.n	8002870 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 020a 	orr.w	r2, r2, #10
 800286e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e005      	b.n	800288e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800288a:	2302      	movs	r3, #2
 800288c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800288e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d008      	beq.n	80028c2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2204      	movs	r2, #4
 80028b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e020      	b.n	8002904 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 020e 	bic.w	r2, r2, #14
 80028d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d005      	beq.n	8002934 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	e051      	b.n	80029d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 020e 	bic.w	r2, r2, #14
 8002942:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a22      	ldr	r2, [pc, #136]	@ (80029e4 <HAL_DMA_Abort_IT+0xd4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d029      	beq.n	80029b2 <HAL_DMA_Abort_IT+0xa2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a21      	ldr	r2, [pc, #132]	@ (80029e8 <HAL_DMA_Abort_IT+0xd8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d022      	beq.n	80029ae <HAL_DMA_Abort_IT+0x9e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ec <HAL_DMA_Abort_IT+0xdc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x98>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_DMA_Abort_IT+0xe0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d012      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x92>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <HAL_DMA_Abort_IT+0xe4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00a      	beq.n	800299c <HAL_DMA_Abort_IT+0x8c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <HAL_DMA_Abort_IT+0xe8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_DMA_Abort_IT+0x86>
 8002990:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002994:	e00e      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 8002996:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800299a:	e00b      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 800299c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a0:	e008      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a6:	e005      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ac:	e002      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029ae:	2310      	movs	r3, #16
 80029b0:	e000      	b.n	80029b4 <HAL_DMA_Abort_IT+0xa4>
 80029b2:	2301      	movs	r3, #1
 80029b4:	4a11      	ldr	r2, [pc, #68]	@ (80029fc <HAL_DMA_Abort_IT+0xec>)
 80029b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
    } 
  }
  return status;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40020008 	.word	0x40020008
 80029e8:	4002001c 	.word	0x4002001c
 80029ec:	40020030 	.word	0x40020030
 80029f0:	40020044 	.word	0x40020044
 80029f4:	40020058 	.word	0x40020058
 80029f8:	4002006c 	.word	0x4002006c
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04f      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xc8>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d04a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d107      	bne.n	8002a50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a66      	ldr	r2, [pc, #408]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d029      	beq.n	8002aae <HAL_DMA_IRQHandler+0xae>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a65      	ldr	r2, [pc, #404]	@ (8002bf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <HAL_DMA_IRQHandler+0xaa>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a63      	ldr	r2, [pc, #396]	@ (8002bf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0xa4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a62      	ldr	r2, [pc, #392]	@ (8002bfc <HAL_DMA_IRQHandler+0x1fc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x9e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a60      	ldr	r2, [pc, #384]	@ (8002c00 <HAL_DMA_IRQHandler+0x200>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x98>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a5f      	ldr	r2, [pc, #380]	@ (8002c04 <HAL_DMA_IRQHandler+0x204>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d102      	bne.n	8002a92 <HAL_DMA_IRQHandler+0x92>
 8002a8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a90:	e00e      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002a96:	e00b      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a9c:	e008      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002a9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002aa2:	e005      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aa8:	e002      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aaa:	2340      	movs	r3, #64	@ 0x40
 8002aac:	e000      	b.n	8002ab0 <HAL_DMA_IRQHandler+0xb0>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	4a55      	ldr	r2, [pc, #340]	@ (8002c08 <HAL_DMA_IRQHandler+0x208>)
 8002ab2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 8094 	beq.w	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ac6:	e08e      	b.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	2202      	movs	r2, #2
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d056      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x186>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d051      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020a 	bic.w	r2, r2, #10
 8002afe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a38      	ldr	r2, [pc, #224]	@ (8002bf0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d029      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x166>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a37      	ldr	r2, [pc, #220]	@ (8002bf4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x162>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a35      	ldr	r2, [pc, #212]	@ (8002bf8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x15c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a34      	ldr	r2, [pc, #208]	@ (8002bfc <HAL_DMA_IRQHandler+0x1fc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d012      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x156>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a32      	ldr	r2, [pc, #200]	@ (8002c00 <HAL_DMA_IRQHandler+0x200>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00a      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x150>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a31      	ldr	r2, [pc, #196]	@ (8002c04 <HAL_DMA_IRQHandler+0x204>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x14a>
 8002b44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b48:	e00e      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b4e:	e00b      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b54:	e008      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b5a:	e005      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b60:	e002      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b62:	2320      	movs	r3, #32
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_IRQHandler+0x168>
 8002b66:	2302      	movs	r3, #2
 8002b68:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <HAL_DMA_IRQHandler+0x208>)
 8002b6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d034      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b84:	e02f      	b.n	8002be6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d028      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d023      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 020e 	bic.w	r2, r2, #14
 8002bae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    }
  }
  return;
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
}
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40020008 	.word	0x40020008
 8002bf4:	4002001c 	.word	0x4002001c
 8002bf8:	40020030 	.word	0x40020030
 8002bfc:	40020044 	.word	0x40020044
 8002c00:	40020058 	.word	0x40020058
 8002c04:	4002006c 	.word	0x4002006c
 8002c08:	40020000 	.word	0x40020000

08002c0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c22:	2101      	movs	r1, #1
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b08b      	sub	sp, #44	@ 0x2c
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	e169      	b.n	8002f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f040 8158 	bne.w	8002f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8002f08 <HAL_GPIO_Init+0x2a0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d05e      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002ca4:	4a98      	ldr	r2, [pc, #608]	@ (8002f08 <HAL_GPIO_Init+0x2a0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d875      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002caa:	4a98      	ldr	r2, [pc, #608]	@ (8002f0c <HAL_GPIO_Init+0x2a4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d058      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cb0:	4a96      	ldr	r2, [pc, #600]	@ (8002f0c <HAL_GPIO_Init+0x2a4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d86f      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cb6:	4a96      	ldr	r2, [pc, #600]	@ (8002f10 <HAL_GPIO_Init+0x2a8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d052      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cbc:	4a94      	ldr	r2, [pc, #592]	@ (8002f10 <HAL_GPIO_Init+0x2a8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d869      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cc2:	4a94      	ldr	r2, [pc, #592]	@ (8002f14 <HAL_GPIO_Init+0x2ac>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04c      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cc8:	4a92      	ldr	r2, [pc, #584]	@ (8002f14 <HAL_GPIO_Init+0x2ac>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d863      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cce:	4a92      	ldr	r2, [pc, #584]	@ (8002f18 <HAL_GPIO_Init+0x2b0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d046      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
 8002cd4:	4a90      	ldr	r2, [pc, #576]	@ (8002f18 <HAL_GPIO_Init+0x2b0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d85d      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d82a      	bhi.n	8002d34 <HAL_GPIO_Init+0xcc>
 8002cde:	2b12      	cmp	r3, #18
 8002ce0:	d859      	bhi.n	8002d96 <HAL_GPIO_Init+0x12e>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <HAL_GPIO_Init+0x80>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d63 	.word	0x08002d63
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d4f 	.word	0x08002d4f
 8002cf4:	08002d91 	.word	0x08002d91
 8002cf8:	08002d97 	.word	0x08002d97
 8002cfc:	08002d97 	.word	0x08002d97
 8002d00:	08002d97 	.word	0x08002d97
 8002d04:	08002d97 	.word	0x08002d97
 8002d08:	08002d97 	.word	0x08002d97
 8002d0c:	08002d97 	.word	0x08002d97
 8002d10:	08002d97 	.word	0x08002d97
 8002d14:	08002d97 	.word	0x08002d97
 8002d18:	08002d97 	.word	0x08002d97
 8002d1c:	08002d97 	.word	0x08002d97
 8002d20:	08002d97 	.word	0x08002d97
 8002d24:	08002d97 	.word	0x08002d97
 8002d28:	08002d97 	.word	0x08002d97
 8002d2c:	08002d45 	.word	0x08002d45
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	4a79      	ldr	r2, [pc, #484]	@ (8002f1c <HAL_GPIO_Init+0x2b4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d3a:	e02c      	b.n	8002d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e029      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e024      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	3308      	adds	r3, #8
 8002d54:	623b      	str	r3, [r7, #32]
          break;
 8002d56:	e01f      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	623b      	str	r3, [r7, #32]
          break;
 8002d60:	e01a      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	623b      	str	r3, [r7, #32]
          break;
 8002d6e:	e013      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	611a      	str	r2, [r3, #16]
          break;
 8002d82:	e009      	b.n	8002d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	615a      	str	r2, [r3, #20]
          break;
 8002d8e:	e003      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
          break;
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x130>
          break;
 8002d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	@ 0xff
 8002d9c:	d801      	bhi.n	8002da2 <HAL_GPIO_Init+0x13a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	e001      	b.n	8002da6 <HAL_GPIO_Init+0x13e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2bff      	cmp	r3, #255	@ 0xff
 8002dac:	d802      	bhi.n	8002db4 <HAL_GPIO_Init+0x14c>
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x152>
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	3b08      	subs	r3, #8
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	210f      	movs	r1, #15
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	401a      	ands	r2, r3
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80b1 	beq.w	8002f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	4a4c      	ldr	r2, [pc, #304]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6193      	str	r3, [r2, #24]
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_GPIO_Init+0x2b8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e00:	4a48      	ldr	r2, [pc, #288]	@ (8002f24 <HAL_GPIO_Init+0x2bc>)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a40      	ldr	r2, [pc, #256]	@ (8002f28 <HAL_GPIO_Init+0x2c0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1ec>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <HAL_GPIO_Init+0x2c4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1e8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a3e      	ldr	r2, [pc, #248]	@ (8002f30 <HAL_GPIO_Init+0x2c8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1e4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f34 <HAL_GPIO_Init+0x2cc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1e0>
 8002e44:	2303      	movs	r3, #3
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1ee>
 8002e54:	2300      	movs	r3, #0
 8002e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e66:	492f      	ldr	r1, [pc, #188]	@ (8002f24 <HAL_GPIO_Init+0x2bc>)
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e80:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	492c      	ldr	r1, [pc, #176]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
 8002e8c:	e006      	b.n	8002e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4928      	ldr	r1, [pc, #160]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d006      	beq.n	8002eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ea8:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4922      	ldr	r1, [pc, #136]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb6:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	491e      	ldr	r1, [pc, #120]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d006      	beq.n	8002ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4918      	ldr	r1, [pc, #96]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ede:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	4914      	ldr	r1, [pc, #80]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d021      	beq.n	8002f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	490e      	ldr	r1, [pc, #56]	@ (8002f38 <HAL_GPIO_Init+0x2d0>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
 8002f04:	e021      	b.n	8002f4a <HAL_GPIO_Init+0x2e2>
 8002f06:	bf00      	nop
 8002f08:	10320000 	.word	0x10320000
 8002f0c:	10310000 	.word	0x10310000
 8002f10:	10220000 	.word	0x10220000
 8002f14:	10210000 	.word	0x10210000
 8002f18:	10120000 	.word	0x10120000
 8002f1c:	10110000 	.word	0x10110000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	40010800 	.word	0x40010800
 8002f2c:	40010c00 	.word	0x40010c00
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_GPIO_Init+0x304>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	4909      	ldr	r1, [pc, #36]	@ (8002f6c <HAL_GPIO_Init+0x304>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f47f ae8e 	bne.w	8002c7c <HAL_GPIO_Init+0x14>
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	372c      	adds	r7, #44	@ 0x2c
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	40010400 	.word	0x40010400

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	611a      	str	r2, [r3, #16]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e272      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
 8002fd8:	4b8c      	ldr	r3, [pc, #560]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06c      	beq.n	80030cc <HAL_RCC_OscConfig+0x12c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e24c      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x76>
 8003008:	4b80      	ldr	r3, [pc, #512]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7f      	ldr	r2, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b7b      	ldr	r3, [pc, #492]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7a      	ldr	r2, [pc, #488]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a77      	ldr	r2, [pc, #476]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xbc>
 8003042:	4b72      	ldr	r3, [pc, #456]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a71      	ldr	r2, [pc, #452]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b6f      	ldr	r3, [pc, #444]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6e      	ldr	r2, [pc, #440]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 800305c:	4b6b      	ldr	r3, [pc, #428]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6a      	ldr	r2, [pc, #424]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b68      	ldr	r3, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a67      	ldr	r2, [pc, #412]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7ff fa3a 	bl	80024f4 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7ff fa36 	bl	80024f4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e200      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b5d      	ldr	r3, [pc, #372]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xe4>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7ff fa26 	bl	80024f4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7ff fa22 	bl	80024f4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1ec      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b53      	ldr	r3, [pc, #332]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x10c>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d063      	beq.n	80031a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030da:	4b4c      	ldr	r3, [pc, #304]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
 80030f2:	4b46      	ldr	r3, [pc, #280]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1c0      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4939      	ldr	r1, [pc, #228]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	e03a      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b36      	ldr	r3, [pc, #216]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7ff f9db 	bl	80024f4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7ff f9d7 	bl	80024f4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1a1      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003154:	4b2d      	ldr	r3, [pc, #180]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4927      	ldr	r1, [pc, #156]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
 8003174:	e015      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003176:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <HAL_RCC_OscConfig+0x270>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff f9ba 	bl	80024f4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7ff f9b6 	bl	80024f4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e180      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1d      	ldr	r3, [pc, #116]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03a      	beq.n	8003224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7ff f99a 	bl	80024f4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c4:	f7ff f996 	bl	80024f4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e160      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f000 face 	bl	8003784 <RCC_Delay>
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003214 <HAL_RCC_OscConfig+0x274>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7ff f980 	bl	80024f4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f6:	e00f      	b.n	8003218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7ff f97c 	bl	80024f4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d908      	bls.n	8003218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e146      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	42420000 	.word	0x42420000
 8003214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	4b92      	ldr	r3, [pc, #584]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e9      	bne.n	80031f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a6 	beq.w	800337e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b8b      	ldr	r3, [pc, #556]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b88      	ldr	r3, [pc, #544]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a87      	ldr	r2, [pc, #540]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b85      	ldr	r3, [pc, #532]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b82      	ldr	r3, [pc, #520]	@ (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b7f      	ldr	r3, [pc, #508]	@ (8003468 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7e      	ldr	r2, [pc, #504]	@ (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7ff f93d 	bl	80024f4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7ff f939 	bl	80024f4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	@ 0x64
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e103      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b75      	ldr	r3, [pc, #468]	@ (8003468 <HAL_RCC_OscConfig+0x4c8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x312>
 80032a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e02d      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x334>
 80032ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a69      	ldr	r2, [pc, #420]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6213      	str	r3, [r2, #32]
 80032c6:	4b67      	ldr	r3, [pc, #412]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a66      	ldr	r2, [pc, #408]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x356>
 80032dc:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a60      	ldr	r2, [pc, #384]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6213      	str	r3, [r2, #32]
 80032e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b58      	ldr	r3, [pc, #352]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a57      	ldr	r2, [pc, #348]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7ff f8ed 	bl	80024f4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7ff f8e9 	bl	80024f4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0b1      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b4b      	ldr	r3, [pc, #300]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x37e>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7ff f8d7 	bl	80024f4 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7ff f8d3 	bl	80024f4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e09b      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a3b      	ldr	r2, [pc, #236]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8087 	beq.w	8003496 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003388:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d061      	beq.n	8003458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d146      	bne.n	800342a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b33      	ldr	r3, [pc, #204]	@ (800346c <HAL_RCC_OscConfig+0x4cc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7ff f8a7 	bl	80024f4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7ff f8a3 	bl	80024f4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e06d      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	4b29      	ldr	r3, [pc, #164]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d2:	4b24      	ldr	r3, [pc, #144]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4921      	ldr	r1, [pc, #132]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a19      	ldr	r1, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	430b      	orrs	r3, r1
 80033f6:	491b      	ldr	r1, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b1b      	ldr	r3, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x4cc>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff f877 	bl	80024f4 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff f873 	bl	80024f4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03d      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x46a>
 8003428:	e035      	b.n	8003496 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_OscConfig+0x4cc>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff f860 	bl	80024f4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff f85c 	bl	80024f4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e026      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x498>
 8003456:	e01e      	b.n	8003496 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e019      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
 800346c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <HAL_RCC_OscConfig+0x500>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	429a      	cmp	r2, r3
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0d0      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d910      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4965      	ldr	r1, [pc, #404]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b63      	ldr	r3, [pc, #396]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0b8      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d020      	beq.n	8003536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003500:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a58      	ldr	r2, [pc, #352]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800350a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003518:	4b53      	ldr	r3, [pc, #332]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a52      	ldr	r2, [pc, #328]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003524:	4b50      	ldr	r3, [pc, #320]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	494d      	ldr	r1, [pc, #308]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d040      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d115      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07f      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003562:	4b41      	ldr	r3, [pc, #260]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e073      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	4b3d      	ldr	r3, [pc, #244]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06b      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003582:	4b39      	ldr	r3, [pc, #228]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4936      	ldr	r1, [pc, #216]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003594:	f7fe ffae 	bl	80024f4 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800359c:	f7fe ffaa 	bl	80024f4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e053      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 020c 	and.w	r2, r3, #12
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d1eb      	bne.n	800359c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c4:	4b27      	ldr	r3, [pc, #156]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d210      	bcs.n	80035f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 0207 	bic.w	r2, r3, #7
 80035da:	4922      	ldr	r1, [pc, #136]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e032      	b.n	800365a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003600:	4b19      	ldr	r3, [pc, #100]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4916      	ldr	r1, [pc, #88]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361e:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	490e      	ldr	r1, [pc, #56]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003632:	f000 f821 	bl	8003678 <HAL_RCC_GetSysClockFreq>
 8003636:	4602      	mov	r2, r0
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	490a      	ldr	r1, [pc, #40]	@ (800366c <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	5ccb      	ldrb	r3, [r1, r3]
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a09      	ldr	r2, [pc, #36]	@ (8003670 <HAL_RCC_ClockConfig+0x1cc>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364e:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_ClockConfig+0x1d0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe ff0c 	bl	8002470 <HAL_InitTick>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40022000 	.word	0x40022000
 8003668:	40021000 	.word	0x40021000
 800366c:	0800a72c 	.word	0x0800a72c
 8003670:	20000000 	.word	0x20000000
 8003674:	20000004 	.word	0x20000004

08003678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003692:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <HAL_RCC_GetSysClockFreq+0x94>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x30>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_GetSysClockFreq+0x36>
 80036a6:	e027      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a8:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x98>)
 80036aa:	613b      	str	r3, [r7, #16]
      break;
 80036ac:	e027      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0c9b      	lsrs	r3, r3, #18
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b8:	5cd3      	ldrb	r3, [r2, r3]
 80036ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d010      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036c6:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_RCC_GetSysClockFreq+0x94>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0c5b      	lsrs	r3, r3, #17
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	4a11      	ldr	r2, [pc, #68]	@ (8003718 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036d2:	5cd3      	ldrb	r3, [r2, r3]
 80036d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x98>)
 80036da:	fb03 f202 	mul.w	r2, r3, r2
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e004      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a0c      	ldr	r2, [pc, #48]	@ (800371c <HAL_RCC_GetSysClockFreq+0xa4>)
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	613b      	str	r3, [r7, #16]
      break;
 80036f6:	e002      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x98>)
 80036fa:	613b      	str	r3, [r7, #16]
      break;
 80036fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fe:	693b      	ldr	r3, [r7, #16]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	007a1200 	.word	0x007a1200
 8003714:	0800a744 	.word	0x0800a744
 8003718:	0800a754 	.word	0x0800a754
 800371c:	003d0900 	.word	0x003d0900

08003720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003724:	4b02      	ldr	r3, [pc, #8]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x10>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	20000000 	.word	0x20000000

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff2 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4903      	ldr	r1, [pc, #12]	@ (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	0800a73c 	.word	0x0800a73c

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffde 	bl	8003720 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0adb      	lsrs	r3, r3, #11
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	0800a73c 	.word	0x0800a73c

08003784 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <RCC_Delay+0x34>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <RCC_Delay+0x38>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0a5b      	lsrs	r3, r3, #9
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037a0:	bf00      	nop
  }
  while (Delay --);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1e5a      	subs	r2, r3, #1
 80037a6:	60fa      	str	r2, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <RCC_Delay+0x1c>
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	20000000 	.word	0x20000000
 80037bc:	10624dd3 	.word	0x10624dd3

080037c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e041      	b.n	8003856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fb42 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f000 fa5c 	bl	8003cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e03a      	b.n	80038ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a18      	ldr	r2, [pc, #96]	@ (80038f8 <HAL_TIM_Base_Start_IT+0x98>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <HAL_TIM_Base_Start_IT+0x9c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x58>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <HAL_TIM_Base_Start_IT+0xa0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d010      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	e007      	b.n	80038ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800

08003904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d020      	beq.n	8003968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01b      	beq.n	8003968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0202 	mvn.w	r2, #2
 8003938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f998 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f98b 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f99a 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d020      	beq.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01b      	beq.n	80039b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f972 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f965 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f974 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d020      	beq.n	8003a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0208 	mvn.w	r2, #8
 80039d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2204      	movs	r2, #4
 80039d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f94c 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80039ec:	e005      	b.n	80039fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f93f 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f94e 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d020      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0210 	mvn.w	r2, #16
 8003a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2208      	movs	r2, #8
 8003a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f926 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003a38:	e005      	b.n	8003a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f919 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f928 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0201 	mvn.w	r2, #1
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fcea 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa7f 	bl	8003f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8f8 	bl	8003ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0220 	mvn.w	r2, #32
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa52 	bl	8003f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b4      	b.n	8003c6a <HAL_TIM_ConfigClockSource+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d03e      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	f200 8087 	bhi.w	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	f000 8086 	beq.w	8003c56 <HAL_TIM_ConfigClockSource+0x172>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d87f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b70      	cmp	r3, #112	@ 0x70
 8003b52:	d01a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xa6>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d87b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b60      	cmp	r3, #96	@ 0x60
 8003b5a:	d050      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x11a>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d877      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b50      	cmp	r3, #80	@ 0x50
 8003b62:	d03c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0xfa>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d873      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d058      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x13a>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d86f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d064      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d867      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d05a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	e062      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	f000 f974 	bl	8003e86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
      break;
 8003bb6:	e04f      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	f000 f95d 	bl	8003e86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 f8d4 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	@ 0x50
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f92b 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 f8f2 	bl	8003df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	@ 0x60
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f91b 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 f8b4 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f90b 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 f902 	bl	8003e52 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
	...

08003cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	@ (8003d8c <TIM_Base_SetConfig+0xd0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_Base_SetConfig+0x30>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cda:	d007      	beq.n	8003cec <TIM_Base_SetConfig+0x30>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a2c      	ldr	r2, [pc, #176]	@ (8003d90 <TIM_Base_SetConfig+0xd4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0x30>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d94 <TIM_Base_SetConfig+0xd8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d108      	bne.n	8003cfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a22      	ldr	r2, [pc, #136]	@ (8003d8c <TIM_Base_SetConfig+0xd0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_Base_SetConfig+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d007      	beq.n	8003d1e <TIM_Base_SetConfig+0x62>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <TIM_Base_SetConfig+0xd4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_Base_SetConfig+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1e      	ldr	r2, [pc, #120]	@ (8003d94 <TIM_Base_SetConfig+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <TIM_Base_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d103      	bne.n	8003d64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	611a      	str	r2, [r3, #16]
  }
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	031b      	lsls	r3, r3, #12
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b085      	sub	sp, #20
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e046      	b.n	8003f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f28:	d009      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	@ (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a10      	ldr	r2, [pc, #64]	@ (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d10c      	bne.n	8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800

08003f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e042      	b.n	800403c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd ff90 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 ff2f 	bl	8004e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800400c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800401c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	@ 0x30
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b20      	cmp	r3, #32
 800405c:	d156      	bne.n	800410c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_UART_Transmit_DMA+0x26>
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e04f      	b.n	800410e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	88fa      	ldrh	r2, [r7, #6]
 8004078:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2221      	movs	r2, #33	@ 0x21
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	4a21      	ldr	r2, [pc, #132]	@ (8004118 <HAL_UART_Transmit_DMA+0xd4>)
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	4a20      	ldr	r2, [pc, #128]	@ (800411c <HAL_UART_Transmit_DMA+0xd8>)
 800409c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <HAL_UART_Transmit_DMA+0xdc>)
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	2200      	movs	r2, #0
 80040ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80040b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3304      	adds	r3, #4
 80040c2:	461a      	mov	r2, r3
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	f7fe fb87 	bl	80027d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	617b      	str	r3, [r7, #20]
   return(result);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040f6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6a39      	ldr	r1, [r7, #32]
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	61fb      	str	r3, [r7, #28]
   return(result);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3730      	adds	r7, #48	@ 0x30
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	080046e1 	.word	0x080046e1
 800411c:	0800477b 	.word	0x0800477b
 8004120:	080048ff 	.word	0x080048ff

08004124 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d112      	bne.n	8004164 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_UART_Receive_DMA+0x26>
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e00b      	b.n	8004166 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	461a      	mov	r2, r3
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fc1a 	bl	8004994 <UART_Start_Receive_DMA>
 8004160:	4603      	mov	r3, r0
 8004162:	e000      	b.n	8004166 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b0ba      	sub	sp, #232	@ 0xe8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_UART_IRQHandler+0x66>
 80041c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fd7e 	bl	8004cd0 <UART_Receive_IT>
      return;
 80041d4:	e25b      	b.n	800468e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80de 	beq.w	800439c <HAL_UART_IRQHandler+0x22c>
 80041e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80d1 	beq.w	800439c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <HAL_UART_IRQHandler+0xae>
 8004206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_UART_IRQHandler+0xd2>
 800422a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423a:	f043 0202 	orr.w	r2, r3, #2
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00b      	beq.n	8004266 <HAL_UART_IRQHandler+0xf6>
 800424e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d011      	beq.n	8004296 <HAL_UART_IRQHandler+0x126>
 8004272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800427e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	f043 0208 	orr.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 81f2 	beq.w	8004684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_UART_IRQHandler+0x14e>
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fd09 	bl	8004cd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <HAL_UART_IRQHandler+0x17a>
 80042e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04f      	beq.n	800438a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fc13 	bl	8004b16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d041      	beq.n	8004382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800431c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800432a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800432e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1d9      	bne.n	80042fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d013      	beq.n	800437a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	4a7e      	ldr	r2, [pc, #504]	@ (8004550 <HAL_UART_IRQHandler+0x3e0>)
 8004358:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fad6 	bl	8002910 <HAL_DMA_Abort_IT>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004374:	4610      	mov	r0, r2
 8004376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	e00e      	b.n	8004398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f99c 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e00a      	b.n	8004398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f998 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004388:	e006      	b.n	8004398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f994 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004396:	e175      	b.n	8004684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	bf00      	nop
    return;
 800439a:	e173      	b.n	8004684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	f040 814f 	bne.w	8004644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8148 	beq.w	8004644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8141 	beq.w	8004644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80b6 	beq.w	8004554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8145 	beq.w	8004688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004406:	429a      	cmp	r2, r3
 8004408:	f080 813e 	bcs.w	8004688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004412:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b20      	cmp	r3, #32
 800441c:	f000 8088 	beq.w	8004530 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800443a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800443e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800444c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004458:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1d9      	bne.n	8004420 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800447c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3314      	adds	r3, #20
 800448c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004490:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004494:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004498:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e1      	bne.n	800446c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004500:	f023 0310 	bic.w	r3, r3, #16
 8004504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004512:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004514:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004518:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e3      	bne.n	80044ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe f9b4 	bl	8002898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800453e:	b29b      	uxth	r3, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	b29b      	uxth	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8bf 	bl	80046ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800454c:	e09c      	b.n	8004688 <HAL_UART_IRQHandler+0x518>
 800454e:	bf00      	nop
 8004550:	08004bdb 	.word	0x08004bdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800455c:	b29b      	uxth	r3, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 808e 	beq.w	800468c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8089 	beq.w	800468c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800459e:	647a      	str	r2, [r7, #68]	@ 0x44
 80045a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3314      	adds	r3, #20
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	623b      	str	r3, [r7, #32]
   return(result);
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3314      	adds	r3, #20
 80045d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e3      	bne.n	80045b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	60fb      	str	r3, [r7, #12]
   return(result);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800461c:	61fa      	str	r2, [r7, #28]
 800461e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69b9      	ldr	r1, [r7, #24]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	617b      	str	r3, [r7, #20]
   return(result);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e3      	bne.n	80045f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f844 	bl	80046ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004642:	e023      	b.n	800468c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_UART_IRQHandler+0x4f4>
 8004650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fad0 	bl	8004c02 <UART_Transmit_IT>
    return;
 8004662:	e014      	b.n	800468e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <HAL_UART_IRQHandler+0x51e>
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb0f 	bl	8004ca0 <UART_EndTransmit_IT>
    return;
 8004682:	e004      	b.n	800468e <HAL_UART_IRQHandler+0x51e>
    return;
 8004684:	bf00      	nop
 8004686:	e002      	b.n	800468e <HAL_UART_IRQHandler+0x51e>
      return;
 8004688:	bf00      	nop
 800468a:	e000      	b.n	800468e <HAL_UART_IRQHandler+0x51e>
      return;
 800468c:	bf00      	nop
  }
}
 800468e:	37e8      	adds	r7, #232	@ 0xe8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr

080046a6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr

080046b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b090      	sub	sp, #64	@ 0x40
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d137      	bne.n	800476c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80046fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fe:	2200      	movs	r2, #0
 8004700:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3314      	adds	r3, #20
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	623b      	str	r3, [r7, #32]
   return(result);
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800471a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004722:	633a      	str	r2, [r7, #48]	@ 0x30
 8004724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	60fb      	str	r3, [r7, #12]
   return(result);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474c:	637b      	str	r3, [r7, #52]	@ 0x34
 800474e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	330c      	adds	r3, #12
 8004754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004756:	61fa      	str	r2, [r7, #28]
 8004758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69b9      	ldr	r1, [r7, #24]
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	617b      	str	r3, [r7, #20]
   return(result);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800476a:	e002      	b.n	8004772 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800476c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800476e:	f7ff ff91 	bl	8004694 <HAL_UART_TxCpltCallback>
}
 8004772:	bf00      	nop
 8004774:	3740      	adds	r7, #64	@ 0x40
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff ff8c 	bl	80046a6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b09c      	sub	sp, #112	@ 0x70
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d172      	bne.n	8004898 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b4:	2200      	movs	r2, #0
 80047b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	330c      	adds	r3, #12
 80047d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80047d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	667b      	str	r3, [r7, #100]	@ 0x64
 8004804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3314      	adds	r3, #20
 800480a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800480c:	647a      	str	r2, [r7, #68]	@ 0x44
 800480e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800481a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	623b      	str	r3, [r7, #32]
   return(result);
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004836:	663b      	str	r3, [r7, #96]	@ 0x60
 8004838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004840:	633a      	str	r2, [r7, #48]	@ 0x30
 8004842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e5      	bne.n	8004820 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	d119      	bne.n	8004898 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	60fb      	str	r3, [r7, #12]
   return(result);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0310 	bic.w	r3, r3, #16
 800487a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800487c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004884:	61fa      	str	r2, [r7, #28]
 8004886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	617b      	str	r3, [r7, #20]
   return(result);
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489a:	2200      	movs	r2, #0
 800489c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d106      	bne.n	80048b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048aa:	4619      	mov	r1, r3
 80048ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80048ae:	f7ff ff0c 	bl	80046ca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b2:	e002      	b.n	80048ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80048b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80048b6:	f7fc fdfd 	bl	80014b4 <HAL_UART_RxCpltCallback>
}
 80048ba:	bf00      	nop
 80048bc:	3770      	adds	r7, #112	@ 0x70
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d108      	bne.n	80048f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7ff feee 	bl	80046ca <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ee:	e002      	b.n	80048f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7fc fdc7 	bl	8001484 <HAL_UART_RxHalfCpltCallback>
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b21      	cmp	r3, #33	@ 0x21
 8004930:	d108      	bne.n	8004944 <UART_DMAError+0x46>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800493e:	68b8      	ldr	r0, [r7, #8]
 8004940:	f000 f8c2 	bl	8004ac8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b22      	cmp	r3, #34	@ 0x22
 8004964:	d108      	bne.n	8004978 <UART_DMAError+0x7a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2200      	movs	r2, #0
 8004970:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004972:	68b8      	ldr	r0, [r7, #8]
 8004974:	f000 f8cf 	bl	8004b16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	f043 0210 	orr.w	r2, r3, #16
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004984:	68b8      	ldr	r0, [r7, #8]
 8004986:	f7ff fe97 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b098      	sub	sp, #96	@ 0x60
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	@ 0x22
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	4a3e      	ldr	r2, [pc, #248]	@ (8004abc <UART_Start_Receive_DMA+0x128>)
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ac0 <UART_Start_Receive_DMA+0x12c>)
 80049ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac4 <UART_Start_Receive_DMA+0x130>)
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d8:	2200      	movs	r2, #0
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80049dc:	f107 0308 	add.w	r3, r7, #8
 80049e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	f7fd fef0 	bl	80027d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d019      	beq.n	8004a4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e5      	bne.n	8004a16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3314      	adds	r3, #20
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e5      	bne.n	8004a4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6a39      	ldr	r1, [r7, #32]
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3760      	adds	r7, #96	@ 0x60
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08004797 	.word	0x08004797
 8004ac0:	080048c3 	.word	0x080048c3
 8004ac4:	080048ff 	.word	0x080048ff

08004ac8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	@ 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	e853 3f00 	ldrex	r3, [r3]
 8004ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	61ba      	str	r2, [r7, #24]
 8004af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	6979      	ldr	r1, [r7, #20]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	613b      	str	r3, [r7, #16]
   return(result);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e5      	bne.n	8004ad0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b0c:	bf00      	nop
 8004b0e:	3724      	adds	r7, #36	@ 0x24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b095      	sub	sp, #84	@ 0x54
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	330c      	adds	r3, #12
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d119      	bne.n	8004bc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bae:	61ba      	str	r2, [r7, #24]
 8004bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6979      	ldr	r1, [r7, #20]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	613b      	str	r3, [r7, #16]
   return(result);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e5      	bne.n	8004b8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bd0:	bf00      	nop
 8004bd2:	3754      	adds	r7, #84	@ 0x54
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fd5f 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b21      	cmp	r3, #33	@ 0x21
 8004c14:	d13e      	bne.n	8004c94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1e:	d114      	bne.n	8004c4a <UART_Transmit_IT+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d110      	bne.n	8004c4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	1c9a      	adds	r2, r3, #2
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]
 8004c48:	e008      	b.n	8004c5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6211      	str	r1, [r2, #32]
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fce7 	bl	8004694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08c      	sub	sp, #48	@ 0x30
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b22      	cmp	r3, #34	@ 0x22
 8004ce2:	f040 80ae 	bne.w	8004e42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cee:	d117      	bne.n	8004d20 <UART_Receive_IT+0x50>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d113      	bne.n	8004d20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d1e:	e026      	b.n	8004d6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d32:	d007      	beq.n	8004d44 <UART_Receive_IT+0x74>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <UART_Receive_IT+0x82>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e008      	b.n	8004d64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15d      	bne.n	8004e3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0220 	bic.w	r2, r2, #32
 8004d90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d135      	bne.n	8004e34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	330c      	adds	r3, #12
 8004dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	e853 3f00 	ldrex	r3, [r3]
 8004ddc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f023 0310 	bic.w	r3, r3, #16
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dee:	623a      	str	r2, [r7, #32]
 8004df0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	69f9      	ldr	r1, [r7, #28]
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e5      	bne.n	8004dce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d10a      	bne.n	8004e26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff fc4c 	bl	80046ca <HAL_UARTEx_RxEventCallback>
 8004e32:	e002      	b.n	8004e3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7fc fb3d 	bl	80014b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e002      	b.n	8004e44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3730      	adds	r7, #48	@ 0x30
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e86:	f023 030c 	bic.w	r3, r3, #12
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	430b      	orrs	r3, r1
 8004e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <UART_SetConfig+0x114>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004eb4:	f7fe fc52 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	e002      	b.n	8004ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fe fc3a 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009a      	lsls	r2, r3, #2
 8004ecc:	441a      	add	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	4a22      	ldr	r2, [pc, #136]	@ (8004f64 <UART_SetConfig+0x118>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	0119      	lsls	r1, r3, #4
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	@ 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	4a15      	ldr	r2, [pc, #84]	@ (8004f64 <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f18:	4419      	add	r1, r3
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009a      	lsls	r2, r3, #2
 8004f24:	441a      	add	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f30:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <UART_SetConfig+0x118>)
 8004f32:	fba3 0302 	umull	r0, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2064      	movs	r0, #100	@ 0x64
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	3332      	adds	r3, #50	@ 0x32
 8004f44:	4a07      	ldr	r2, [pc, #28]	@ (8004f64 <UART_SetConfig+0x118>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	440a      	add	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40013800 	.word	0x40013800
 8004f64:	51eb851f 	.word	0x51eb851f

08004f68 <sulp>:
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	460f      	mov	r7, r1
 8004f6e:	4690      	mov	r8, r2
 8004f70:	f003 fcaa 	bl	80088c8 <__ulp>
 8004f74:	4604      	mov	r4, r0
 8004f76:	460d      	mov	r5, r1
 8004f78:	f1b8 0f00 	cmp.w	r8, #0
 8004f7c:	d011      	beq.n	8004fa2 <sulp+0x3a>
 8004f7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004f82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	dd0b      	ble.n	8004fa2 <sulp+0x3a>
 8004f8a:	2400      	movs	r4, #0
 8004f8c:	051b      	lsls	r3, r3, #20
 8004f8e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004f92:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004f96:	4622      	mov	r2, r4
 8004f98:	462b      	mov	r3, r5
 8004f9a:	f7fb fa9d 	bl	80004d8 <__aeabi_dmul>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	460d      	mov	r5, r1
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004faa:	0000      	movs	r0, r0
 8004fac:	0000      	movs	r0, r0
	...

08004fb0 <_strtod_l>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	b09f      	sub	sp, #124	@ 0x7c
 8004fb6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004fb8:	2200      	movs	r2, #0
 8004fba:	460c      	mov	r4, r1
 8004fbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8004fbe:	f04f 0a00 	mov.w	sl, #0
 8004fc2:	f04f 0b00 	mov.w	fp, #0
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	9005      	str	r0, [sp, #20]
 8004fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fcc:	7811      	ldrb	r1, [r2, #0]
 8004fce:	292b      	cmp	r1, #43	@ 0x2b
 8004fd0:	d048      	beq.n	8005064 <_strtod_l+0xb4>
 8004fd2:	d836      	bhi.n	8005042 <_strtod_l+0x92>
 8004fd4:	290d      	cmp	r1, #13
 8004fd6:	d830      	bhi.n	800503a <_strtod_l+0x8a>
 8004fd8:	2908      	cmp	r1, #8
 8004fda:	d830      	bhi.n	800503e <_strtod_l+0x8e>
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d039      	beq.n	8005054 <_strtod_l+0xa4>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004fe4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004fe6:	782a      	ldrb	r2, [r5, #0]
 8004fe8:	2a30      	cmp	r2, #48	@ 0x30
 8004fea:	f040 80b1 	bne.w	8005150 <_strtod_l+0x1a0>
 8004fee:	786a      	ldrb	r2, [r5, #1]
 8004ff0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004ff4:	2a58      	cmp	r2, #88	@ 0x58
 8004ff6:	d16c      	bne.n	80050d2 <_strtod_l+0x122>
 8004ff8:	9302      	str	r3, [sp, #8]
 8004ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ffc:	4a8e      	ldr	r2, [pc, #568]	@ (8005238 <_strtod_l+0x288>)
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	ab1a      	add	r3, sp, #104	@ 0x68
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	9805      	ldr	r0, [sp, #20]
 8005006:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005008:	a919      	add	r1, sp, #100	@ 0x64
 800500a:	f002 fd51 	bl	8007ab0 <__gethex>
 800500e:	f010 060f 	ands.w	r6, r0, #15
 8005012:	4604      	mov	r4, r0
 8005014:	d005      	beq.n	8005022 <_strtod_l+0x72>
 8005016:	2e06      	cmp	r6, #6
 8005018:	d126      	bne.n	8005068 <_strtod_l+0xb8>
 800501a:	2300      	movs	r3, #0
 800501c:	3501      	adds	r5, #1
 800501e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 8584 	bne.w	8005b32 <_strtod_l+0xb82>
 800502a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800502c:	b1bb      	cbz	r3, 800505e <_strtod_l+0xae>
 800502e:	4650      	mov	r0, sl
 8005030:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005034:	b01f      	add	sp, #124	@ 0x7c
 8005036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503a:	2920      	cmp	r1, #32
 800503c:	d1d0      	bne.n	8004fe0 <_strtod_l+0x30>
 800503e:	3201      	adds	r2, #1
 8005040:	e7c3      	b.n	8004fca <_strtod_l+0x1a>
 8005042:	292d      	cmp	r1, #45	@ 0x2d
 8005044:	d1cc      	bne.n	8004fe0 <_strtod_l+0x30>
 8005046:	2101      	movs	r1, #1
 8005048:	910b      	str	r1, [sp, #44]	@ 0x2c
 800504a:	1c51      	adds	r1, r2, #1
 800504c:	9119      	str	r1, [sp, #100]	@ 0x64
 800504e:	7852      	ldrb	r2, [r2, #1]
 8005050:	2a00      	cmp	r2, #0
 8005052:	d1c7      	bne.n	8004fe4 <_strtod_l+0x34>
 8005054:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005056:	9419      	str	r4, [sp, #100]	@ 0x64
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 8568 	bne.w	8005b2e <_strtod_l+0xb7e>
 800505e:	4650      	mov	r0, sl
 8005060:	4659      	mov	r1, fp
 8005062:	e7e7      	b.n	8005034 <_strtod_l+0x84>
 8005064:	2100      	movs	r1, #0
 8005066:	e7ef      	b.n	8005048 <_strtod_l+0x98>
 8005068:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800506a:	b13a      	cbz	r2, 800507c <_strtod_l+0xcc>
 800506c:	2135      	movs	r1, #53	@ 0x35
 800506e:	a81c      	add	r0, sp, #112	@ 0x70
 8005070:	f003 fd1a 	bl	8008aa8 <__copybits>
 8005074:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005076:	9805      	ldr	r0, [sp, #20]
 8005078:	f003 f8f4 	bl	8008264 <_Bfree>
 800507c:	3e01      	subs	r6, #1
 800507e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005080:	2e04      	cmp	r6, #4
 8005082:	d806      	bhi.n	8005092 <_strtod_l+0xe2>
 8005084:	e8df f006 	tbb	[pc, r6]
 8005088:	201d0314 	.word	0x201d0314
 800508c:	14          	.byte	0x14
 800508d:	00          	.byte	0x00
 800508e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005092:	05e1      	lsls	r1, r4, #23
 8005094:	bf48      	it	mi
 8005096:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800509a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800509e:	0d1b      	lsrs	r3, r3, #20
 80050a0:	051b      	lsls	r3, r3, #20
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1bd      	bne.n	8005022 <_strtod_l+0x72>
 80050a6:	f001 fdaf 	bl	8006c08 <__errno>
 80050aa:	2322      	movs	r3, #34	@ 0x22
 80050ac:	6003      	str	r3, [r0, #0]
 80050ae:	e7b8      	b.n	8005022 <_strtod_l+0x72>
 80050b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80050b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80050b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80050bc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80050c0:	e7e7      	b.n	8005092 <_strtod_l+0xe2>
 80050c2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800523c <_strtod_l+0x28c>
 80050c6:	e7e4      	b.n	8005092 <_strtod_l+0xe2>
 80050c8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80050cc:	f04f 3aff 	mov.w	sl, #4294967295
 80050d0:	e7df      	b.n	8005092 <_strtod_l+0xe2>
 80050d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b30      	cmp	r3, #48	@ 0x30
 80050dc:	d0f9      	beq.n	80050d2 <_strtod_l+0x122>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d09f      	beq.n	8005022 <_strtod_l+0x72>
 80050e2:	2301      	movs	r3, #1
 80050e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80050e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80050e8:	220a      	movs	r2, #10
 80050ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80050ec:	2300      	movs	r3, #0
 80050ee:	461f      	mov	r7, r3
 80050f0:	9308      	str	r3, [sp, #32]
 80050f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80050f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80050f6:	7805      	ldrb	r5, [r0, #0]
 80050f8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80050fc:	b2d9      	uxtb	r1, r3
 80050fe:	2909      	cmp	r1, #9
 8005100:	d928      	bls.n	8005154 <_strtod_l+0x1a4>
 8005102:	2201      	movs	r2, #1
 8005104:	494e      	ldr	r1, [pc, #312]	@ (8005240 <_strtod_l+0x290>)
 8005106:	f001 fd22 	bl	8006b4e <strncmp>
 800510a:	2800      	cmp	r0, #0
 800510c:	d032      	beq.n	8005174 <_strtod_l+0x1c4>
 800510e:	2000      	movs	r0, #0
 8005110:	462a      	mov	r2, r5
 8005112:	4681      	mov	r9, r0
 8005114:	463d      	mov	r5, r7
 8005116:	4603      	mov	r3, r0
 8005118:	2a65      	cmp	r2, #101	@ 0x65
 800511a:	d001      	beq.n	8005120 <_strtod_l+0x170>
 800511c:	2a45      	cmp	r2, #69	@ 0x45
 800511e:	d114      	bne.n	800514a <_strtod_l+0x19a>
 8005120:	b91d      	cbnz	r5, 800512a <_strtod_l+0x17a>
 8005122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005124:	4302      	orrs	r2, r0
 8005126:	d095      	beq.n	8005054 <_strtod_l+0xa4>
 8005128:	2500      	movs	r5, #0
 800512a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800512c:	1c62      	adds	r2, r4, #1
 800512e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005130:	7862      	ldrb	r2, [r4, #1]
 8005132:	2a2b      	cmp	r2, #43	@ 0x2b
 8005134:	d077      	beq.n	8005226 <_strtod_l+0x276>
 8005136:	2a2d      	cmp	r2, #45	@ 0x2d
 8005138:	d07b      	beq.n	8005232 <_strtod_l+0x282>
 800513a:	f04f 0c00 	mov.w	ip, #0
 800513e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005142:	2909      	cmp	r1, #9
 8005144:	f240 8082 	bls.w	800524c <_strtod_l+0x29c>
 8005148:	9419      	str	r4, [sp, #100]	@ 0x64
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	e0a2      	b.n	8005296 <_strtod_l+0x2e6>
 8005150:	2300      	movs	r3, #0
 8005152:	e7c7      	b.n	80050e4 <_strtod_l+0x134>
 8005154:	2f08      	cmp	r7, #8
 8005156:	bfd5      	itete	le
 8005158:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800515a:	9908      	ldrgt	r1, [sp, #32]
 800515c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005160:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005164:	f100 0001 	add.w	r0, r0, #1
 8005168:	bfd4      	ite	le
 800516a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800516c:	9308      	strgt	r3, [sp, #32]
 800516e:	3701      	adds	r7, #1
 8005170:	9019      	str	r0, [sp, #100]	@ 0x64
 8005172:	e7bf      	b.n	80050f4 <_strtod_l+0x144>
 8005174:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	9219      	str	r2, [sp, #100]	@ 0x64
 800517a:	785a      	ldrb	r2, [r3, #1]
 800517c:	b37f      	cbz	r7, 80051de <_strtod_l+0x22e>
 800517e:	4681      	mov	r9, r0
 8005180:	463d      	mov	r5, r7
 8005182:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005186:	2b09      	cmp	r3, #9
 8005188:	d912      	bls.n	80051b0 <_strtod_l+0x200>
 800518a:	2301      	movs	r3, #1
 800518c:	e7c4      	b.n	8005118 <_strtod_l+0x168>
 800518e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005190:	3001      	adds	r0, #1
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	9219      	str	r2, [sp, #100]	@ 0x64
 8005196:	785a      	ldrb	r2, [r3, #1]
 8005198:	2a30      	cmp	r2, #48	@ 0x30
 800519a:	d0f8      	beq.n	800518e <_strtod_l+0x1de>
 800519c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	f200 84cb 	bhi.w	8005b3c <_strtod_l+0xb8c>
 80051a6:	4681      	mov	r9, r0
 80051a8:	2000      	movs	r0, #0
 80051aa:	4605      	mov	r5, r0
 80051ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80051b0:	3a30      	subs	r2, #48	@ 0x30
 80051b2:	f100 0301 	add.w	r3, r0, #1
 80051b6:	d02a      	beq.n	800520e <_strtod_l+0x25e>
 80051b8:	4499      	add	r9, r3
 80051ba:	210a      	movs	r1, #10
 80051bc:	462b      	mov	r3, r5
 80051be:	eb00 0c05 	add.w	ip, r0, r5
 80051c2:	4563      	cmp	r3, ip
 80051c4:	d10d      	bne.n	80051e2 <_strtod_l+0x232>
 80051c6:	1c69      	adds	r1, r5, #1
 80051c8:	4401      	add	r1, r0
 80051ca:	4428      	add	r0, r5
 80051cc:	2808      	cmp	r0, #8
 80051ce:	dc16      	bgt.n	80051fe <_strtod_l+0x24e>
 80051d0:	230a      	movs	r3, #10
 80051d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80051d4:	fb03 2300 	mla	r3, r3, r0, r2
 80051d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051da:	2300      	movs	r3, #0
 80051dc:	e018      	b.n	8005210 <_strtod_l+0x260>
 80051de:	4638      	mov	r0, r7
 80051e0:	e7da      	b.n	8005198 <_strtod_l+0x1e8>
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	f103 0301 	add.w	r3, r3, #1
 80051e8:	dc03      	bgt.n	80051f2 <_strtod_l+0x242>
 80051ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80051ec:	434e      	muls	r6, r1
 80051ee:	960a      	str	r6, [sp, #40]	@ 0x28
 80051f0:	e7e7      	b.n	80051c2 <_strtod_l+0x212>
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	bfde      	ittt	le
 80051f6:	9e08      	ldrle	r6, [sp, #32]
 80051f8:	434e      	mulle	r6, r1
 80051fa:	9608      	strle	r6, [sp, #32]
 80051fc:	e7e1      	b.n	80051c2 <_strtod_l+0x212>
 80051fe:	280f      	cmp	r0, #15
 8005200:	dceb      	bgt.n	80051da <_strtod_l+0x22a>
 8005202:	230a      	movs	r3, #10
 8005204:	9808      	ldr	r0, [sp, #32]
 8005206:	fb03 2300 	mla	r3, r3, r0, r2
 800520a:	9308      	str	r3, [sp, #32]
 800520c:	e7e5      	b.n	80051da <_strtod_l+0x22a>
 800520e:	4629      	mov	r1, r5
 8005210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005212:	460d      	mov	r5, r1
 8005214:	1c50      	adds	r0, r2, #1
 8005216:	9019      	str	r0, [sp, #100]	@ 0x64
 8005218:	7852      	ldrb	r2, [r2, #1]
 800521a:	4618      	mov	r0, r3
 800521c:	e7b1      	b.n	8005182 <_strtod_l+0x1d2>
 800521e:	f04f 0900 	mov.w	r9, #0
 8005222:	2301      	movs	r3, #1
 8005224:	e77d      	b.n	8005122 <_strtod_l+0x172>
 8005226:	f04f 0c00 	mov.w	ip, #0
 800522a:	1ca2      	adds	r2, r4, #2
 800522c:	9219      	str	r2, [sp, #100]	@ 0x64
 800522e:	78a2      	ldrb	r2, [r4, #2]
 8005230:	e785      	b.n	800513e <_strtod_l+0x18e>
 8005232:	f04f 0c01 	mov.w	ip, #1
 8005236:	e7f8      	b.n	800522a <_strtod_l+0x27a>
 8005238:	0800a76c 	.word	0x0800a76c
 800523c:	7ff00000 	.word	0x7ff00000
 8005240:	0800a756 	.word	0x0800a756
 8005244:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005246:	1c51      	adds	r1, r2, #1
 8005248:	9119      	str	r1, [sp, #100]	@ 0x64
 800524a:	7852      	ldrb	r2, [r2, #1]
 800524c:	2a30      	cmp	r2, #48	@ 0x30
 800524e:	d0f9      	beq.n	8005244 <_strtod_l+0x294>
 8005250:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005254:	2908      	cmp	r1, #8
 8005256:	f63f af78 	bhi.w	800514a <_strtod_l+0x19a>
 800525a:	f04f 080a 	mov.w	r8, #10
 800525e:	3a30      	subs	r2, #48	@ 0x30
 8005260:	920e      	str	r2, [sp, #56]	@ 0x38
 8005262:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005264:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005266:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005268:	1c56      	adds	r6, r2, #1
 800526a:	9619      	str	r6, [sp, #100]	@ 0x64
 800526c:	7852      	ldrb	r2, [r2, #1]
 800526e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005272:	f1be 0f09 	cmp.w	lr, #9
 8005276:	d939      	bls.n	80052ec <_strtod_l+0x33c>
 8005278:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800527a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800527e:	1a76      	subs	r6, r6, r1
 8005280:	2e08      	cmp	r6, #8
 8005282:	dc03      	bgt.n	800528c <_strtod_l+0x2dc>
 8005284:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005286:	4588      	cmp	r8, r1
 8005288:	bfa8      	it	ge
 800528a:	4688      	movge	r8, r1
 800528c:	f1bc 0f00 	cmp.w	ip, #0
 8005290:	d001      	beq.n	8005296 <_strtod_l+0x2e6>
 8005292:	f1c8 0800 	rsb	r8, r8, #0
 8005296:	2d00      	cmp	r5, #0
 8005298:	d14e      	bne.n	8005338 <_strtod_l+0x388>
 800529a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800529c:	4308      	orrs	r0, r1
 800529e:	f47f aec0 	bne.w	8005022 <_strtod_l+0x72>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f47f aed6 	bne.w	8005054 <_strtod_l+0xa4>
 80052a8:	2a69      	cmp	r2, #105	@ 0x69
 80052aa:	d028      	beq.n	80052fe <_strtod_l+0x34e>
 80052ac:	dc25      	bgt.n	80052fa <_strtod_l+0x34a>
 80052ae:	2a49      	cmp	r2, #73	@ 0x49
 80052b0:	d025      	beq.n	80052fe <_strtod_l+0x34e>
 80052b2:	2a4e      	cmp	r2, #78	@ 0x4e
 80052b4:	f47f aece 	bne.w	8005054 <_strtod_l+0xa4>
 80052b8:	499a      	ldr	r1, [pc, #616]	@ (8005524 <_strtod_l+0x574>)
 80052ba:	a819      	add	r0, sp, #100	@ 0x64
 80052bc:	f002 fe1a 	bl	8007ef4 <__match>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	f43f aec7 	beq.w	8005054 <_strtod_l+0xa4>
 80052c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b28      	cmp	r3, #40	@ 0x28
 80052cc:	d12e      	bne.n	800532c <_strtod_l+0x37c>
 80052ce:	4996      	ldr	r1, [pc, #600]	@ (8005528 <_strtod_l+0x578>)
 80052d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80052d2:	a819      	add	r0, sp, #100	@ 0x64
 80052d4:	f002 fe22 	bl	8007f1c <__hexnan>
 80052d8:	2805      	cmp	r0, #5
 80052da:	d127      	bne.n	800532c <_strtod_l+0x37c>
 80052dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80052de:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80052e2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80052e6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80052ea:	e69a      	b.n	8005022 <_strtod_l+0x72>
 80052ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80052ee:	fb08 2101 	mla	r1, r8, r1, r2
 80052f2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80052f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80052f8:	e7b5      	b.n	8005266 <_strtod_l+0x2b6>
 80052fa:	2a6e      	cmp	r2, #110	@ 0x6e
 80052fc:	e7da      	b.n	80052b4 <_strtod_l+0x304>
 80052fe:	498b      	ldr	r1, [pc, #556]	@ (800552c <_strtod_l+0x57c>)
 8005300:	a819      	add	r0, sp, #100	@ 0x64
 8005302:	f002 fdf7 	bl	8007ef4 <__match>
 8005306:	2800      	cmp	r0, #0
 8005308:	f43f aea4 	beq.w	8005054 <_strtod_l+0xa4>
 800530c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800530e:	4988      	ldr	r1, [pc, #544]	@ (8005530 <_strtod_l+0x580>)
 8005310:	3b01      	subs	r3, #1
 8005312:	a819      	add	r0, sp, #100	@ 0x64
 8005314:	9319      	str	r3, [sp, #100]	@ 0x64
 8005316:	f002 fded 	bl	8007ef4 <__match>
 800531a:	b910      	cbnz	r0, 8005322 <_strtod_l+0x372>
 800531c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800531e:	3301      	adds	r3, #1
 8005320:	9319      	str	r3, [sp, #100]	@ 0x64
 8005322:	f04f 0a00 	mov.w	sl, #0
 8005326:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005534 <_strtod_l+0x584>
 800532a:	e67a      	b.n	8005022 <_strtod_l+0x72>
 800532c:	4882      	ldr	r0, [pc, #520]	@ (8005538 <_strtod_l+0x588>)
 800532e:	f001 fcb5 	bl	8006c9c <nan>
 8005332:	4682      	mov	sl, r0
 8005334:	468b      	mov	fp, r1
 8005336:	e674      	b.n	8005022 <_strtod_l+0x72>
 8005338:	eba8 0309 	sub.w	r3, r8, r9
 800533c:	2f00      	cmp	r7, #0
 800533e:	bf08      	it	eq
 8005340:	462f      	moveq	r7, r5
 8005342:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005344:	2d10      	cmp	r5, #16
 8005346:	462c      	mov	r4, r5
 8005348:	9309      	str	r3, [sp, #36]	@ 0x24
 800534a:	bfa8      	it	ge
 800534c:	2410      	movge	r4, #16
 800534e:	f7fb f849 	bl	80003e4 <__aeabi_ui2d>
 8005352:	2d09      	cmp	r5, #9
 8005354:	4682      	mov	sl, r0
 8005356:	468b      	mov	fp, r1
 8005358:	dc11      	bgt.n	800537e <_strtod_l+0x3ce>
 800535a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	f43f ae60 	beq.w	8005022 <_strtod_l+0x72>
 8005362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005364:	dd76      	ble.n	8005454 <_strtod_l+0x4a4>
 8005366:	2b16      	cmp	r3, #22
 8005368:	dc5d      	bgt.n	8005426 <_strtod_l+0x476>
 800536a:	4974      	ldr	r1, [pc, #464]	@ (800553c <_strtod_l+0x58c>)
 800536c:	4652      	mov	r2, sl
 800536e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005372:	465b      	mov	r3, fp
 8005374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005378:	f7fb f8ae 	bl	80004d8 <__aeabi_dmul>
 800537c:	e7d9      	b.n	8005332 <_strtod_l+0x382>
 800537e:	4b6f      	ldr	r3, [pc, #444]	@ (800553c <_strtod_l+0x58c>)
 8005380:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005384:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005388:	f7fb f8a6 	bl	80004d8 <__aeabi_dmul>
 800538c:	4682      	mov	sl, r0
 800538e:	9808      	ldr	r0, [sp, #32]
 8005390:	468b      	mov	fp, r1
 8005392:	f7fb f827 	bl	80003e4 <__aeabi_ui2d>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4650      	mov	r0, sl
 800539c:	4659      	mov	r1, fp
 800539e:	f7fa fee5 	bl	800016c <__adddf3>
 80053a2:	2d0f      	cmp	r5, #15
 80053a4:	4682      	mov	sl, r0
 80053a6:	468b      	mov	fp, r1
 80053a8:	ddd7      	ble.n	800535a <_strtod_l+0x3aa>
 80053aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ac:	1b2c      	subs	r4, r5, r4
 80053ae:	441c      	add	r4, r3
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	f340 8096 	ble.w	80054e2 <_strtod_l+0x532>
 80053b6:	f014 030f 	ands.w	r3, r4, #15
 80053ba:	d00a      	beq.n	80053d2 <_strtod_l+0x422>
 80053bc:	495f      	ldr	r1, [pc, #380]	@ (800553c <_strtod_l+0x58c>)
 80053be:	4652      	mov	r2, sl
 80053c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053c8:	465b      	mov	r3, fp
 80053ca:	f7fb f885 	bl	80004d8 <__aeabi_dmul>
 80053ce:	4682      	mov	sl, r0
 80053d0:	468b      	mov	fp, r1
 80053d2:	f034 040f 	bics.w	r4, r4, #15
 80053d6:	d073      	beq.n	80054c0 <_strtod_l+0x510>
 80053d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80053dc:	dd48      	ble.n	8005470 <_strtod_l+0x4c0>
 80053de:	2400      	movs	r4, #0
 80053e0:	46a0      	mov	r8, r4
 80053e2:	46a1      	mov	r9, r4
 80053e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80053e6:	2322      	movs	r3, #34	@ 0x22
 80053e8:	f04f 0a00 	mov.w	sl, #0
 80053ec:	9a05      	ldr	r2, [sp, #20]
 80053ee:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005534 <_strtod_l+0x584>
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f43f ae13 	beq.w	8005022 <_strtod_l+0x72>
 80053fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053fe:	9805      	ldr	r0, [sp, #20]
 8005400:	f002 ff30 	bl	8008264 <_Bfree>
 8005404:	4649      	mov	r1, r9
 8005406:	9805      	ldr	r0, [sp, #20]
 8005408:	f002 ff2c 	bl	8008264 <_Bfree>
 800540c:	4641      	mov	r1, r8
 800540e:	9805      	ldr	r0, [sp, #20]
 8005410:	f002 ff28 	bl	8008264 <_Bfree>
 8005414:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005416:	9805      	ldr	r0, [sp, #20]
 8005418:	f002 ff24 	bl	8008264 <_Bfree>
 800541c:	4621      	mov	r1, r4
 800541e:	9805      	ldr	r0, [sp, #20]
 8005420:	f002 ff20 	bl	8008264 <_Bfree>
 8005424:	e5fd      	b.n	8005022 <_strtod_l+0x72>
 8005426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005428:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800542c:	4293      	cmp	r3, r2
 800542e:	dbbc      	blt.n	80053aa <_strtod_l+0x3fa>
 8005430:	4c42      	ldr	r4, [pc, #264]	@ (800553c <_strtod_l+0x58c>)
 8005432:	f1c5 050f 	rsb	r5, r5, #15
 8005436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800543a:	4652      	mov	r2, sl
 800543c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005440:	465b      	mov	r3, fp
 8005442:	f7fb f849 	bl	80004d8 <__aeabi_dmul>
 8005446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005448:	1b5d      	subs	r5, r3, r5
 800544a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800544e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005452:	e791      	b.n	8005378 <_strtod_l+0x3c8>
 8005454:	3316      	adds	r3, #22
 8005456:	dba8      	blt.n	80053aa <_strtod_l+0x3fa>
 8005458:	4b38      	ldr	r3, [pc, #224]	@ (800553c <_strtod_l+0x58c>)
 800545a:	eba9 0808 	sub.w	r8, r9, r8
 800545e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005462:	4650      	mov	r0, sl
 8005464:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005468:	4659      	mov	r1, fp
 800546a:	f7fb f95f 	bl	800072c <__aeabi_ddiv>
 800546e:	e760      	b.n	8005332 <_strtod_l+0x382>
 8005470:	4b33      	ldr	r3, [pc, #204]	@ (8005540 <_strtod_l+0x590>)
 8005472:	4650      	mov	r0, sl
 8005474:	9308      	str	r3, [sp, #32]
 8005476:	2300      	movs	r3, #0
 8005478:	4659      	mov	r1, fp
 800547a:	461e      	mov	r6, r3
 800547c:	1124      	asrs	r4, r4, #4
 800547e:	2c01      	cmp	r4, #1
 8005480:	dc21      	bgt.n	80054c6 <_strtod_l+0x516>
 8005482:	b10b      	cbz	r3, 8005488 <_strtod_l+0x4d8>
 8005484:	4682      	mov	sl, r0
 8005486:	468b      	mov	fp, r1
 8005488:	492d      	ldr	r1, [pc, #180]	@ (8005540 <_strtod_l+0x590>)
 800548a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800548e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005492:	4652      	mov	r2, sl
 8005494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005498:	465b      	mov	r3, fp
 800549a:	f7fb f81d 	bl	80004d8 <__aeabi_dmul>
 800549e:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <_strtod_l+0x584>)
 80054a0:	460a      	mov	r2, r1
 80054a2:	400b      	ands	r3, r1
 80054a4:	4927      	ldr	r1, [pc, #156]	@ (8005544 <_strtod_l+0x594>)
 80054a6:	4682      	mov	sl, r0
 80054a8:	428b      	cmp	r3, r1
 80054aa:	d898      	bhi.n	80053de <_strtod_l+0x42e>
 80054ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80054b0:	428b      	cmp	r3, r1
 80054b2:	bf86      	itte	hi
 80054b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80054b8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005548 <_strtod_l+0x598>
 80054bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80054c0:	2300      	movs	r3, #0
 80054c2:	9308      	str	r3, [sp, #32]
 80054c4:	e07a      	b.n	80055bc <_strtod_l+0x60c>
 80054c6:	07e2      	lsls	r2, r4, #31
 80054c8:	d505      	bpl.n	80054d6 <_strtod_l+0x526>
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fb f802 	bl	80004d8 <__aeabi_dmul>
 80054d4:	2301      	movs	r3, #1
 80054d6:	9a08      	ldr	r2, [sp, #32]
 80054d8:	3601      	adds	r6, #1
 80054da:	3208      	adds	r2, #8
 80054dc:	1064      	asrs	r4, r4, #1
 80054de:	9208      	str	r2, [sp, #32]
 80054e0:	e7cd      	b.n	800547e <_strtod_l+0x4ce>
 80054e2:	d0ed      	beq.n	80054c0 <_strtod_l+0x510>
 80054e4:	4264      	negs	r4, r4
 80054e6:	f014 020f 	ands.w	r2, r4, #15
 80054ea:	d00a      	beq.n	8005502 <_strtod_l+0x552>
 80054ec:	4b13      	ldr	r3, [pc, #76]	@ (800553c <_strtod_l+0x58c>)
 80054ee:	4650      	mov	r0, sl
 80054f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054f4:	4659      	mov	r1, fp
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fb f917 	bl	800072c <__aeabi_ddiv>
 80054fe:	4682      	mov	sl, r0
 8005500:	468b      	mov	fp, r1
 8005502:	1124      	asrs	r4, r4, #4
 8005504:	d0dc      	beq.n	80054c0 <_strtod_l+0x510>
 8005506:	2c1f      	cmp	r4, #31
 8005508:	dd20      	ble.n	800554c <_strtod_l+0x59c>
 800550a:	2400      	movs	r4, #0
 800550c:	46a0      	mov	r8, r4
 800550e:	46a1      	mov	r9, r4
 8005510:	940a      	str	r4, [sp, #40]	@ 0x28
 8005512:	2322      	movs	r3, #34	@ 0x22
 8005514:	9a05      	ldr	r2, [sp, #20]
 8005516:	f04f 0a00 	mov.w	sl, #0
 800551a:	f04f 0b00 	mov.w	fp, #0
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e768      	b.n	80053f4 <_strtod_l+0x444>
 8005522:	bf00      	nop
 8005524:	0800a7b5 	.word	0x0800a7b5
 8005528:	0800a758 	.word	0x0800a758
 800552c:	0800a7ad 	.word	0x0800a7ad
 8005530:	0800a7ec 	.word	0x0800a7ec
 8005534:	7ff00000 	.word	0x7ff00000
 8005538:	0800ab7d 	.word	0x0800ab7d
 800553c:	0800a968 	.word	0x0800a968
 8005540:	0800a940 	.word	0x0800a940
 8005544:	7ca00000 	.word	0x7ca00000
 8005548:	7fefffff 	.word	0x7fefffff
 800554c:	f014 0310 	ands.w	r3, r4, #16
 8005550:	bf18      	it	ne
 8005552:	236a      	movne	r3, #106	@ 0x6a
 8005554:	4650      	mov	r0, sl
 8005556:	9308      	str	r3, [sp, #32]
 8005558:	4659      	mov	r1, fp
 800555a:	2300      	movs	r3, #0
 800555c:	4ea9      	ldr	r6, [pc, #676]	@ (8005804 <_strtod_l+0x854>)
 800555e:	07e2      	lsls	r2, r4, #31
 8005560:	d504      	bpl.n	800556c <_strtod_l+0x5bc>
 8005562:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005566:	f7fa ffb7 	bl	80004d8 <__aeabi_dmul>
 800556a:	2301      	movs	r3, #1
 800556c:	1064      	asrs	r4, r4, #1
 800556e:	f106 0608 	add.w	r6, r6, #8
 8005572:	d1f4      	bne.n	800555e <_strtod_l+0x5ae>
 8005574:	b10b      	cbz	r3, 800557a <_strtod_l+0x5ca>
 8005576:	4682      	mov	sl, r0
 8005578:	468b      	mov	fp, r1
 800557a:	9b08      	ldr	r3, [sp, #32]
 800557c:	b1b3      	cbz	r3, 80055ac <_strtod_l+0x5fc>
 800557e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005582:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005586:	2b00      	cmp	r3, #0
 8005588:	4659      	mov	r1, fp
 800558a:	dd0f      	ble.n	80055ac <_strtod_l+0x5fc>
 800558c:	2b1f      	cmp	r3, #31
 800558e:	dd57      	ble.n	8005640 <_strtod_l+0x690>
 8005590:	2b34      	cmp	r3, #52	@ 0x34
 8005592:	bfd8      	it	le
 8005594:	f04f 33ff 	movle.w	r3, #4294967295
 8005598:	f04f 0a00 	mov.w	sl, #0
 800559c:	bfcf      	iteee	gt
 800559e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80055a2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80055a6:	4093      	lslle	r3, r2
 80055a8:	ea03 0b01 	andle.w	fp, r3, r1
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	4650      	mov	r0, sl
 80055b2:	4659      	mov	r1, fp
 80055b4:	f7fb f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1a6      	bne.n	800550a <_strtod_l+0x55a>
 80055bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055be:	463a      	mov	r2, r7
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80055c4:	462b      	mov	r3, r5
 80055c6:	9805      	ldr	r0, [sp, #20]
 80055c8:	f002 feb4 	bl	8008334 <__s2b>
 80055cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80055ce:	2800      	cmp	r0, #0
 80055d0:	f43f af05 	beq.w	80053de <_strtod_l+0x42e>
 80055d4:	2400      	movs	r4, #0
 80055d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055d8:	eba9 0308 	sub.w	r3, r9, r8
 80055dc:	2a00      	cmp	r2, #0
 80055de:	bfa8      	it	ge
 80055e0:	2300      	movge	r3, #0
 80055e2:	46a0      	mov	r8, r4
 80055e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80055e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80055ea:	9316      	str	r3, [sp, #88]	@ 0x58
 80055ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ee:	9805      	ldr	r0, [sp, #20]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	f002 fdf7 	bl	80081e4 <_Balloc>
 80055f6:	4681      	mov	r9, r0
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f43f aef4 	beq.w	80053e6 <_strtod_l+0x436>
 80055fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005600:	300c      	adds	r0, #12
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	f103 010c 	add.w	r1, r3, #12
 8005608:	3202      	adds	r2, #2
 800560a:	0092      	lsls	r2, r2, #2
 800560c:	f001 fb37 	bl	8006c7e <memcpy>
 8005610:	ab1c      	add	r3, sp, #112	@ 0x70
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	4652      	mov	r2, sl
 800561a:	465b      	mov	r3, fp
 800561c:	9805      	ldr	r0, [sp, #20]
 800561e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005622:	f003 f9b9 	bl	8008998 <__d2b>
 8005626:	901a      	str	r0, [sp, #104]	@ 0x68
 8005628:	2800      	cmp	r0, #0
 800562a:	f43f aedc 	beq.w	80053e6 <_strtod_l+0x436>
 800562e:	2101      	movs	r1, #1
 8005630:	9805      	ldr	r0, [sp, #20]
 8005632:	f002 ff15 	bl	8008460 <__i2b>
 8005636:	4680      	mov	r8, r0
 8005638:	b948      	cbnz	r0, 800564e <_strtod_l+0x69e>
 800563a:	f04f 0800 	mov.w	r8, #0
 800563e:	e6d2      	b.n	80053e6 <_strtod_l+0x436>
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	ea03 0a0a 	and.w	sl, r3, sl
 800564c:	e7ae      	b.n	80055ac <_strtod_l+0x5fc>
 800564e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005650:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005652:	2d00      	cmp	r5, #0
 8005654:	bfab      	itete	ge
 8005656:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005658:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800565a:	18ef      	addge	r7, r5, r3
 800565c:	1b5e      	sublt	r6, r3, r5
 800565e:	9b08      	ldr	r3, [sp, #32]
 8005660:	bfa8      	it	ge
 8005662:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005664:	eba5 0503 	sub.w	r5, r5, r3
 8005668:	4415      	add	r5, r2
 800566a:	4b67      	ldr	r3, [pc, #412]	@ (8005808 <_strtod_l+0x858>)
 800566c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005670:	bfb8      	it	lt
 8005672:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005674:	429d      	cmp	r5, r3
 8005676:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800567a:	da50      	bge.n	800571e <_strtod_l+0x76e>
 800567c:	1b5b      	subs	r3, r3, r5
 800567e:	2b1f      	cmp	r3, #31
 8005680:	f04f 0101 	mov.w	r1, #1
 8005684:	eba2 0203 	sub.w	r2, r2, r3
 8005688:	dc3d      	bgt.n	8005706 <_strtod_l+0x756>
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005690:	2300      	movs	r3, #0
 8005692:	9310      	str	r3, [sp, #64]	@ 0x40
 8005694:	18bd      	adds	r5, r7, r2
 8005696:	9b08      	ldr	r3, [sp, #32]
 8005698:	42af      	cmp	r7, r5
 800569a:	4416      	add	r6, r2
 800569c:	441e      	add	r6, r3
 800569e:	463b      	mov	r3, r7
 80056a0:	bfa8      	it	ge
 80056a2:	462b      	movge	r3, r5
 80056a4:	42b3      	cmp	r3, r6
 80056a6:	bfa8      	it	ge
 80056a8:	4633      	movge	r3, r6
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfc2      	ittt	gt
 80056ae:	1aed      	subgt	r5, r5, r3
 80056b0:	1af6      	subgt	r6, r6, r3
 80056b2:	1aff      	subgt	r7, r7, r3
 80056b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd16      	ble.n	80056e8 <_strtod_l+0x738>
 80056ba:	4641      	mov	r1, r8
 80056bc:	461a      	mov	r2, r3
 80056be:	9805      	ldr	r0, [sp, #20]
 80056c0:	f002 ff8c 	bl	80085dc <__pow5mult>
 80056c4:	4680      	mov	r8, r0
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d0b7      	beq.n	800563a <_strtod_l+0x68a>
 80056ca:	4601      	mov	r1, r0
 80056cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80056ce:	9805      	ldr	r0, [sp, #20]
 80056d0:	f002 fedc 	bl	800848c <__multiply>
 80056d4:	900e      	str	r0, [sp, #56]	@ 0x38
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f ae85 	beq.w	80053e6 <_strtod_l+0x436>
 80056dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80056de:	9805      	ldr	r0, [sp, #20]
 80056e0:	f002 fdc0 	bl	8008264 <_Bfree>
 80056e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	dc1d      	bgt.n	8005728 <_strtod_l+0x778>
 80056ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd23      	ble.n	800573a <_strtod_l+0x78a>
 80056f2:	4649      	mov	r1, r9
 80056f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80056f6:	9805      	ldr	r0, [sp, #20]
 80056f8:	f002 ff70 	bl	80085dc <__pow5mult>
 80056fc:	4681      	mov	r9, r0
 80056fe:	b9e0      	cbnz	r0, 800573a <_strtod_l+0x78a>
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	e66f      	b.n	80053e6 <_strtod_l+0x436>
 8005706:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800570a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800570e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005712:	35e2      	adds	r5, #226	@ 0xe2
 8005714:	fa01 f305 	lsl.w	r3, r1, r5
 8005718:	9310      	str	r3, [sp, #64]	@ 0x40
 800571a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800571c:	e7ba      	b.n	8005694 <_strtod_l+0x6e4>
 800571e:	2300      	movs	r3, #0
 8005720:	9310      	str	r3, [sp, #64]	@ 0x40
 8005722:	2301      	movs	r3, #1
 8005724:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005726:	e7b5      	b.n	8005694 <_strtod_l+0x6e4>
 8005728:	462a      	mov	r2, r5
 800572a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800572c:	9805      	ldr	r0, [sp, #20]
 800572e:	f002 ffaf 	bl	8008690 <__lshift>
 8005732:	901a      	str	r0, [sp, #104]	@ 0x68
 8005734:	2800      	cmp	r0, #0
 8005736:	d1d9      	bne.n	80056ec <_strtod_l+0x73c>
 8005738:	e655      	b.n	80053e6 <_strtod_l+0x436>
 800573a:	2e00      	cmp	r6, #0
 800573c:	dd07      	ble.n	800574e <_strtod_l+0x79e>
 800573e:	4649      	mov	r1, r9
 8005740:	4632      	mov	r2, r6
 8005742:	9805      	ldr	r0, [sp, #20]
 8005744:	f002 ffa4 	bl	8008690 <__lshift>
 8005748:	4681      	mov	r9, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d0d8      	beq.n	8005700 <_strtod_l+0x750>
 800574e:	2f00      	cmp	r7, #0
 8005750:	dd08      	ble.n	8005764 <_strtod_l+0x7b4>
 8005752:	4641      	mov	r1, r8
 8005754:	463a      	mov	r2, r7
 8005756:	9805      	ldr	r0, [sp, #20]
 8005758:	f002 ff9a 	bl	8008690 <__lshift>
 800575c:	4680      	mov	r8, r0
 800575e:	2800      	cmp	r0, #0
 8005760:	f43f ae41 	beq.w	80053e6 <_strtod_l+0x436>
 8005764:	464a      	mov	r2, r9
 8005766:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005768:	9805      	ldr	r0, [sp, #20]
 800576a:	f003 f819 	bl	80087a0 <__mdiff>
 800576e:	4604      	mov	r4, r0
 8005770:	2800      	cmp	r0, #0
 8005772:	f43f ae38 	beq.w	80053e6 <_strtod_l+0x436>
 8005776:	68c3      	ldr	r3, [r0, #12]
 8005778:	4641      	mov	r1, r8
 800577a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800577c:	2300      	movs	r3, #0
 800577e:	60c3      	str	r3, [r0, #12]
 8005780:	f002 fff2 	bl	8008768 <__mcmp>
 8005784:	2800      	cmp	r0, #0
 8005786:	da45      	bge.n	8005814 <_strtod_l+0x864>
 8005788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800578a:	ea53 030a 	orrs.w	r3, r3, sl
 800578e:	d16b      	bne.n	8005868 <_strtod_l+0x8b8>
 8005790:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005794:	2b00      	cmp	r3, #0
 8005796:	d167      	bne.n	8005868 <_strtod_l+0x8b8>
 8005798:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800579c:	0d1b      	lsrs	r3, r3, #20
 800579e:	051b      	lsls	r3, r3, #20
 80057a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80057a4:	d960      	bls.n	8005868 <_strtod_l+0x8b8>
 80057a6:	6963      	ldr	r3, [r4, #20]
 80057a8:	b913      	cbnz	r3, 80057b0 <_strtod_l+0x800>
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	dd5b      	ble.n	8005868 <_strtod_l+0x8b8>
 80057b0:	4621      	mov	r1, r4
 80057b2:	2201      	movs	r2, #1
 80057b4:	9805      	ldr	r0, [sp, #20]
 80057b6:	f002 ff6b 	bl	8008690 <__lshift>
 80057ba:	4641      	mov	r1, r8
 80057bc:	4604      	mov	r4, r0
 80057be:	f002 ffd3 	bl	8008768 <__mcmp>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	dd50      	ble.n	8005868 <_strtod_l+0x8b8>
 80057c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80057ca:	9a08      	ldr	r2, [sp, #32]
 80057cc:	0d1b      	lsrs	r3, r3, #20
 80057ce:	051b      	lsls	r3, r3, #20
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	d06a      	beq.n	80058aa <_strtod_l+0x8fa>
 80057d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80057d8:	d867      	bhi.n	80058aa <_strtod_l+0x8fa>
 80057da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80057de:	f67f ae98 	bls.w	8005512 <_strtod_l+0x562>
 80057e2:	4650      	mov	r0, sl
 80057e4:	4659      	mov	r1, fp
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <_strtod_l+0x85c>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	f7fa fe75 	bl	80004d8 <__aeabi_dmul>
 80057ee:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <_strtod_l+0x860>)
 80057f0:	4682      	mov	sl, r0
 80057f2:	400b      	ands	r3, r1
 80057f4:	468b      	mov	fp, r1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f47f ae00 	bne.w	80053fc <_strtod_l+0x44c>
 80057fc:	2322      	movs	r3, #34	@ 0x22
 80057fe:	9a05      	ldr	r2, [sp, #20]
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e5fb      	b.n	80053fc <_strtod_l+0x44c>
 8005804:	0800a780 	.word	0x0800a780
 8005808:	fffffc02 	.word	0xfffffc02
 800580c:	39500000 	.word	0x39500000
 8005810:	7ff00000 	.word	0x7ff00000
 8005814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005818:	d165      	bne.n	80058e6 <_strtod_l+0x936>
 800581a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800581c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005820:	b35a      	cbz	r2, 800587a <_strtod_l+0x8ca>
 8005822:	4a99      	ldr	r2, [pc, #612]	@ (8005a88 <_strtod_l+0xad8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d12b      	bne.n	8005880 <_strtod_l+0x8d0>
 8005828:	9b08      	ldr	r3, [sp, #32]
 800582a:	4651      	mov	r1, sl
 800582c:	b303      	cbz	r3, 8005870 <_strtod_l+0x8c0>
 800582e:	465a      	mov	r2, fp
 8005830:	4b96      	ldr	r3, [pc, #600]	@ (8005a8c <_strtod_l+0xadc>)
 8005832:	4013      	ands	r3, r2
 8005834:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	d81b      	bhi.n	8005876 <_strtod_l+0x8c6>
 800583e:	0d1b      	lsrs	r3, r3, #20
 8005840:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	4299      	cmp	r1, r3
 800584a:	d119      	bne.n	8005880 <_strtod_l+0x8d0>
 800584c:	4b90      	ldr	r3, [pc, #576]	@ (8005a90 <_strtod_l+0xae0>)
 800584e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005850:	429a      	cmp	r2, r3
 8005852:	d102      	bne.n	800585a <_strtod_l+0x8aa>
 8005854:	3101      	adds	r1, #1
 8005856:	f43f adc6 	beq.w	80053e6 <_strtod_l+0x436>
 800585a:	f04f 0a00 	mov.w	sl, #0
 800585e:	4b8b      	ldr	r3, [pc, #556]	@ (8005a8c <_strtod_l+0xadc>)
 8005860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005862:	401a      	ands	r2, r3
 8005864:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005868:	9b08      	ldr	r3, [sp, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1b9      	bne.n	80057e2 <_strtod_l+0x832>
 800586e:	e5c5      	b.n	80053fc <_strtod_l+0x44c>
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	e7e8      	b.n	8005848 <_strtod_l+0x898>
 8005876:	4613      	mov	r3, r2
 8005878:	e7e6      	b.n	8005848 <_strtod_l+0x898>
 800587a:	ea53 030a 	orrs.w	r3, r3, sl
 800587e:	d0a2      	beq.n	80057c6 <_strtod_l+0x816>
 8005880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005882:	b1db      	cbz	r3, 80058bc <_strtod_l+0x90c>
 8005884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005886:	4213      	tst	r3, r2
 8005888:	d0ee      	beq.n	8005868 <_strtod_l+0x8b8>
 800588a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800588c:	4650      	mov	r0, sl
 800588e:	4659      	mov	r1, fp
 8005890:	9a08      	ldr	r2, [sp, #32]
 8005892:	b1bb      	cbz	r3, 80058c4 <_strtod_l+0x914>
 8005894:	f7ff fb68 	bl	8004f68 <sulp>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058a0:	f7fa fc64 	bl	800016c <__adddf3>
 80058a4:	4682      	mov	sl, r0
 80058a6:	468b      	mov	fp, r1
 80058a8:	e7de      	b.n	8005868 <_strtod_l+0x8b8>
 80058aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80058ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80058b2:	f04f 3aff 	mov.w	sl, #4294967295
 80058b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80058ba:	e7d5      	b.n	8005868 <_strtod_l+0x8b8>
 80058bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058be:	ea13 0f0a 	tst.w	r3, sl
 80058c2:	e7e1      	b.n	8005888 <_strtod_l+0x8d8>
 80058c4:	f7ff fb50 	bl	8004f68 <sulp>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058d0:	f7fa fc4a 	bl	8000168 <__aeabi_dsub>
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4682      	mov	sl, r0
 80058da:	468b      	mov	fp, r1
 80058dc:	f7fb f864 	bl	80009a8 <__aeabi_dcmpeq>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0c1      	beq.n	8005868 <_strtod_l+0x8b8>
 80058e4:	e615      	b.n	8005512 <_strtod_l+0x562>
 80058e6:	4641      	mov	r1, r8
 80058e8:	4620      	mov	r0, r4
 80058ea:	f003 f8ad 	bl	8008a48 <__ratio>
 80058ee:	2200      	movs	r2, #0
 80058f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80058f4:	4606      	mov	r6, r0
 80058f6:	460f      	mov	r7, r1
 80058f8:	f7fb f86a 	bl	80009d0 <__aeabi_dcmple>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d06d      	beq.n	80059dc <_strtod_l+0xa2c>
 8005900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d178      	bne.n	80059f8 <_strtod_l+0xa48>
 8005906:	f1ba 0f00 	cmp.w	sl, #0
 800590a:	d156      	bne.n	80059ba <_strtod_l+0xa0a>
 800590c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800590e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005912:	2b00      	cmp	r3, #0
 8005914:	d158      	bne.n	80059c8 <_strtod_l+0xa18>
 8005916:	2200      	movs	r2, #0
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	4b5d      	ldr	r3, [pc, #372]	@ (8005a94 <_strtod_l+0xae4>)
 800591e:	f7fb f84d 	bl	80009bc <__aeabi_dcmplt>
 8005922:	2800      	cmp	r0, #0
 8005924:	d157      	bne.n	80059d6 <_strtod_l+0xa26>
 8005926:	4630      	mov	r0, r6
 8005928:	4639      	mov	r1, r7
 800592a:	2200      	movs	r2, #0
 800592c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <_strtod_l+0xae8>)
 800592e:	f7fa fdd3 	bl	80004d8 <__aeabi_dmul>
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800593a:	9606      	str	r6, [sp, #24]
 800593c:	9307      	str	r3, [sp, #28]
 800593e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005942:	4d52      	ldr	r5, [pc, #328]	@ (8005a8c <_strtod_l+0xadc>)
 8005944:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800594a:	401d      	ands	r5, r3
 800594c:	4b53      	ldr	r3, [pc, #332]	@ (8005a9c <_strtod_l+0xaec>)
 800594e:	429d      	cmp	r5, r3
 8005950:	f040 80aa 	bne.w	8005aa8 <_strtod_l+0xaf8>
 8005954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005956:	4650      	mov	r0, sl
 8005958:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800595c:	4659      	mov	r1, fp
 800595e:	f002 ffb3 	bl	80088c8 <__ulp>
 8005962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005966:	f7fa fdb7 	bl	80004d8 <__aeabi_dmul>
 800596a:	4652      	mov	r2, sl
 800596c:	465b      	mov	r3, fp
 800596e:	f7fa fbfd 	bl	800016c <__adddf3>
 8005972:	460b      	mov	r3, r1
 8005974:	4945      	ldr	r1, [pc, #276]	@ (8005a8c <_strtod_l+0xadc>)
 8005976:	4a4a      	ldr	r2, [pc, #296]	@ (8005aa0 <_strtod_l+0xaf0>)
 8005978:	4019      	ands	r1, r3
 800597a:	4291      	cmp	r1, r2
 800597c:	4682      	mov	sl, r0
 800597e:	d942      	bls.n	8005a06 <_strtod_l+0xa56>
 8005980:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005982:	4b43      	ldr	r3, [pc, #268]	@ (8005a90 <_strtod_l+0xae0>)
 8005984:	429a      	cmp	r2, r3
 8005986:	d103      	bne.n	8005990 <_strtod_l+0x9e0>
 8005988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800598a:	3301      	adds	r3, #1
 800598c:	f43f ad2b 	beq.w	80053e6 <_strtod_l+0x436>
 8005990:	f04f 3aff 	mov.w	sl, #4294967295
 8005994:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005a90 <_strtod_l+0xae0>
 8005998:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800599a:	9805      	ldr	r0, [sp, #20]
 800599c:	f002 fc62 	bl	8008264 <_Bfree>
 80059a0:	4649      	mov	r1, r9
 80059a2:	9805      	ldr	r0, [sp, #20]
 80059a4:	f002 fc5e 	bl	8008264 <_Bfree>
 80059a8:	4641      	mov	r1, r8
 80059aa:	9805      	ldr	r0, [sp, #20]
 80059ac:	f002 fc5a 	bl	8008264 <_Bfree>
 80059b0:	4621      	mov	r1, r4
 80059b2:	9805      	ldr	r0, [sp, #20]
 80059b4:	f002 fc56 	bl	8008264 <_Bfree>
 80059b8:	e618      	b.n	80055ec <_strtod_l+0x63c>
 80059ba:	f1ba 0f01 	cmp.w	sl, #1
 80059be:	d103      	bne.n	80059c8 <_strtod_l+0xa18>
 80059c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f43f ada5 	beq.w	8005512 <_strtod_l+0x562>
 80059c8:	2200      	movs	r2, #0
 80059ca:	4b36      	ldr	r3, [pc, #216]	@ (8005aa4 <_strtod_l+0xaf4>)
 80059cc:	2600      	movs	r6, #0
 80059ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059d2:	4f30      	ldr	r7, [pc, #192]	@ (8005a94 <_strtod_l+0xae4>)
 80059d4:	e7b3      	b.n	800593e <_strtod_l+0x98e>
 80059d6:	2600      	movs	r6, #0
 80059d8:	4f2f      	ldr	r7, [pc, #188]	@ (8005a98 <_strtod_l+0xae8>)
 80059da:	e7ac      	b.n	8005936 <_strtod_l+0x986>
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a98 <_strtod_l+0xae8>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059ea:	4606      	mov	r6, r0
 80059ec:	460f      	mov	r7, r1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0a1      	beq.n	8005936 <_strtod_l+0x986>
 80059f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80059f6:	e7a2      	b.n	800593e <_strtod_l+0x98e>
 80059f8:	2200      	movs	r2, #0
 80059fa:	4b26      	ldr	r3, [pc, #152]	@ (8005a94 <_strtod_l+0xae4>)
 80059fc:	4616      	mov	r6, r2
 80059fe:	461f      	mov	r7, r3
 8005a00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a04:	e79b      	b.n	800593e <_strtod_l+0x98e>
 8005a06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005a0a:	9b08      	ldr	r3, [sp, #32]
 8005a0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1c1      	bne.n	8005998 <_strtod_l+0x9e8>
 8005a14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a18:	0d1b      	lsrs	r3, r3, #20
 8005a1a:	051b      	lsls	r3, r3, #20
 8005a1c:	429d      	cmp	r5, r3
 8005a1e:	d1bb      	bne.n	8005998 <_strtod_l+0x9e8>
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fb fbb0 	bl	8001188 <__aeabi_d2lz>
 8005a28:	f7fa fd28 	bl	800047c <__aeabi_l2d>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4630      	mov	r0, r6
 8005a32:	4639      	mov	r1, r7
 8005a34:	f7fa fb98 	bl	8000168 <__aeabi_dsub>
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005a40:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a46:	ea46 060a 	orr.w	r6, r6, sl
 8005a4a:	431e      	orrs	r6, r3
 8005a4c:	d069      	beq.n	8005b22 <_strtod_l+0xb72>
 8005a4e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005a78 <_strtod_l+0xac8>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa ffb2 	bl	80009bc <__aeabi_dcmplt>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	f47f accf 	bne.w	80053fc <_strtod_l+0x44c>
 8005a5e:	a308      	add	r3, pc, #32	@ (adr r3, 8005a80 <_strtod_l+0xad0>)
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a68:	f7fa ffc6 	bl	80009f8 <__aeabi_dcmpgt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d093      	beq.n	8005998 <_strtod_l+0x9e8>
 8005a70:	e4c4      	b.n	80053fc <_strtod_l+0x44c>
 8005a72:	bf00      	nop
 8005a74:	f3af 8000 	nop.w
 8005a78:	94a03595 	.word	0x94a03595
 8005a7c:	3fdfffff 	.word	0x3fdfffff
 8005a80:	35afe535 	.word	0x35afe535
 8005a84:	3fe00000 	.word	0x3fe00000
 8005a88:	000fffff 	.word	0x000fffff
 8005a8c:	7ff00000 	.word	0x7ff00000
 8005a90:	7fefffff 	.word	0x7fefffff
 8005a94:	3ff00000 	.word	0x3ff00000
 8005a98:	3fe00000 	.word	0x3fe00000
 8005a9c:	7fe00000 	.word	0x7fe00000
 8005aa0:	7c9fffff 	.word	0x7c9fffff
 8005aa4:	bff00000 	.word	0xbff00000
 8005aa8:	9b08      	ldr	r3, [sp, #32]
 8005aaa:	b323      	cbz	r3, 8005af6 <_strtod_l+0xb46>
 8005aac:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005ab0:	d821      	bhi.n	8005af6 <_strtod_l+0xb46>
 8005ab2:	a327      	add	r3, pc, #156	@ (adr r3, 8005b50 <_strtod_l+0xba0>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fa ff88 	bl	80009d0 <__aeabi_dcmple>
 8005ac0:	b1a0      	cbz	r0, 8005aec <_strtod_l+0xb3c>
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f7fa ffdf 	bl	8000a88 <__aeabi_d2uiz>
 8005aca:	2801      	cmp	r0, #1
 8005acc:	bf38      	it	cc
 8005ace:	2001      	movcc	r0, #1
 8005ad0:	f7fa fc88 	bl	80003e4 <__aeabi_ui2d>
 8005ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	b9fb      	cbnz	r3, 8005b1c <_strtod_l+0xb6c>
 8005adc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ae0:	9014      	str	r0, [sp, #80]	@ 0x50
 8005ae2:	9315      	str	r3, [sp, #84]	@ 0x54
 8005ae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005ae8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005aec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005aee:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005af2:	1b5b      	subs	r3, r3, r5
 8005af4:	9311      	str	r3, [sp, #68]	@ 0x44
 8005af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005afa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005afe:	f002 fee3 	bl	80088c8 <__ulp>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4650      	mov	r0, sl
 8005b08:	4659      	mov	r1, fp
 8005b0a:	f7fa fce5 	bl	80004d8 <__aeabi_dmul>
 8005b0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005b12:	f7fa fb2b 	bl	800016c <__adddf3>
 8005b16:	4682      	mov	sl, r0
 8005b18:	468b      	mov	fp, r1
 8005b1a:	e776      	b.n	8005a0a <_strtod_l+0xa5a>
 8005b1c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005b20:	e7e0      	b.n	8005ae4 <_strtod_l+0xb34>
 8005b22:	a30d      	add	r3, pc, #52	@ (adr r3, 8005b58 <_strtod_l+0xba8>)
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f7fa ff48 	bl	80009bc <__aeabi_dcmplt>
 8005b2c:	e79e      	b.n	8005a6c <_strtod_l+0xabc>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b34:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f7ff ba77 	b.w	800502a <_strtod_l+0x7a>
 8005b3c:	2a65      	cmp	r2, #101	@ 0x65
 8005b3e:	f43f ab6e 	beq.w	800521e <_strtod_l+0x26e>
 8005b42:	2a45      	cmp	r2, #69	@ 0x45
 8005b44:	f43f ab6b 	beq.w	800521e <_strtod_l+0x26e>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f7ff bba6 	b.w	800529a <_strtod_l+0x2ea>
 8005b4e:	bf00      	nop
 8005b50:	ffc00000 	.word	0xffc00000
 8005b54:	41dfffff 	.word	0x41dfffff
 8005b58:	94a03595 	.word	0x94a03595
 8005b5c:	3fcfffff 	.word	0x3fcfffff

08005b60 <_strtod_r>:
 8005b60:	4b01      	ldr	r3, [pc, #4]	@ (8005b68 <_strtod_r+0x8>)
 8005b62:	f7ff ba25 	b.w	8004fb0 <_strtod_l>
 8005b66:	bf00      	nop
 8005b68:	20000018 	.word	0x20000018

08005b6c <strtof>:
 8005b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b70:	4d24      	ldr	r5, [pc, #144]	@ (8005c04 <strtof+0x98>)
 8005b72:	460a      	mov	r2, r1
 8005b74:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <strtof+0x9c>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6828      	ldr	r0, [r5, #0]
 8005b7a:	f7ff fa19 	bl	8004fb0 <_strtod_l>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4606      	mov	r6, r0
 8005b84:	460f      	mov	r7, r1
 8005b86:	f7fa ff41 	bl	8000a0c <__aeabi_dcmpun>
 8005b8a:	b168      	cbz	r0, 8005ba8 <strtof+0x3c>
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	481f      	ldr	r0, [pc, #124]	@ (8005c0c <strtof+0xa0>)
 8005b90:	da06      	bge.n	8005ba0 <strtof+0x34>
 8005b92:	f001 f889 	bl	8006ca8 <nanf>
 8005b96:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba4:	f001 b880 	b.w	8006ca8 <nanf>
 8005ba8:	4639      	mov	r1, r7
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7fa ff8c 	bl	8000ac8 <__aeabi_d2f>
 8005bb0:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4916      	ldr	r1, [pc, #88]	@ (8005c10 <strtof+0xa4>)
 8005bb8:	4640      	mov	r0, r8
 8005bba:	f7fb faa9 	bl	8001110 <__aeabi_fcmpun>
 8005bbe:	b9b0      	cbnz	r0, 8005bee <strtof+0x82>
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	4913      	ldr	r1, [pc, #76]	@ (8005c10 <strtof+0xa4>)
 8005bc4:	f7fb fa86 	bl	80010d4 <__aeabi_fcmple>
 8005bc8:	b988      	cbnz	r0, 8005bee <strtof+0x82>
 8005bca:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <strtof+0xa8>)
 8005bd8:	f7fa ff18 	bl	8000a0c <__aeabi_dcmpun>
 8005bdc:	b970      	cbnz	r0, 8005bfc <strtof+0x90>
 8005bde:	f04f 32ff 	mov.w	r2, #4294967295
 8005be2:	4630      	mov	r0, r6
 8005be4:	4649      	mov	r1, r9
 8005be6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c14 <strtof+0xa8>)
 8005be8:	f7fa fef2 	bl	80009d0 <__aeabi_dcmple>
 8005bec:	b930      	cbnz	r0, 8005bfc <strtof+0x90>
 8005bee:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8005bf2:	d1d2      	bne.n	8005b9a <strtof+0x2e>
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <strtof+0xac>)
 8005bf6:	403b      	ands	r3, r7
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d0ce      	beq.n	8005b9a <strtof+0x2e>
 8005bfc:	2222      	movs	r2, #34	@ 0x22
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e7ca      	b.n	8005b9a <strtof+0x2e>
 8005c04:	20000184 	.word	0x20000184
 8005c08:	20000018 	.word	0x20000018
 8005c0c:	0800ab7d 	.word	0x0800ab7d
 8005c10:	7f7fffff 	.word	0x7f7fffff
 8005c14:	7fefffff 	.word	0x7fefffff
 8005c18:	7ff00000 	.word	0x7ff00000

08005c1c <__cvt>:
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c22:	461d      	mov	r5, r3
 8005c24:	bfbb      	ittet	lt
 8005c26:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005c2a:	461d      	movlt	r5, r3
 8005c2c:	2300      	movge	r3, #0
 8005c2e:	232d      	movlt	r3, #45	@ 0x2d
 8005c30:	b088      	sub	sp, #32
 8005c32:	4614      	mov	r4, r2
 8005c34:	bfb8      	it	lt
 8005c36:	4614      	movlt	r4, r2
 8005c38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005c3a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005c3c:	7013      	strb	r3, [r2, #0]
 8005c3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c40:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005c44:	f023 0820 	bic.w	r8, r3, #32
 8005c48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c4c:	d005      	beq.n	8005c5a <__cvt+0x3e>
 8005c4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c52:	d100      	bne.n	8005c56 <__cvt+0x3a>
 8005c54:	3601      	adds	r6, #1
 8005c56:	2302      	movs	r3, #2
 8005c58:	e000      	b.n	8005c5c <__cvt+0x40>
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	aa07      	add	r2, sp, #28
 8005c5e:	9204      	str	r2, [sp, #16]
 8005c60:	aa06      	add	r2, sp, #24
 8005c62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c66:	e9cd 3600 	strd	r3, r6, [sp]
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f001 f8a7 	bl	8006dc0 <_dtoa_r>
 8005c72:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c76:	4607      	mov	r7, r0
 8005c78:	d119      	bne.n	8005cae <__cvt+0x92>
 8005c7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c7c:	07db      	lsls	r3, r3, #31
 8005c7e:	d50e      	bpl.n	8005c9e <__cvt+0x82>
 8005c80:	eb00 0906 	add.w	r9, r0, r6
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f7fa fe8c 	bl	80009a8 <__aeabi_dcmpeq>
 8005c90:	b108      	cbz	r0, 8005c96 <__cvt+0x7a>
 8005c92:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c96:	2230      	movs	r2, #48	@ 0x30
 8005c98:	9b07      	ldr	r3, [sp, #28]
 8005c9a:	454b      	cmp	r3, r9
 8005c9c:	d31e      	bcc.n	8005cdc <__cvt+0xc0>
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005ca4:	1bdb      	subs	r3, r3, r7
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	b008      	add	sp, #32
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cb2:	eb00 0906 	add.w	r9, r0, r6
 8005cb6:	d1e5      	bne.n	8005c84 <__cvt+0x68>
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	2b30      	cmp	r3, #48	@ 0x30
 8005cbc:	d10a      	bne.n	8005cd4 <__cvt+0xb8>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa fe6f 	bl	80009a8 <__aeabi_dcmpeq>
 8005cca:	b918      	cbnz	r0, 8005cd4 <__cvt+0xb8>
 8005ccc:	f1c6 0601 	rsb	r6, r6, #1
 8005cd0:	f8ca 6000 	str.w	r6, [sl]
 8005cd4:	f8da 3000 	ldr.w	r3, [sl]
 8005cd8:	4499      	add	r9, r3
 8005cda:	e7d3      	b.n	8005c84 <__cvt+0x68>
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e7d9      	b.n	8005c98 <__cvt+0x7c>

08005ce4 <__exponent>:
 8005ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	bfb6      	itet	lt
 8005cea:	232d      	movlt	r3, #45	@ 0x2d
 8005cec:	232b      	movge	r3, #43	@ 0x2b
 8005cee:	4249      	neglt	r1, r1
 8005cf0:	2909      	cmp	r1, #9
 8005cf2:	7002      	strb	r2, [r0, #0]
 8005cf4:	7043      	strb	r3, [r0, #1]
 8005cf6:	dd29      	ble.n	8005d4c <__exponent+0x68>
 8005cf8:	f10d 0307 	add.w	r3, sp, #7
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	270a      	movs	r7, #10
 8005d00:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d04:	461a      	mov	r2, r3
 8005d06:	fb07 1416 	mls	r4, r7, r6, r1
 8005d0a:	3430      	adds	r4, #48	@ 0x30
 8005d0c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d10:	460c      	mov	r4, r1
 8005d12:	2c63      	cmp	r4, #99	@ 0x63
 8005d14:	4631      	mov	r1, r6
 8005d16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d1a:	dcf1      	bgt.n	8005d00 <__exponent+0x1c>
 8005d1c:	3130      	adds	r1, #48	@ 0x30
 8005d1e:	1e94      	subs	r4, r2, #2
 8005d20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d24:	4623      	mov	r3, r4
 8005d26:	1c41      	adds	r1, r0, #1
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	d30a      	bcc.n	8005d42 <__exponent+0x5e>
 8005d2c:	f10d 0309 	add.w	r3, sp, #9
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	42ac      	cmp	r4, r5
 8005d34:	bf88      	it	hi
 8005d36:	2300      	movhi	r3, #0
 8005d38:	3302      	adds	r3, #2
 8005d3a:	4403      	add	r3, r0
 8005d3c:	1a18      	subs	r0, r3, r0
 8005d3e:	b003      	add	sp, #12
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d46:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d4a:	e7ed      	b.n	8005d28 <__exponent+0x44>
 8005d4c:	2330      	movs	r3, #48	@ 0x30
 8005d4e:	3130      	adds	r1, #48	@ 0x30
 8005d50:	7083      	strb	r3, [r0, #2]
 8005d52:	70c1      	strb	r1, [r0, #3]
 8005d54:	1d03      	adds	r3, r0, #4
 8005d56:	e7f1      	b.n	8005d3c <__exponent+0x58>

08005d58 <_printf_float>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	b091      	sub	sp, #68	@ 0x44
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005d64:	4616      	mov	r6, r2
 8005d66:	461f      	mov	r7, r3
 8005d68:	4605      	mov	r5, r0
 8005d6a:	f000 ff03 	bl	8006b74 <_localeconv_r>
 8005d6e:	6803      	ldr	r3, [r0, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	9308      	str	r3, [sp, #32]
 8005d74:	f7fa f9ec 	bl	8000150 <strlen>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d80:	9009      	str	r0, [sp, #36]	@ 0x24
 8005d82:	3307      	adds	r3, #7
 8005d84:	f023 0307 	bic.w	r3, r3, #7
 8005d88:	f103 0208 	add.w	r2, r3, #8
 8005d8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d90:	f8d4 b000 	ldr.w	fp, [r4]
 8005d94:	f8c8 2000 	str.w	r2, [r8]
 8005d98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005da2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295
 8005daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005db2:	4b9c      	ldr	r3, [pc, #624]	@ (8006024 <_printf_float+0x2cc>)
 8005db4:	f7fa fe2a 	bl	8000a0c <__aeabi_dcmpun>
 8005db8:	bb70      	cbnz	r0, 8005e18 <_printf_float+0xc0>
 8005dba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc2:	4b98      	ldr	r3, [pc, #608]	@ (8006024 <_printf_float+0x2cc>)
 8005dc4:	f7fa fe04 	bl	80009d0 <__aeabi_dcmple>
 8005dc8:	bb30      	cbnz	r0, 8005e18 <_printf_float+0xc0>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fdf3 	bl	80009bc <__aeabi_dcmplt>
 8005dd6:	b110      	cbz	r0, 8005dde <_printf_float+0x86>
 8005dd8:	232d      	movs	r3, #45	@ 0x2d
 8005dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dde:	4a92      	ldr	r2, [pc, #584]	@ (8006028 <_printf_float+0x2d0>)
 8005de0:	4b92      	ldr	r3, [pc, #584]	@ (800602c <_printf_float+0x2d4>)
 8005de2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005de6:	bf94      	ite	ls
 8005de8:	4690      	movls	r8, r2
 8005dea:	4698      	movhi	r8, r3
 8005dec:	2303      	movs	r3, #3
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	6123      	str	r3, [r4, #16]
 8005df4:	f02b 0304 	bic.w	r3, fp, #4
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	4633      	mov	r3, r6
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4628      	mov	r0, r5
 8005e00:	9700      	str	r7, [sp, #0]
 8005e02:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005e04:	f000 f9d4 	bl	80061b0 <_printf_common>
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f040 8090 	bne.w	8005f2e <_printf_float+0x1d6>
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	b011      	add	sp, #68	@ 0x44
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa fdf4 	bl	8000a0c <__aeabi_dcmpun>
 8005e24:	b148      	cbz	r0, 8005e3a <_printf_float+0xe2>
 8005e26:	464b      	mov	r3, r9
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bfb8      	it	lt
 8005e2c:	232d      	movlt	r3, #45	@ 0x2d
 8005e2e:	4a80      	ldr	r2, [pc, #512]	@ (8006030 <_printf_float+0x2d8>)
 8005e30:	bfb8      	it	lt
 8005e32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e36:	4b7f      	ldr	r3, [pc, #508]	@ (8006034 <_printf_float+0x2dc>)
 8005e38:	e7d3      	b.n	8005de2 <_printf_float+0x8a>
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005e40:	1c5a      	adds	r2, r3, #1
 8005e42:	d13f      	bne.n	8005ec4 <_printf_float+0x16c>
 8005e44:	2306      	movs	r3, #6
 8005e46:	6063      	str	r3, [r4, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	9206      	str	r2, [sp, #24]
 8005e52:	aa0e      	add	r2, sp, #56	@ 0x38
 8005e54:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005e58:	aa0d      	add	r2, sp, #52	@ 0x34
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005e60:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e64:	6863      	ldr	r3, [r4, #4]
 8005e66:	4642      	mov	r2, r8
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005e70:	f7ff fed4 	bl	8005c1c <__cvt>
 8005e74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e76:	4680      	mov	r8, r0
 8005e78:	2947      	cmp	r1, #71	@ 0x47
 8005e7a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005e7c:	d128      	bne.n	8005ed0 <_printf_float+0x178>
 8005e7e:	1cc8      	adds	r0, r1, #3
 8005e80:	db02      	blt.n	8005e88 <_printf_float+0x130>
 8005e82:	6863      	ldr	r3, [r4, #4]
 8005e84:	4299      	cmp	r1, r3
 8005e86:	dd40      	ble.n	8005f0a <_printf_float+0x1b2>
 8005e88:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e90:	4652      	mov	r2, sl
 8005e92:	3901      	subs	r1, #1
 8005e94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e98:	910d      	str	r1, [sp, #52]	@ 0x34
 8005e9a:	f7ff ff23 	bl	8005ce4 <__exponent>
 8005e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea0:	4681      	mov	r9, r0
 8005ea2:	1813      	adds	r3, r2, r0
 8005ea4:	2a01      	cmp	r2, #1
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	dc02      	bgt.n	8005eb0 <_printf_float+0x158>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	07d2      	lsls	r2, r2, #31
 8005eae:	d501      	bpl.n	8005eb4 <_printf_float+0x15c>
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d09e      	beq.n	8005dfa <_printf_float+0xa2>
 8005ebc:	232d      	movs	r3, #45	@ 0x2d
 8005ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ec2:	e79a      	b.n	8005dfa <_printf_float+0xa2>
 8005ec4:	2947      	cmp	r1, #71	@ 0x47
 8005ec6:	d1bf      	bne.n	8005e48 <_printf_float+0xf0>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1bd      	bne.n	8005e48 <_printf_float+0xf0>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7ba      	b.n	8005e46 <_printf_float+0xee>
 8005ed0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ed4:	d9dc      	bls.n	8005e90 <_printf_float+0x138>
 8005ed6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005eda:	d118      	bne.n	8005f0e <_printf_float+0x1b6>
 8005edc:	2900      	cmp	r1, #0
 8005ede:	6863      	ldr	r3, [r4, #4]
 8005ee0:	dd0b      	ble.n	8005efa <_printf_float+0x1a2>
 8005ee2:	6121      	str	r1, [r4, #16]
 8005ee4:	b913      	cbnz	r3, 8005eec <_printf_float+0x194>
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	07d0      	lsls	r0, r2, #31
 8005eea:	d502      	bpl.n	8005ef2 <_printf_float+0x19a>
 8005eec:	3301      	adds	r3, #1
 8005eee:	440b      	add	r3, r1
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	f04f 0900 	mov.w	r9, #0
 8005ef6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ef8:	e7dc      	b.n	8005eb4 <_printf_float+0x15c>
 8005efa:	b913      	cbnz	r3, 8005f02 <_printf_float+0x1aa>
 8005efc:	6822      	ldr	r2, [r4, #0]
 8005efe:	07d2      	lsls	r2, r2, #31
 8005f00:	d501      	bpl.n	8005f06 <_printf_float+0x1ae>
 8005f02:	3302      	adds	r3, #2
 8005f04:	e7f4      	b.n	8005ef0 <_printf_float+0x198>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e7f2      	b.n	8005ef0 <_printf_float+0x198>
 8005f0a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f10:	4299      	cmp	r1, r3
 8005f12:	db05      	blt.n	8005f20 <_printf_float+0x1c8>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	6121      	str	r1, [r4, #16]
 8005f18:	07d8      	lsls	r0, r3, #31
 8005f1a:	d5ea      	bpl.n	8005ef2 <_printf_float+0x19a>
 8005f1c:	1c4b      	adds	r3, r1, #1
 8005f1e:	e7e7      	b.n	8005ef0 <_printf_float+0x198>
 8005f20:	2900      	cmp	r1, #0
 8005f22:	bfcc      	ite	gt
 8005f24:	2201      	movgt	r2, #1
 8005f26:	f1c1 0202 	rsble	r2, r1, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	e7e0      	b.n	8005ef0 <_printf_float+0x198>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	055a      	lsls	r2, r3, #21
 8005f32:	d407      	bmi.n	8005f44 <_printf_float+0x1ec>
 8005f34:	6923      	ldr	r3, [r4, #16]
 8005f36:	4642      	mov	r2, r8
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	47b8      	blx	r7
 8005f3e:	3001      	adds	r0, #1
 8005f40:	d12b      	bne.n	8005f9a <_printf_float+0x242>
 8005f42:	e764      	b.n	8005e0e <_printf_float+0xb6>
 8005f44:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f48:	f240 80dc 	bls.w	8006104 <_printf_float+0x3ac>
 8005f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f50:	2200      	movs	r2, #0
 8005f52:	2300      	movs	r3, #0
 8005f54:	f7fa fd28 	bl	80009a8 <__aeabi_dcmpeq>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d033      	beq.n	8005fc4 <_printf_float+0x26c>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	4a35      	ldr	r2, [pc, #212]	@ (8006038 <_printf_float+0x2e0>)
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f af51 	beq.w	8005e0e <_printf_float+0xb6>
 8005f6c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005f70:	4543      	cmp	r3, r8
 8005f72:	db02      	blt.n	8005f7a <_printf_float+0x222>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	07d8      	lsls	r0, r3, #31
 8005f78:	d50f      	bpl.n	8005f9a <_printf_float+0x242>
 8005f7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f af42 	beq.w	8005e0e <_printf_float+0xb6>
 8005f8a:	f04f 0900 	mov.w	r9, #0
 8005f8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f92:	f104 0a1a 	add.w	sl, r4, #26
 8005f96:	45c8      	cmp	r8, r9
 8005f98:	dc09      	bgt.n	8005fae <_printf_float+0x256>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	079b      	lsls	r3, r3, #30
 8005f9e:	f100 8102 	bmi.w	80061a6 <_printf_float+0x44e>
 8005fa2:	68e0      	ldr	r0, [r4, #12]
 8005fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa6:	4298      	cmp	r0, r3
 8005fa8:	bfb8      	it	lt
 8005faa:	4618      	movlt	r0, r3
 8005fac:	e731      	b.n	8005e12 <_printf_float+0xba>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	f43f af28 	beq.w	8005e0e <_printf_float+0xb6>
 8005fbe:	f109 0901 	add.w	r9, r9, #1
 8005fc2:	e7e8      	b.n	8005f96 <_printf_float+0x23e>
 8005fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	dc38      	bgt.n	800603c <_printf_float+0x2e4>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	4a19      	ldr	r2, [pc, #100]	@ (8006038 <_printf_float+0x2e0>)
 8005fd2:	47b8      	blx	r7
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	f43f af1a 	beq.w	8005e0e <_printf_float+0xb6>
 8005fda:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005fde:	ea59 0303 	orrs.w	r3, r9, r3
 8005fe2:	d102      	bne.n	8005fea <_printf_float+0x292>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	07d9      	lsls	r1, r3, #31
 8005fe8:	d5d7      	bpl.n	8005f9a <_printf_float+0x242>
 8005fea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f af0a 	beq.w	8005e0e <_printf_float+0xb6>
 8005ffa:	f04f 0a00 	mov.w	sl, #0
 8005ffe:	f104 0b1a 	add.w	fp, r4, #26
 8006002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006004:	425b      	negs	r3, r3
 8006006:	4553      	cmp	r3, sl
 8006008:	dc01      	bgt.n	800600e <_printf_float+0x2b6>
 800600a:	464b      	mov	r3, r9
 800600c:	e793      	b.n	8005f36 <_printf_float+0x1de>
 800600e:	2301      	movs	r3, #1
 8006010:	465a      	mov	r2, fp
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f aef8 	beq.w	8005e0e <_printf_float+0xb6>
 800601e:	f10a 0a01 	add.w	sl, sl, #1
 8006022:	e7ee      	b.n	8006002 <_printf_float+0x2aa>
 8006024:	7fefffff 	.word	0x7fefffff
 8006028:	0800a7a8 	.word	0x0800a7a8
 800602c:	0800a7ac 	.word	0x0800a7ac
 8006030:	0800a7b0 	.word	0x0800a7b0
 8006034:	0800a7b4 	.word	0x0800a7b4
 8006038:	0800a7b8 	.word	0x0800a7b8
 800603c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800603e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006042:	4553      	cmp	r3, sl
 8006044:	bfa8      	it	ge
 8006046:	4653      	movge	r3, sl
 8006048:	2b00      	cmp	r3, #0
 800604a:	4699      	mov	r9, r3
 800604c:	dc36      	bgt.n	80060bc <_printf_float+0x364>
 800604e:	f04f 0b00 	mov.w	fp, #0
 8006052:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006056:	f104 021a 	add.w	r2, r4, #26
 800605a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800605c:	930a      	str	r3, [sp, #40]	@ 0x28
 800605e:	eba3 0309 	sub.w	r3, r3, r9
 8006062:	455b      	cmp	r3, fp
 8006064:	dc31      	bgt.n	80060ca <_printf_float+0x372>
 8006066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006068:	459a      	cmp	sl, r3
 800606a:	dc3a      	bgt.n	80060e2 <_printf_float+0x38a>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d437      	bmi.n	80060e2 <_printf_float+0x38a>
 8006072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006074:	ebaa 0903 	sub.w	r9, sl, r3
 8006078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607a:	ebaa 0303 	sub.w	r3, sl, r3
 800607e:	4599      	cmp	r9, r3
 8006080:	bfa8      	it	ge
 8006082:	4699      	movge	r9, r3
 8006084:	f1b9 0f00 	cmp.w	r9, #0
 8006088:	dc33      	bgt.n	80060f2 <_printf_float+0x39a>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006092:	f104 0b1a 	add.w	fp, r4, #26
 8006096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006098:	ebaa 0303 	sub.w	r3, sl, r3
 800609c:	eba3 0309 	sub.w	r3, r3, r9
 80060a0:	4543      	cmp	r3, r8
 80060a2:	f77f af7a 	ble.w	8005f9a <_printf_float+0x242>
 80060a6:	2301      	movs	r3, #1
 80060a8:	465a      	mov	r2, fp
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f aeac 	beq.w	8005e0e <_printf_float+0xb6>
 80060b6:	f108 0801 	add.w	r8, r8, #1
 80060ba:	e7ec      	b.n	8006096 <_printf_float+0x33e>
 80060bc:	4642      	mov	r2, r8
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	d1c2      	bne.n	800604e <_printf_float+0x2f6>
 80060c8:	e6a1      	b.n	8005e0e <_printf_float+0xb6>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4631      	mov	r1, r6
 80060ce:	4628      	mov	r0, r5
 80060d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f ae9a 	beq.w	8005e0e <_printf_float+0xb6>
 80060da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060dc:	f10b 0b01 	add.w	fp, fp, #1
 80060e0:	e7bb      	b.n	800605a <_printf_float+0x302>
 80060e2:	4631      	mov	r1, r6
 80060e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	d1c0      	bne.n	8006072 <_printf_float+0x31a>
 80060f0:	e68d      	b.n	8005e0e <_printf_float+0xb6>
 80060f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060f4:	464b      	mov	r3, r9
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	4442      	add	r2, r8
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	d1c3      	bne.n	800608a <_printf_float+0x332>
 8006102:	e684      	b.n	8005e0e <_printf_float+0xb6>
 8006104:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006108:	f1ba 0f01 	cmp.w	sl, #1
 800610c:	dc01      	bgt.n	8006112 <_printf_float+0x3ba>
 800610e:	07db      	lsls	r3, r3, #31
 8006110:	d536      	bpl.n	8006180 <_printf_float+0x428>
 8006112:	2301      	movs	r3, #1
 8006114:	4642      	mov	r2, r8
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f ae76 	beq.w	8005e0e <_printf_float+0xb6>
 8006122:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae6e 	beq.w	8005e0e <_printf_float+0xb6>
 8006132:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006136:	2200      	movs	r2, #0
 8006138:	2300      	movs	r3, #0
 800613a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800613e:	f7fa fc33 	bl	80009a8 <__aeabi_dcmpeq>
 8006142:	b9c0      	cbnz	r0, 8006176 <_printf_float+0x41e>
 8006144:	4653      	mov	r3, sl
 8006146:	f108 0201 	add.w	r2, r8, #1
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	d10c      	bne.n	800616e <_printf_float+0x416>
 8006154:	e65b      	b.n	8005e0e <_printf_float+0xb6>
 8006156:	2301      	movs	r3, #1
 8006158:	465a      	mov	r2, fp
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f ae54 	beq.w	8005e0e <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	45d0      	cmp	r8, sl
 800616c:	dbf3      	blt.n	8006156 <_printf_float+0x3fe>
 800616e:	464b      	mov	r3, r9
 8006170:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006174:	e6e0      	b.n	8005f38 <_printf_float+0x1e0>
 8006176:	f04f 0800 	mov.w	r8, #0
 800617a:	f104 0b1a 	add.w	fp, r4, #26
 800617e:	e7f4      	b.n	800616a <_printf_float+0x412>
 8006180:	2301      	movs	r3, #1
 8006182:	4642      	mov	r2, r8
 8006184:	e7e1      	b.n	800614a <_printf_float+0x3f2>
 8006186:	2301      	movs	r3, #1
 8006188:	464a      	mov	r2, r9
 800618a:	4631      	mov	r1, r6
 800618c:	4628      	mov	r0, r5
 800618e:	47b8      	blx	r7
 8006190:	3001      	adds	r0, #1
 8006192:	f43f ae3c 	beq.w	8005e0e <_printf_float+0xb6>
 8006196:	f108 0801 	add.w	r8, r8, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	4543      	cmp	r3, r8
 80061a2:	dcf0      	bgt.n	8006186 <_printf_float+0x42e>
 80061a4:	e6fd      	b.n	8005fa2 <_printf_float+0x24a>
 80061a6:	f04f 0800 	mov.w	r8, #0
 80061aa:	f104 0919 	add.w	r9, r4, #25
 80061ae:	e7f4      	b.n	800619a <_printf_float+0x442>

080061b0 <_printf_common>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	4616      	mov	r6, r2
 80061b6:	4698      	mov	r8, r3
 80061b8:	688a      	ldr	r2, [r1, #8]
 80061ba:	690b      	ldr	r3, [r1, #16]
 80061bc:	4607      	mov	r7, r0
 80061be:	4293      	cmp	r3, r2
 80061c0:	bfb8      	it	lt
 80061c2:	4613      	movlt	r3, r2
 80061c4:	6033      	str	r3, [r6, #0]
 80061c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061ca:	460c      	mov	r4, r1
 80061cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d0:	b10a      	cbz	r2, 80061d6 <_printf_common+0x26>
 80061d2:	3301      	adds	r3, #1
 80061d4:	6033      	str	r3, [r6, #0]
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	0699      	lsls	r1, r3, #26
 80061da:	bf42      	ittt	mi
 80061dc:	6833      	ldrmi	r3, [r6, #0]
 80061de:	3302      	addmi	r3, #2
 80061e0:	6033      	strmi	r3, [r6, #0]
 80061e2:	6825      	ldr	r5, [r4, #0]
 80061e4:	f015 0506 	ands.w	r5, r5, #6
 80061e8:	d106      	bne.n	80061f8 <_printf_common+0x48>
 80061ea:	f104 0a19 	add.w	sl, r4, #25
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	6832      	ldr	r2, [r6, #0]
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dc2b      	bgt.n	8006250 <_printf_common+0xa0>
 80061f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	3b00      	subs	r3, #0
 8006200:	bf18      	it	ne
 8006202:	2301      	movne	r3, #1
 8006204:	0692      	lsls	r2, r2, #26
 8006206:	d430      	bmi.n	800626a <_printf_common+0xba>
 8006208:	4641      	mov	r1, r8
 800620a:	4638      	mov	r0, r7
 800620c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006210:	47c8      	blx	r9
 8006212:	3001      	adds	r0, #1
 8006214:	d023      	beq.n	800625e <_printf_common+0xae>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	2b04      	cmp	r3, #4
 8006220:	bf14      	ite	ne
 8006222:	2500      	movne	r5, #0
 8006224:	6833      	ldreq	r3, [r6, #0]
 8006226:	f04f 0600 	mov.w	r6, #0
 800622a:	bf08      	it	eq
 800622c:	68e5      	ldreq	r5, [r4, #12]
 800622e:	f104 041a 	add.w	r4, r4, #26
 8006232:	bf08      	it	eq
 8006234:	1aed      	subeq	r5, r5, r3
 8006236:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800623a:	bf08      	it	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	4293      	cmp	r3, r2
 8006242:	bfc4      	itt	gt
 8006244:	1a9b      	subgt	r3, r3, r2
 8006246:	18ed      	addgt	r5, r5, r3
 8006248:	42b5      	cmp	r5, r6
 800624a:	d11a      	bne.n	8006282 <_printf_common+0xd2>
 800624c:	2000      	movs	r0, #0
 800624e:	e008      	b.n	8006262 <_printf_common+0xb2>
 8006250:	2301      	movs	r3, #1
 8006252:	4652      	mov	r2, sl
 8006254:	4641      	mov	r1, r8
 8006256:	4638      	mov	r0, r7
 8006258:	47c8      	blx	r9
 800625a:	3001      	adds	r0, #1
 800625c:	d103      	bne.n	8006266 <_printf_common+0xb6>
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006266:	3501      	adds	r5, #1
 8006268:	e7c1      	b.n	80061ee <_printf_common+0x3e>
 800626a:	2030      	movs	r0, #48	@ 0x30
 800626c:	18e1      	adds	r1, r4, r3
 800626e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006278:	4422      	add	r2, r4
 800627a:	3302      	adds	r3, #2
 800627c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006280:	e7c2      	b.n	8006208 <_printf_common+0x58>
 8006282:	2301      	movs	r3, #1
 8006284:	4622      	mov	r2, r4
 8006286:	4641      	mov	r1, r8
 8006288:	4638      	mov	r0, r7
 800628a:	47c8      	blx	r9
 800628c:	3001      	adds	r0, #1
 800628e:	d0e6      	beq.n	800625e <_printf_common+0xae>
 8006290:	3601      	adds	r6, #1
 8006292:	e7d9      	b.n	8006248 <_printf_common+0x98>

08006294 <_printf_i>:
 8006294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006298:	7e0f      	ldrb	r7, [r1, #24]
 800629a:	4691      	mov	r9, r2
 800629c:	2f78      	cmp	r7, #120	@ 0x78
 800629e:	4680      	mov	r8, r0
 80062a0:	460c      	mov	r4, r1
 80062a2:	469a      	mov	sl, r3
 80062a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062aa:	d807      	bhi.n	80062bc <_printf_i+0x28>
 80062ac:	2f62      	cmp	r7, #98	@ 0x62
 80062ae:	d80a      	bhi.n	80062c6 <_printf_i+0x32>
 80062b0:	2f00      	cmp	r7, #0
 80062b2:	f000 80d3 	beq.w	800645c <_printf_i+0x1c8>
 80062b6:	2f58      	cmp	r7, #88	@ 0x58
 80062b8:	f000 80ba 	beq.w	8006430 <_printf_i+0x19c>
 80062bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062c4:	e03a      	b.n	800633c <_printf_i+0xa8>
 80062c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ca:	2b15      	cmp	r3, #21
 80062cc:	d8f6      	bhi.n	80062bc <_printf_i+0x28>
 80062ce:	a101      	add	r1, pc, #4	@ (adr r1, 80062d4 <_printf_i+0x40>)
 80062d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062d4:	0800632d 	.word	0x0800632d
 80062d8:	08006341 	.word	0x08006341
 80062dc:	080062bd 	.word	0x080062bd
 80062e0:	080062bd 	.word	0x080062bd
 80062e4:	080062bd 	.word	0x080062bd
 80062e8:	080062bd 	.word	0x080062bd
 80062ec:	08006341 	.word	0x08006341
 80062f0:	080062bd 	.word	0x080062bd
 80062f4:	080062bd 	.word	0x080062bd
 80062f8:	080062bd 	.word	0x080062bd
 80062fc:	080062bd 	.word	0x080062bd
 8006300:	08006443 	.word	0x08006443
 8006304:	0800636b 	.word	0x0800636b
 8006308:	080063fd 	.word	0x080063fd
 800630c:	080062bd 	.word	0x080062bd
 8006310:	080062bd 	.word	0x080062bd
 8006314:	08006465 	.word	0x08006465
 8006318:	080062bd 	.word	0x080062bd
 800631c:	0800636b 	.word	0x0800636b
 8006320:	080062bd 	.word	0x080062bd
 8006324:	080062bd 	.word	0x080062bd
 8006328:	08006405 	.word	0x08006405
 800632c:	6833      	ldr	r3, [r6, #0]
 800632e:	1d1a      	adds	r2, r3, #4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6032      	str	r2, [r6, #0]
 8006334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800633c:	2301      	movs	r3, #1
 800633e:	e09e      	b.n	800647e <_printf_i+0x1ea>
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	6820      	ldr	r0, [r4, #0]
 8006344:	1d19      	adds	r1, r3, #4
 8006346:	6031      	str	r1, [r6, #0]
 8006348:	0606      	lsls	r6, r0, #24
 800634a:	d501      	bpl.n	8006350 <_printf_i+0xbc>
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	e003      	b.n	8006358 <_printf_i+0xc4>
 8006350:	0645      	lsls	r5, r0, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0xb8>
 8006354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006358:	2d00      	cmp	r5, #0
 800635a:	da03      	bge.n	8006364 <_printf_i+0xd0>
 800635c:	232d      	movs	r3, #45	@ 0x2d
 800635e:	426d      	negs	r5, r5
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006364:	230a      	movs	r3, #10
 8006366:	4859      	ldr	r0, [pc, #356]	@ (80064cc <_printf_i+0x238>)
 8006368:	e011      	b.n	800638e <_printf_i+0xfa>
 800636a:	6821      	ldr	r1, [r4, #0]
 800636c:	6833      	ldr	r3, [r6, #0]
 800636e:	0608      	lsls	r0, r1, #24
 8006370:	f853 5b04 	ldr.w	r5, [r3], #4
 8006374:	d402      	bmi.n	800637c <_printf_i+0xe8>
 8006376:	0649      	lsls	r1, r1, #25
 8006378:	bf48      	it	mi
 800637a:	b2ad      	uxthmi	r5, r5
 800637c:	2f6f      	cmp	r7, #111	@ 0x6f
 800637e:	6033      	str	r3, [r6, #0]
 8006380:	bf14      	ite	ne
 8006382:	230a      	movne	r3, #10
 8006384:	2308      	moveq	r3, #8
 8006386:	4851      	ldr	r0, [pc, #324]	@ (80064cc <_printf_i+0x238>)
 8006388:	2100      	movs	r1, #0
 800638a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800638e:	6866      	ldr	r6, [r4, #4]
 8006390:	2e00      	cmp	r6, #0
 8006392:	bfa8      	it	ge
 8006394:	6821      	ldrge	r1, [r4, #0]
 8006396:	60a6      	str	r6, [r4, #8]
 8006398:	bfa4      	itt	ge
 800639a:	f021 0104 	bicge.w	r1, r1, #4
 800639e:	6021      	strge	r1, [r4, #0]
 80063a0:	b90d      	cbnz	r5, 80063a6 <_printf_i+0x112>
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d04b      	beq.n	800643e <_printf_i+0x1aa>
 80063a6:	4616      	mov	r6, r2
 80063a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ac:	fb03 5711 	mls	r7, r3, r1, r5
 80063b0:	5dc7      	ldrb	r7, [r0, r7]
 80063b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063b6:	462f      	mov	r7, r5
 80063b8:	42bb      	cmp	r3, r7
 80063ba:	460d      	mov	r5, r1
 80063bc:	d9f4      	bls.n	80063a8 <_printf_i+0x114>
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d10b      	bne.n	80063da <_printf_i+0x146>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	07df      	lsls	r7, r3, #31
 80063c6:	d508      	bpl.n	80063da <_printf_i+0x146>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6861      	ldr	r1, [r4, #4]
 80063cc:	4299      	cmp	r1, r3
 80063ce:	bfde      	ittt	le
 80063d0:	2330      	movle	r3, #48	@ 0x30
 80063d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063da:	1b92      	subs	r2, r2, r6
 80063dc:	6122      	str	r2, [r4, #16]
 80063de:	464b      	mov	r3, r9
 80063e0:	4621      	mov	r1, r4
 80063e2:	4640      	mov	r0, r8
 80063e4:	f8cd a000 	str.w	sl, [sp]
 80063e8:	aa03      	add	r2, sp, #12
 80063ea:	f7ff fee1 	bl	80061b0 <_printf_common>
 80063ee:	3001      	adds	r0, #1
 80063f0:	d14a      	bne.n	8006488 <_printf_i+0x1f4>
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295
 80063f6:	b004      	add	sp, #16
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f043 0320 	orr.w	r3, r3, #32
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	2778      	movs	r7, #120	@ 0x78
 8006406:	4832      	ldr	r0, [pc, #200]	@ (80064d0 <_printf_i+0x23c>)
 8006408:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	061f      	lsls	r7, r3, #24
 8006412:	f851 5b04 	ldr.w	r5, [r1], #4
 8006416:	d402      	bmi.n	800641e <_printf_i+0x18a>
 8006418:	065f      	lsls	r7, r3, #25
 800641a:	bf48      	it	mi
 800641c:	b2ad      	uxthmi	r5, r5
 800641e:	6031      	str	r1, [r6, #0]
 8006420:	07d9      	lsls	r1, r3, #31
 8006422:	bf44      	itt	mi
 8006424:	f043 0320 	orrmi.w	r3, r3, #32
 8006428:	6023      	strmi	r3, [r4, #0]
 800642a:	b11d      	cbz	r5, 8006434 <_printf_i+0x1a0>
 800642c:	2310      	movs	r3, #16
 800642e:	e7ab      	b.n	8006388 <_printf_i+0xf4>
 8006430:	4826      	ldr	r0, [pc, #152]	@ (80064cc <_printf_i+0x238>)
 8006432:	e7e9      	b.n	8006408 <_printf_i+0x174>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	f023 0320 	bic.w	r3, r3, #32
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	e7f6      	b.n	800642c <_printf_i+0x198>
 800643e:	4616      	mov	r6, r2
 8006440:	e7bd      	b.n	80063be <_printf_i+0x12a>
 8006442:	6833      	ldr	r3, [r6, #0]
 8006444:	6825      	ldr	r5, [r4, #0]
 8006446:	1d18      	adds	r0, r3, #4
 8006448:	6961      	ldr	r1, [r4, #20]
 800644a:	6030      	str	r0, [r6, #0]
 800644c:	062e      	lsls	r6, r5, #24
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	d501      	bpl.n	8006456 <_printf_i+0x1c2>
 8006452:	6019      	str	r1, [r3, #0]
 8006454:	e002      	b.n	800645c <_printf_i+0x1c8>
 8006456:	0668      	lsls	r0, r5, #25
 8006458:	d5fb      	bpl.n	8006452 <_printf_i+0x1be>
 800645a:	8019      	strh	r1, [r3, #0]
 800645c:	2300      	movs	r3, #0
 800645e:	4616      	mov	r6, r2
 8006460:	6123      	str	r3, [r4, #16]
 8006462:	e7bc      	b.n	80063de <_printf_i+0x14a>
 8006464:	6833      	ldr	r3, [r6, #0]
 8006466:	2100      	movs	r1, #0
 8006468:	1d1a      	adds	r2, r3, #4
 800646a:	6032      	str	r2, [r6, #0]
 800646c:	681e      	ldr	r6, [r3, #0]
 800646e:	6862      	ldr	r2, [r4, #4]
 8006470:	4630      	mov	r0, r6
 8006472:	f000 fbf6 	bl	8006c62 <memchr>
 8006476:	b108      	cbz	r0, 800647c <_printf_i+0x1e8>
 8006478:	1b80      	subs	r0, r0, r6
 800647a:	6060      	str	r0, [r4, #4]
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	2300      	movs	r3, #0
 8006482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006486:	e7aa      	b.n	80063de <_printf_i+0x14a>
 8006488:	4632      	mov	r2, r6
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	47d0      	blx	sl
 8006492:	3001      	adds	r0, #1
 8006494:	d0ad      	beq.n	80063f2 <_printf_i+0x15e>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	079b      	lsls	r3, r3, #30
 800649a:	d413      	bmi.n	80064c4 <_printf_i+0x230>
 800649c:	68e0      	ldr	r0, [r4, #12]
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	4298      	cmp	r0, r3
 80064a2:	bfb8      	it	lt
 80064a4:	4618      	movlt	r0, r3
 80064a6:	e7a6      	b.n	80063f6 <_printf_i+0x162>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4632      	mov	r2, r6
 80064ac:	4649      	mov	r1, r9
 80064ae:	4640      	mov	r0, r8
 80064b0:	47d0      	blx	sl
 80064b2:	3001      	adds	r0, #1
 80064b4:	d09d      	beq.n	80063f2 <_printf_i+0x15e>
 80064b6:	3501      	adds	r5, #1
 80064b8:	68e3      	ldr	r3, [r4, #12]
 80064ba:	9903      	ldr	r1, [sp, #12]
 80064bc:	1a5b      	subs	r3, r3, r1
 80064be:	42ab      	cmp	r3, r5
 80064c0:	dcf2      	bgt.n	80064a8 <_printf_i+0x214>
 80064c2:	e7eb      	b.n	800649c <_printf_i+0x208>
 80064c4:	2500      	movs	r5, #0
 80064c6:	f104 0619 	add.w	r6, r4, #25
 80064ca:	e7f5      	b.n	80064b8 <_printf_i+0x224>
 80064cc:	0800a7ba 	.word	0x0800a7ba
 80064d0:	0800a7cb 	.word	0x0800a7cb

080064d4 <_scanf_float>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	b087      	sub	sp, #28
 80064da:	9303      	str	r3, [sp, #12]
 80064dc:	688b      	ldr	r3, [r1, #8]
 80064de:	4617      	mov	r7, r2
 80064e0:	1e5a      	subs	r2, r3, #1
 80064e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80064e6:	bf82      	ittt	hi
 80064e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80064ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80064f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80064f4:	460a      	mov	r2, r1
 80064f6:	f04f 0500 	mov.w	r5, #0
 80064fa:	bf88      	it	hi
 80064fc:	608b      	strhi	r3, [r1, #8]
 80064fe:	680b      	ldr	r3, [r1, #0]
 8006500:	4680      	mov	r8, r0
 8006502:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006506:	f842 3b1c 	str.w	r3, [r2], #28
 800650a:	460c      	mov	r4, r1
 800650c:	bf98      	it	ls
 800650e:	f04f 0b00 	movls.w	fp, #0
 8006512:	4616      	mov	r6, r2
 8006514:	46aa      	mov	sl, r5
 8006516:	46a9      	mov	r9, r5
 8006518:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800651c:	9201      	str	r2, [sp, #4]
 800651e:	9502      	str	r5, [sp, #8]
 8006520:	68a2      	ldr	r2, [r4, #8]
 8006522:	b152      	cbz	r2, 800653a <_scanf_float+0x66>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b4e      	cmp	r3, #78	@ 0x4e
 800652a:	d865      	bhi.n	80065f8 <_scanf_float+0x124>
 800652c:	2b40      	cmp	r3, #64	@ 0x40
 800652e:	d83d      	bhi.n	80065ac <_scanf_float+0xd8>
 8006530:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006534:	b2c8      	uxtb	r0, r1
 8006536:	280e      	cmp	r0, #14
 8006538:	d93b      	bls.n	80065b2 <_scanf_float+0xde>
 800653a:	f1b9 0f00 	cmp.w	r9, #0
 800653e:	d003      	beq.n	8006548 <_scanf_float+0x74>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	f10a 3aff 	add.w	sl, sl, #4294967295
 800654c:	f1ba 0f01 	cmp.w	sl, #1
 8006550:	f200 8118 	bhi.w	8006784 <_scanf_float+0x2b0>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	429e      	cmp	r6, r3
 8006558:	f200 8109 	bhi.w	800676e <_scanf_float+0x29a>
 800655c:	2001      	movs	r0, #1
 800655e:	b007      	add	sp, #28
 8006560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006564:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006568:	2a0d      	cmp	r2, #13
 800656a:	d8e6      	bhi.n	800653a <_scanf_float+0x66>
 800656c:	a101      	add	r1, pc, #4	@ (adr r1, 8006574 <_scanf_float+0xa0>)
 800656e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006572:	bf00      	nop
 8006574:	080066bb 	.word	0x080066bb
 8006578:	0800653b 	.word	0x0800653b
 800657c:	0800653b 	.word	0x0800653b
 8006580:	0800653b 	.word	0x0800653b
 8006584:	0800671b 	.word	0x0800671b
 8006588:	080066f3 	.word	0x080066f3
 800658c:	0800653b 	.word	0x0800653b
 8006590:	0800653b 	.word	0x0800653b
 8006594:	080066c9 	.word	0x080066c9
 8006598:	0800653b 	.word	0x0800653b
 800659c:	0800653b 	.word	0x0800653b
 80065a0:	0800653b 	.word	0x0800653b
 80065a4:	0800653b 	.word	0x0800653b
 80065a8:	08006681 	.word	0x08006681
 80065ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80065b0:	e7da      	b.n	8006568 <_scanf_float+0x94>
 80065b2:	290e      	cmp	r1, #14
 80065b4:	d8c1      	bhi.n	800653a <_scanf_float+0x66>
 80065b6:	a001      	add	r0, pc, #4	@ (adr r0, 80065bc <_scanf_float+0xe8>)
 80065b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065bc:	08006671 	.word	0x08006671
 80065c0:	0800653b 	.word	0x0800653b
 80065c4:	08006671 	.word	0x08006671
 80065c8:	08006707 	.word	0x08006707
 80065cc:	0800653b 	.word	0x0800653b
 80065d0:	08006619 	.word	0x08006619
 80065d4:	08006657 	.word	0x08006657
 80065d8:	08006657 	.word	0x08006657
 80065dc:	08006657 	.word	0x08006657
 80065e0:	08006657 	.word	0x08006657
 80065e4:	08006657 	.word	0x08006657
 80065e8:	08006657 	.word	0x08006657
 80065ec:	08006657 	.word	0x08006657
 80065f0:	08006657 	.word	0x08006657
 80065f4:	08006657 	.word	0x08006657
 80065f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80065fa:	d809      	bhi.n	8006610 <_scanf_float+0x13c>
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d8b1      	bhi.n	8006564 <_scanf_float+0x90>
 8006600:	2b54      	cmp	r3, #84	@ 0x54
 8006602:	d07b      	beq.n	80066fc <_scanf_float+0x228>
 8006604:	2b59      	cmp	r3, #89	@ 0x59
 8006606:	d198      	bne.n	800653a <_scanf_float+0x66>
 8006608:	2d07      	cmp	r5, #7
 800660a:	d196      	bne.n	800653a <_scanf_float+0x66>
 800660c:	2508      	movs	r5, #8
 800660e:	e02c      	b.n	800666a <_scanf_float+0x196>
 8006610:	2b74      	cmp	r3, #116	@ 0x74
 8006612:	d073      	beq.n	80066fc <_scanf_float+0x228>
 8006614:	2b79      	cmp	r3, #121	@ 0x79
 8006616:	e7f6      	b.n	8006606 <_scanf_float+0x132>
 8006618:	6821      	ldr	r1, [r4, #0]
 800661a:	05c8      	lsls	r0, r1, #23
 800661c:	d51b      	bpl.n	8006656 <_scanf_float+0x182>
 800661e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006622:	6021      	str	r1, [r4, #0]
 8006624:	f109 0901 	add.w	r9, r9, #1
 8006628:	f1bb 0f00 	cmp.w	fp, #0
 800662c:	d003      	beq.n	8006636 <_scanf_float+0x162>
 800662e:	3201      	adds	r2, #1
 8006630:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006634:	60a2      	str	r2, [r4, #8]
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	3b01      	subs	r3, #1
 800663a:	60a3      	str	r3, [r4, #8]
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	3301      	adds	r3, #1
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3b01      	subs	r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	607b      	str	r3, [r7, #4]
 800664a:	f340 8087 	ble.w	800675c <_scanf_float+0x288>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	e764      	b.n	8006520 <_scanf_float+0x4c>
 8006656:	eb1a 0105 	adds.w	r1, sl, r5
 800665a:	f47f af6e 	bne.w	800653a <_scanf_float+0x66>
 800665e:	460d      	mov	r5, r1
 8006660:	468a      	mov	sl, r1
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	f806 3b01 	strb.w	r3, [r6], #1
 800666e:	e7e2      	b.n	8006636 <_scanf_float+0x162>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	0610      	lsls	r0, r2, #24
 8006674:	f57f af61 	bpl.w	800653a <_scanf_float+0x66>
 8006678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	e7f4      	b.n	800666a <_scanf_float+0x196>
 8006680:	f1ba 0f00 	cmp.w	sl, #0
 8006684:	d10e      	bne.n	80066a4 <_scanf_float+0x1d0>
 8006686:	f1b9 0f00 	cmp.w	r9, #0
 800668a:	d10e      	bne.n	80066aa <_scanf_float+0x1d6>
 800668c:	6822      	ldr	r2, [r4, #0]
 800668e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006692:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006696:	d108      	bne.n	80066aa <_scanf_float+0x1d6>
 8006698:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800669c:	f04f 0a01 	mov.w	sl, #1
 80066a0:	6022      	str	r2, [r4, #0]
 80066a2:	e7e2      	b.n	800666a <_scanf_float+0x196>
 80066a4:	f1ba 0f02 	cmp.w	sl, #2
 80066a8:	d055      	beq.n	8006756 <_scanf_float+0x282>
 80066aa:	2d01      	cmp	r5, #1
 80066ac:	d002      	beq.n	80066b4 <_scanf_float+0x1e0>
 80066ae:	2d04      	cmp	r5, #4
 80066b0:	f47f af43 	bne.w	800653a <_scanf_float+0x66>
 80066b4:	3501      	adds	r5, #1
 80066b6:	b2ed      	uxtb	r5, r5
 80066b8:	e7d7      	b.n	800666a <_scanf_float+0x196>
 80066ba:	f1ba 0f01 	cmp.w	sl, #1
 80066be:	f47f af3c 	bne.w	800653a <_scanf_float+0x66>
 80066c2:	f04f 0a02 	mov.w	sl, #2
 80066c6:	e7d0      	b.n	800666a <_scanf_float+0x196>
 80066c8:	b97d      	cbnz	r5, 80066ea <_scanf_float+0x216>
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	f47f af37 	bne.w	8006540 <_scanf_float+0x6c>
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80066d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80066dc:	f040 8103 	bne.w	80068e6 <_scanf_float+0x412>
 80066e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80066e4:	2501      	movs	r5, #1
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	e7bf      	b.n	800666a <_scanf_float+0x196>
 80066ea:	2d03      	cmp	r5, #3
 80066ec:	d0e2      	beq.n	80066b4 <_scanf_float+0x1e0>
 80066ee:	2d05      	cmp	r5, #5
 80066f0:	e7de      	b.n	80066b0 <_scanf_float+0x1dc>
 80066f2:	2d02      	cmp	r5, #2
 80066f4:	f47f af21 	bne.w	800653a <_scanf_float+0x66>
 80066f8:	2503      	movs	r5, #3
 80066fa:	e7b6      	b.n	800666a <_scanf_float+0x196>
 80066fc:	2d06      	cmp	r5, #6
 80066fe:	f47f af1c 	bne.w	800653a <_scanf_float+0x66>
 8006702:	2507      	movs	r5, #7
 8006704:	e7b1      	b.n	800666a <_scanf_float+0x196>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	0591      	lsls	r1, r2, #22
 800670a:	f57f af16 	bpl.w	800653a <_scanf_float+0x66>
 800670e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006712:	6022      	str	r2, [r4, #0]
 8006714:	f8cd 9008 	str.w	r9, [sp, #8]
 8006718:	e7a7      	b.n	800666a <_scanf_float+0x196>
 800671a:	6822      	ldr	r2, [r4, #0]
 800671c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006720:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006724:	d006      	beq.n	8006734 <_scanf_float+0x260>
 8006726:	0550      	lsls	r0, r2, #21
 8006728:	f57f af07 	bpl.w	800653a <_scanf_float+0x66>
 800672c:	f1b9 0f00 	cmp.w	r9, #0
 8006730:	f000 80d9 	beq.w	80068e6 <_scanf_float+0x412>
 8006734:	0591      	lsls	r1, r2, #22
 8006736:	bf58      	it	pl
 8006738:	9902      	ldrpl	r1, [sp, #8]
 800673a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800673e:	bf58      	it	pl
 8006740:	eba9 0101 	subpl.w	r1, r9, r1
 8006744:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006748:	f04f 0900 	mov.w	r9, #0
 800674c:	bf58      	it	pl
 800674e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006752:	6022      	str	r2, [r4, #0]
 8006754:	e789      	b.n	800666a <_scanf_float+0x196>
 8006756:	f04f 0a03 	mov.w	sl, #3
 800675a:	e786      	b.n	800666a <_scanf_float+0x196>
 800675c:	4639      	mov	r1, r7
 800675e:	4640      	mov	r0, r8
 8006760:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006764:	4798      	blx	r3
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f aeda 	beq.w	8006520 <_scanf_float+0x4c>
 800676c:	e6e5      	b.n	800653a <_scanf_float+0x66>
 800676e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006772:	463a      	mov	r2, r7
 8006774:	4640      	mov	r0, r8
 8006776:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800677a:	4798      	blx	r3
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	3b01      	subs	r3, #1
 8006780:	6123      	str	r3, [r4, #16]
 8006782:	e6e7      	b.n	8006554 <_scanf_float+0x80>
 8006784:	1e6b      	subs	r3, r5, #1
 8006786:	2b06      	cmp	r3, #6
 8006788:	d824      	bhi.n	80067d4 <_scanf_float+0x300>
 800678a:	2d02      	cmp	r5, #2
 800678c:	d836      	bhi.n	80067fc <_scanf_float+0x328>
 800678e:	9b01      	ldr	r3, [sp, #4]
 8006790:	429e      	cmp	r6, r3
 8006792:	f67f aee3 	bls.w	800655c <_scanf_float+0x88>
 8006796:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800679a:	463a      	mov	r2, r7
 800679c:	4640      	mov	r0, r8
 800679e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067a2:	4798      	blx	r3
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	e7f0      	b.n	800678e <_scanf_float+0x2ba>
 80067ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067b0:	463a      	mov	r2, r7
 80067b2:	4640      	mov	r0, r8
 80067b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80067b8:	4798      	blx	r3
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	3b01      	subs	r3, #1
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067c4:	fa5f fa8a 	uxtb.w	sl, sl
 80067c8:	f1ba 0f02 	cmp.w	sl, #2
 80067cc:	d1ee      	bne.n	80067ac <_scanf_float+0x2d8>
 80067ce:	3d03      	subs	r5, #3
 80067d0:	b2ed      	uxtb	r5, r5
 80067d2:	1b76      	subs	r6, r6, r5
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	05da      	lsls	r2, r3, #23
 80067d8:	d530      	bpl.n	800683c <_scanf_float+0x368>
 80067da:	055b      	lsls	r3, r3, #21
 80067dc:	d511      	bpl.n	8006802 <_scanf_float+0x32e>
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	429e      	cmp	r6, r3
 80067e2:	f67f aebb 	bls.w	800655c <_scanf_float+0x88>
 80067e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067ea:	463a      	mov	r2, r7
 80067ec:	4640      	mov	r0, r8
 80067ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067f2:	4798      	blx	r3
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	e7f0      	b.n	80067de <_scanf_float+0x30a>
 80067fc:	46aa      	mov	sl, r5
 80067fe:	46b3      	mov	fp, r6
 8006800:	e7de      	b.n	80067c0 <_scanf_float+0x2ec>
 8006802:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	2965      	cmp	r1, #101	@ 0x65
 800680a:	f103 33ff 	add.w	r3, r3, #4294967295
 800680e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	d00c      	beq.n	8006830 <_scanf_float+0x35c>
 8006816:	2945      	cmp	r1, #69	@ 0x45
 8006818:	d00a      	beq.n	8006830 <_scanf_float+0x35c>
 800681a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800681e:	463a      	mov	r2, r7
 8006820:	4640      	mov	r0, r8
 8006822:	4798      	blx	r3
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800682a:	3b01      	subs	r3, #1
 800682c:	1eb5      	subs	r5, r6, #2
 800682e:	6123      	str	r3, [r4, #16]
 8006830:	463a      	mov	r2, r7
 8006832:	4640      	mov	r0, r8
 8006834:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006838:	4798      	blx	r3
 800683a:	462e      	mov	r6, r5
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	f012 0210 	ands.w	r2, r2, #16
 8006842:	d001      	beq.n	8006848 <_scanf_float+0x374>
 8006844:	2000      	movs	r0, #0
 8006846:	e68a      	b.n	800655e <_scanf_float+0x8a>
 8006848:	7032      	strb	r2, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006854:	d11c      	bne.n	8006890 <_scanf_float+0x3bc>
 8006856:	9b02      	ldr	r3, [sp, #8]
 8006858:	454b      	cmp	r3, r9
 800685a:	eba3 0209 	sub.w	r2, r3, r9
 800685e:	d123      	bne.n	80068a8 <_scanf_float+0x3d4>
 8006860:	2200      	movs	r2, #0
 8006862:	4640      	mov	r0, r8
 8006864:	9901      	ldr	r1, [sp, #4]
 8006866:	f7ff f97b 	bl	8005b60 <_strtod_r>
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	6825      	ldr	r5, [r4, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f015 0f02 	tst.w	r5, #2
 8006874:	4606      	mov	r6, r0
 8006876:	460f      	mov	r7, r1
 8006878:	f103 0204 	add.w	r2, r3, #4
 800687c:	d01f      	beq.n	80068be <_scanf_float+0x3ea>
 800687e:	9903      	ldr	r1, [sp, #12]
 8006880:	600a      	str	r2, [r1, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	e9c3 6700 	strd	r6, r7, [r3]
 8006888:	68e3      	ldr	r3, [r4, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60e3      	str	r3, [r4, #12]
 800688e:	e7d9      	b.n	8006844 <_scanf_float+0x370>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0e4      	beq.n	8006860 <_scanf_float+0x38c>
 8006896:	9905      	ldr	r1, [sp, #20]
 8006898:	230a      	movs	r3, #10
 800689a:	4640      	mov	r0, r8
 800689c:	3101      	adds	r1, #1
 800689e:	f002 f9c1 	bl	8008c24 <_strtol_r>
 80068a2:	9b04      	ldr	r3, [sp, #16]
 80068a4:	9e05      	ldr	r6, [sp, #20]
 80068a6:	1ac2      	subs	r2, r0, r3
 80068a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80068ac:	429e      	cmp	r6, r3
 80068ae:	bf28      	it	cs
 80068b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80068b4:	4630      	mov	r0, r6
 80068b6:	490d      	ldr	r1, [pc, #52]	@ (80068ec <_scanf_float+0x418>)
 80068b8:	f000 f8de 	bl	8006a78 <siprintf>
 80068bc:	e7d0      	b.n	8006860 <_scanf_float+0x38c>
 80068be:	076d      	lsls	r5, r5, #29
 80068c0:	d4dd      	bmi.n	800687e <_scanf_float+0x3aa>
 80068c2:	9d03      	ldr	r5, [sp, #12]
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	681d      	ldr	r5, [r3, #0]
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	f7fa f89e 	bl	8000a0c <__aeabi_dcmpun>
 80068d0:	b120      	cbz	r0, 80068dc <_scanf_float+0x408>
 80068d2:	4807      	ldr	r0, [pc, #28]	@ (80068f0 <_scanf_float+0x41c>)
 80068d4:	f000 f9e8 	bl	8006ca8 <nanf>
 80068d8:	6028      	str	r0, [r5, #0]
 80068da:	e7d5      	b.n	8006888 <_scanf_float+0x3b4>
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7fa f8f2 	bl	8000ac8 <__aeabi_d2f>
 80068e4:	e7f8      	b.n	80068d8 <_scanf_float+0x404>
 80068e6:	f04f 0900 	mov.w	r9, #0
 80068ea:	e62d      	b.n	8006548 <_scanf_float+0x74>
 80068ec:	0800a7dc 	.word	0x0800a7dc
 80068f0:	0800ab7d 	.word	0x0800ab7d

080068f4 <std>:
 80068f4:	2300      	movs	r3, #0
 80068f6:	b510      	push	{r4, lr}
 80068f8:	4604      	mov	r4, r0
 80068fa:	e9c0 3300 	strd	r3, r3, [r0]
 80068fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006902:	6083      	str	r3, [r0, #8]
 8006904:	8181      	strh	r1, [r0, #12]
 8006906:	6643      	str	r3, [r0, #100]	@ 0x64
 8006908:	81c2      	strh	r2, [r0, #14]
 800690a:	6183      	str	r3, [r0, #24]
 800690c:	4619      	mov	r1, r3
 800690e:	2208      	movs	r2, #8
 8006910:	305c      	adds	r0, #92	@ 0x5c
 8006912:	f000 f914 	bl	8006b3e <memset>
 8006916:	4b0d      	ldr	r3, [pc, #52]	@ (800694c <std+0x58>)
 8006918:	6224      	str	r4, [r4, #32]
 800691a:	6263      	str	r3, [r4, #36]	@ 0x24
 800691c:	4b0c      	ldr	r3, [pc, #48]	@ (8006950 <std+0x5c>)
 800691e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006920:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <std+0x60>)
 8006922:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006924:	4b0c      	ldr	r3, [pc, #48]	@ (8006958 <std+0x64>)
 8006926:	6323      	str	r3, [r4, #48]	@ 0x30
 8006928:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <std+0x68>)
 800692a:	429c      	cmp	r4, r3
 800692c:	d006      	beq.n	800693c <std+0x48>
 800692e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006932:	4294      	cmp	r4, r2
 8006934:	d002      	beq.n	800693c <std+0x48>
 8006936:	33d0      	adds	r3, #208	@ 0xd0
 8006938:	429c      	cmp	r4, r3
 800693a:	d105      	bne.n	8006948 <std+0x54>
 800693c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006944:	f000 b98a 	b.w	8006c5c <__retarget_lock_init_recursive>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	08006ab9 	.word	0x08006ab9
 8006950:	08006adb 	.word	0x08006adb
 8006954:	08006b13 	.word	0x08006b13
 8006958:	08006b37 	.word	0x08006b37
 800695c:	20000598 	.word	0x20000598

08006960 <stdio_exit_handler>:
 8006960:	4a02      	ldr	r2, [pc, #8]	@ (800696c <stdio_exit_handler+0xc>)
 8006962:	4903      	ldr	r1, [pc, #12]	@ (8006970 <stdio_exit_handler+0x10>)
 8006964:	4803      	ldr	r0, [pc, #12]	@ (8006974 <stdio_exit_handler+0x14>)
 8006966:	f000 b869 	b.w	8006a3c <_fwalk_sglue>
 800696a:	bf00      	nop
 800696c:	2000000c 	.word	0x2000000c
 8006970:	08008ff1 	.word	0x08008ff1
 8006974:	20000188 	.word	0x20000188

08006978 <cleanup_stdio>:
 8006978:	6841      	ldr	r1, [r0, #4]
 800697a:	4b0c      	ldr	r3, [pc, #48]	@ (80069ac <cleanup_stdio+0x34>)
 800697c:	b510      	push	{r4, lr}
 800697e:	4299      	cmp	r1, r3
 8006980:	4604      	mov	r4, r0
 8006982:	d001      	beq.n	8006988 <cleanup_stdio+0x10>
 8006984:	f002 fb34 	bl	8008ff0 <_fflush_r>
 8006988:	68a1      	ldr	r1, [r4, #8]
 800698a:	4b09      	ldr	r3, [pc, #36]	@ (80069b0 <cleanup_stdio+0x38>)
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <cleanup_stdio+0x1e>
 8006990:	4620      	mov	r0, r4
 8006992:	f002 fb2d 	bl	8008ff0 <_fflush_r>
 8006996:	68e1      	ldr	r1, [r4, #12]
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <cleanup_stdio+0x3c>)
 800699a:	4299      	cmp	r1, r3
 800699c:	d004      	beq.n	80069a8 <cleanup_stdio+0x30>
 800699e:	4620      	mov	r0, r4
 80069a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069a4:	f002 bb24 	b.w	8008ff0 <_fflush_r>
 80069a8:	bd10      	pop	{r4, pc}
 80069aa:	bf00      	nop
 80069ac:	20000598 	.word	0x20000598
 80069b0:	20000600 	.word	0x20000600
 80069b4:	20000668 	.word	0x20000668

080069b8 <global_stdio_init.part.0>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <global_stdio_init.part.0+0x30>)
 80069bc:	4c0b      	ldr	r4, [pc, #44]	@ (80069ec <global_stdio_init.part.0+0x34>)
 80069be:	4a0c      	ldr	r2, [pc, #48]	@ (80069f0 <global_stdio_init.part.0+0x38>)
 80069c0:	4620      	mov	r0, r4
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	2104      	movs	r1, #4
 80069c6:	2200      	movs	r2, #0
 80069c8:	f7ff ff94 	bl	80068f4 <std>
 80069cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069d0:	2201      	movs	r2, #1
 80069d2:	2109      	movs	r1, #9
 80069d4:	f7ff ff8e 	bl	80068f4 <std>
 80069d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069dc:	2202      	movs	r2, #2
 80069de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e2:	2112      	movs	r1, #18
 80069e4:	f7ff bf86 	b.w	80068f4 <std>
 80069e8:	200006d0 	.word	0x200006d0
 80069ec:	20000598 	.word	0x20000598
 80069f0:	08006961 	.word	0x08006961

080069f4 <__sfp_lock_acquire>:
 80069f4:	4801      	ldr	r0, [pc, #4]	@ (80069fc <__sfp_lock_acquire+0x8>)
 80069f6:	f000 b932 	b.w	8006c5e <__retarget_lock_acquire_recursive>
 80069fa:	bf00      	nop
 80069fc:	200006d9 	.word	0x200006d9

08006a00 <__sfp_lock_release>:
 8006a00:	4801      	ldr	r0, [pc, #4]	@ (8006a08 <__sfp_lock_release+0x8>)
 8006a02:	f000 b92d 	b.w	8006c60 <__retarget_lock_release_recursive>
 8006a06:	bf00      	nop
 8006a08:	200006d9 	.word	0x200006d9

08006a0c <__sinit>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	4604      	mov	r4, r0
 8006a10:	f7ff fff0 	bl	80069f4 <__sfp_lock_acquire>
 8006a14:	6a23      	ldr	r3, [r4, #32]
 8006a16:	b11b      	cbz	r3, 8006a20 <__sinit+0x14>
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	f7ff bff0 	b.w	8006a00 <__sfp_lock_release>
 8006a20:	4b04      	ldr	r3, [pc, #16]	@ (8006a34 <__sinit+0x28>)
 8006a22:	6223      	str	r3, [r4, #32]
 8006a24:	4b04      	ldr	r3, [pc, #16]	@ (8006a38 <__sinit+0x2c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f5      	bne.n	8006a18 <__sinit+0xc>
 8006a2c:	f7ff ffc4 	bl	80069b8 <global_stdio_init.part.0>
 8006a30:	e7f2      	b.n	8006a18 <__sinit+0xc>
 8006a32:	bf00      	nop
 8006a34:	08006979 	.word	0x08006979
 8006a38:	200006d0 	.word	0x200006d0

08006a3c <_fwalk_sglue>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	4607      	mov	r7, r0
 8006a42:	4688      	mov	r8, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	2600      	movs	r6, #0
 8006a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a50:	d505      	bpl.n	8006a5e <_fwalk_sglue+0x22>
 8006a52:	6824      	ldr	r4, [r4, #0]
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d1f7      	bne.n	8006a48 <_fwalk_sglue+0xc>
 8006a58:	4630      	mov	r0, r6
 8006a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a5e:	89ab      	ldrh	r3, [r5, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d907      	bls.n	8006a74 <_fwalk_sglue+0x38>
 8006a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	d003      	beq.n	8006a74 <_fwalk_sglue+0x38>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4638      	mov	r0, r7
 8006a70:	47c0      	blx	r8
 8006a72:	4306      	orrs	r6, r0
 8006a74:	3568      	adds	r5, #104	@ 0x68
 8006a76:	e7e9      	b.n	8006a4c <_fwalk_sglue+0x10>

08006a78 <siprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a7e:	b500      	push	{lr}
 8006a80:	b09c      	sub	sp, #112	@ 0x70
 8006a82:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a84:	9002      	str	r0, [sp, #8]
 8006a86:	9006      	str	r0, [sp, #24]
 8006a88:	9107      	str	r1, [sp, #28]
 8006a8a:	9104      	str	r1, [sp, #16]
 8006a8c:	4808      	ldr	r0, [pc, #32]	@ (8006ab0 <siprintf+0x38>)
 8006a8e:	4909      	ldr	r1, [pc, #36]	@ (8006ab4 <siprintf+0x3c>)
 8006a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a94:	9105      	str	r1, [sp, #20]
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	a902      	add	r1, sp, #8
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	f002 f92c 	bl	8008cf8 <_svfiprintf_r>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	b01c      	add	sp, #112	@ 0x70
 8006aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aac:	b003      	add	sp, #12
 8006aae:	4770      	bx	lr
 8006ab0:	20000184 	.word	0x20000184
 8006ab4:	ffff0208 	.word	0xffff0208

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 f87e 	bl	8006bc0 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	05db      	lsls	r3, r3, #23
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	2302      	movs	r3, #2
 8006aee:	2200      	movs	r2, #0
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	f000 f852 	bl	8006b9c <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	4632      	mov	r2, r6
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	4628      	mov	r0, r5
 8006b04:	463b      	mov	r3, r7
 8006b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b869 	b.w	8006be4 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f83f 	bl	8006b9c <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b81f 	b.w	8006b7c <_close_r>

08006b3e <memset>:
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4402      	add	r2, r0
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d100      	bne.n	8006b48 <memset+0xa>
 8006b46:	4770      	bx	lr
 8006b48:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4c:	e7f9      	b.n	8006b42 <memset+0x4>

08006b4e <strncmp>:
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	b16a      	cbz	r2, 8006b6e <strncmp+0x20>
 8006b52:	3901      	subs	r1, #1
 8006b54:	1884      	adds	r4, r0, r2
 8006b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d103      	bne.n	8006b6a <strncmp+0x1c>
 8006b62:	42a0      	cmp	r0, r4
 8006b64:	d001      	beq.n	8006b6a <strncmp+0x1c>
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d1f5      	bne.n	8006b56 <strncmp+0x8>
 8006b6a:	1ad0      	subs	r0, r2, r3
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	4610      	mov	r0, r2
 8006b70:	e7fc      	b.n	8006b6c <strncmp+0x1e>
	...

08006b74 <_localeconv_r>:
 8006b74:	4800      	ldr	r0, [pc, #0]	@ (8006b78 <_localeconv_r+0x4>)
 8006b76:	4770      	bx	lr
 8006b78:	20000108 	.word	0x20000108

08006b7c <_close_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4d05      	ldr	r5, [pc, #20]	@ (8006b98 <_close_r+0x1c>)
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fb fbc9 	bl	800231e <_close>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_close_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_close_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200006d4 	.word	0x200006d4

08006b9c <_lseek_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4d05      	ldr	r5, [pc, #20]	@ (8006bbc <_lseek_r+0x20>)
 8006ba8:	602a      	str	r2, [r5, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f7fb fbdb 	bl	8002366 <_lseek>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_lseek_r+0x1e>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_lseek_r+0x1e>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	200006d4 	.word	0x200006d4

08006bc0 <_read_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4d05      	ldr	r5, [pc, #20]	@ (8006be0 <_read_r+0x20>)
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7fb fb6c 	bl	80022ac <_read>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_read_r+0x1e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_read_r+0x1e>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200006d4 	.word	0x200006d4

08006be4 <_write_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	4611      	mov	r1, r2
 8006bec:	2200      	movs	r2, #0
 8006bee:	4d05      	ldr	r5, [pc, #20]	@ (8006c04 <_write_r+0x20>)
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f7fb fb77 	bl	80022e6 <_write>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_write_r+0x1e>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_write_r+0x1e>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200006d4 	.word	0x200006d4

08006c08 <__errno>:
 8006c08:	4b01      	ldr	r3, [pc, #4]	@ (8006c10 <__errno+0x8>)
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	20000184 	.word	0x20000184

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	2600      	movs	r6, #0
 8006c18:	4d0c      	ldr	r5, [pc, #48]	@ (8006c4c <__libc_init_array+0x38>)
 8006c1a:	4c0d      	ldr	r4, [pc, #52]	@ (8006c50 <__libc_init_array+0x3c>)
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	f003 fd70 	bl	800a708 <_init>
 8006c28:	2600      	movs	r6, #0
 8006c2a:	4d0a      	ldr	r5, [pc, #40]	@ (8006c54 <__libc_init_array+0x40>)
 8006c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8006c58 <__libc_init_array+0x44>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	0800ad60 	.word	0x0800ad60
 8006c50:	0800ad60 	.word	0x0800ad60
 8006c54:	0800ad60 	.word	0x0800ad60
 8006c58:	0800ad64 	.word	0x0800ad64

08006c5c <__retarget_lock_init_recursive>:
 8006c5c:	4770      	bx	lr

08006c5e <__retarget_lock_acquire_recursive>:
 8006c5e:	4770      	bx	lr

08006c60 <__retarget_lock_release_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <memchr>:
 8006c62:	4603      	mov	r3, r0
 8006c64:	b510      	push	{r4, lr}
 8006c66:	b2c9      	uxtb	r1, r1
 8006c68:	4402      	add	r2, r0
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	d101      	bne.n	8006c74 <memchr+0x12>
 8006c70:	2000      	movs	r0, #0
 8006c72:	e003      	b.n	8006c7c <memchr+0x1a>
 8006c74:	7804      	ldrb	r4, [r0, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	428c      	cmp	r4, r1
 8006c7a:	d1f6      	bne.n	8006c6a <memchr+0x8>
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <memcpy>:
 8006c7e:	440a      	add	r2, r1
 8006c80:	4291      	cmp	r1, r2
 8006c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c86:	d100      	bne.n	8006c8a <memcpy+0xc>
 8006c88:	4770      	bx	lr
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c90:	4291      	cmp	r1, r2
 8006c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c96:	d1f9      	bne.n	8006c8c <memcpy+0xe>
 8006c98:	bd10      	pop	{r4, pc}
	...

08006c9c <nan>:
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4901      	ldr	r1, [pc, #4]	@ (8006ca4 <nan+0x8>)
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	7ff80000 	.word	0x7ff80000

08006ca8 <nanf>:
 8006ca8:	4800      	ldr	r0, [pc, #0]	@ (8006cac <nanf+0x4>)
 8006caa:	4770      	bx	lr
 8006cac:	7fc00000 	.word	0x7fc00000

08006cb0 <quorem>:
 8006cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	6903      	ldr	r3, [r0, #16]
 8006cb6:	690c      	ldr	r4, [r1, #16]
 8006cb8:	4607      	mov	r7, r0
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	db7e      	blt.n	8006dbc <quorem+0x10c>
 8006cbe:	3c01      	subs	r4, #1
 8006cc0:	00a3      	lsls	r3, r4, #2
 8006cc2:	f100 0514 	add.w	r5, r0, #20
 8006cc6:	f101 0814 	add.w	r8, r1, #20
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ce2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ce6:	d32e      	bcc.n	8006d46 <quorem+0x96>
 8006ce8:	f04f 0a00 	mov.w	sl, #0
 8006cec:	46c4      	mov	ip, r8
 8006cee:	46ae      	mov	lr, r5
 8006cf0:	46d3      	mov	fp, sl
 8006cf2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cf6:	b298      	uxth	r0, r3
 8006cf8:	fb06 a000 	mla	r0, r6, r0, sl
 8006cfc:	0c1b      	lsrs	r3, r3, #16
 8006cfe:	0c02      	lsrs	r2, r0, #16
 8006d00:	fb06 2303 	mla	r3, r6, r3, r2
 8006d04:	f8de 2000 	ldr.w	r2, [lr]
 8006d08:	b280      	uxth	r0, r0
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	1a12      	subs	r2, r2, r0
 8006d0e:	445a      	add	r2, fp
 8006d10:	f8de 0000 	ldr.w	r0, [lr]
 8006d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d1e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d22:	b292      	uxth	r2, r2
 8006d24:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d28:	45e1      	cmp	r9, ip
 8006d2a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d2e:	f84e 2b04 	str.w	r2, [lr], #4
 8006d32:	d2de      	bcs.n	8006cf2 <quorem+0x42>
 8006d34:	9b00      	ldr	r3, [sp, #0]
 8006d36:	58eb      	ldr	r3, [r5, r3]
 8006d38:	b92b      	cbnz	r3, 8006d46 <quorem+0x96>
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	3b04      	subs	r3, #4
 8006d3e:	429d      	cmp	r5, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	d32f      	bcc.n	8006da4 <quorem+0xf4>
 8006d44:	613c      	str	r4, [r7, #16]
 8006d46:	4638      	mov	r0, r7
 8006d48:	f001 fd0e 	bl	8008768 <__mcmp>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	db25      	blt.n	8006d9c <quorem+0xec>
 8006d50:	4629      	mov	r1, r5
 8006d52:	2000      	movs	r0, #0
 8006d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d58:	f8d1 c000 	ldr.w	ip, [r1]
 8006d5c:	fa1f fe82 	uxth.w	lr, r2
 8006d60:	fa1f f38c 	uxth.w	r3, ip
 8006d64:	eba3 030e 	sub.w	r3, r3, lr
 8006d68:	4403      	add	r3, r0
 8006d6a:	0c12      	lsrs	r2, r2, #16
 8006d6c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d70:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d7a:	45c1      	cmp	r9, r8
 8006d7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d80:	f841 3b04 	str.w	r3, [r1], #4
 8006d84:	d2e6      	bcs.n	8006d54 <quorem+0xa4>
 8006d86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d8e:	b922      	cbnz	r2, 8006d9a <quorem+0xea>
 8006d90:	3b04      	subs	r3, #4
 8006d92:	429d      	cmp	r5, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	d30b      	bcc.n	8006db0 <quorem+0x100>
 8006d98:	613c      	str	r4, [r7, #16]
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	b003      	add	sp, #12
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	3b04      	subs	r3, #4
 8006da8:	2a00      	cmp	r2, #0
 8006daa:	d1cb      	bne.n	8006d44 <quorem+0x94>
 8006dac:	3c01      	subs	r4, #1
 8006dae:	e7c6      	b.n	8006d3e <quorem+0x8e>
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	3b04      	subs	r3, #4
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	d1ef      	bne.n	8006d98 <quorem+0xe8>
 8006db8:	3c01      	subs	r4, #1
 8006dba:	e7ea      	b.n	8006d92 <quorem+0xe2>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e7ee      	b.n	8006d9e <quorem+0xee>

08006dc0 <_dtoa_r>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	69c7      	ldr	r7, [r0, #28]
 8006dca:	b097      	sub	sp, #92	@ 0x5c
 8006dcc:	4683      	mov	fp, r0
 8006dce:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006dd2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006dd4:	b97f      	cbnz	r7, 8006df6 <_dtoa_r+0x36>
 8006dd6:	2010      	movs	r0, #16
 8006dd8:	f001 f93c 	bl	8008054 <malloc>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f8cb 001c 	str.w	r0, [fp, #28]
 8006de2:	b920      	cbnz	r0, 8006dee <_dtoa_r+0x2e>
 8006de4:	21ef      	movs	r1, #239	@ 0xef
 8006de6:	4ba8      	ldr	r3, [pc, #672]	@ (8007088 <_dtoa_r+0x2c8>)
 8006de8:	48a8      	ldr	r0, [pc, #672]	@ (800708c <_dtoa_r+0x2cc>)
 8006dea:	f002 f953 	bl	8009094 <__assert_func>
 8006dee:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006df2:	6007      	str	r7, [r0, #0]
 8006df4:	60c7      	str	r7, [r0, #12]
 8006df6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dfa:	6819      	ldr	r1, [r3, #0]
 8006dfc:	b159      	cbz	r1, 8006e16 <_dtoa_r+0x56>
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	2301      	movs	r3, #1
 8006e02:	4093      	lsls	r3, r2
 8006e04:	604a      	str	r2, [r1, #4]
 8006e06:	608b      	str	r3, [r1, #8]
 8006e08:	4658      	mov	r0, fp
 8006e0a:	f001 fa2b 	bl	8008264 <_Bfree>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	1e2b      	subs	r3, r5, #0
 8006e18:	bfaf      	iteee	ge
 8006e1a:	2300      	movge	r3, #0
 8006e1c:	2201      	movlt	r2, #1
 8006e1e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e22:	9303      	strlt	r3, [sp, #12]
 8006e24:	bfa8      	it	ge
 8006e26:	6033      	strge	r3, [r6, #0]
 8006e28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006e2c:	4b98      	ldr	r3, [pc, #608]	@ (8007090 <_dtoa_r+0x2d0>)
 8006e2e:	bfb8      	it	lt
 8006e30:	6032      	strlt	r2, [r6, #0]
 8006e32:	ea33 0308 	bics.w	r3, r3, r8
 8006e36:	d112      	bne.n	8006e5e <_dtoa_r+0x9e>
 8006e38:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e3c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006e44:	4323      	orrs	r3, r4
 8006e46:	f000 8550 	beq.w	80078ea <_dtoa_r+0xb2a>
 8006e4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e4c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007094 <_dtoa_r+0x2d4>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8552 	beq.w	80078fa <_dtoa_r+0xb3a>
 8006e56:	f10a 0303 	add.w	r3, sl, #3
 8006e5a:	f000 bd4c 	b.w	80078f6 <_dtoa_r+0xb36>
 8006e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e62:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f7f9 fd9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006e72:	4607      	mov	r7, r0
 8006e74:	b158      	cbz	r0, 8006e8e <_dtoa_r+0xce>
 8006e76:	2301      	movs	r3, #1
 8006e78:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e7e:	b113      	cbz	r3, 8006e86 <_dtoa_r+0xc6>
 8006e80:	4b85      	ldr	r3, [pc, #532]	@ (8007098 <_dtoa_r+0x2d8>)
 8006e82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800709c <_dtoa_r+0x2dc>
 8006e8a:	f000 bd36 	b.w	80078fa <_dtoa_r+0xb3a>
 8006e8e:	ab14      	add	r3, sp, #80	@ 0x50
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	ab15      	add	r3, sp, #84	@ 0x54
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4658      	mov	r0, fp
 8006e98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e9c:	f001 fd7c 	bl	8008998 <__d2b>
 8006ea0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006ea4:	4681      	mov	r9, r0
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	d077      	beq.n	8006f9a <_dtoa_r+0x1da>
 8006eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eb0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ebc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ec0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4b76      	ldr	r3, [pc, #472]	@ (80070a0 <_dtoa_r+0x2e0>)
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	a368      	add	r3, pc, #416	@ (adr r3, 8007070 <_dtoa_r+0x2b0>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 fb01 	bl	80004d8 <__aeabi_dmul>
 8006ed6:	a368      	add	r3, pc, #416	@ (adr r3, 8007078 <_dtoa_r+0x2b8>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	f7f9 fa8d 	bl	8000404 <__aeabi_i2d>
 8006eea:	a365      	add	r3, pc, #404	@ (adr r3, 8007080 <_dtoa_r+0x2c0>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 faf2 	bl	80004d8 <__aeabi_dmul>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4620      	mov	r0, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	f7f9 f936 	bl	800016c <__adddf3>
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	f7f9 fd98 	bl	8000a38 <__aeabi_d2iz>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fd53 	bl	80009bc <__aeabi_dcmplt>
 8006f16:	b140      	cbz	r0, 8006f2a <_dtoa_r+0x16a>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7f9 fa73 	bl	8000404 <__aeabi_i2d>
 8006f1e:	4622      	mov	r2, r4
 8006f20:	462b      	mov	r3, r5
 8006f22:	f7f9 fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8006f26:	b900      	cbnz	r0, 8006f2a <_dtoa_r+0x16a>
 8006f28:	3f01      	subs	r7, #1
 8006f2a:	2f16      	cmp	r7, #22
 8006f2c:	d853      	bhi.n	8006fd6 <_dtoa_r+0x216>
 8006f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f32:	4b5c      	ldr	r3, [pc, #368]	@ (80070a4 <_dtoa_r+0x2e4>)
 8006f34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 fd3e 	bl	80009bc <__aeabi_dcmplt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	d04a      	beq.n	8006fda <_dtoa_r+0x21a>
 8006f44:	2300      	movs	r3, #0
 8006f46:	3f01      	subs	r7, #1
 8006f48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f4c:	1b9b      	subs	r3, r3, r6
 8006f4e:	1e5a      	subs	r2, r3, #1
 8006f50:	bf46      	itte	mi
 8006f52:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f56:	2300      	movmi	r3, #0
 8006f58:	f04f 0800 	movpl.w	r8, #0
 8006f5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f5e:	bf48      	it	mi
 8006f60:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006f62:	2f00      	cmp	r7, #0
 8006f64:	db3b      	blt.n	8006fde <_dtoa_r+0x21e>
 8006f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f68:	970e      	str	r7, [sp, #56]	@ 0x38
 8006f6a:	443b      	add	r3, r7
 8006f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f6e:	2300      	movs	r3, #0
 8006f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d866      	bhi.n	8007046 <_dtoa_r+0x286>
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	bfc4      	itt	gt
 8006f7c:	3b04      	subgt	r3, #4
 8006f7e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006f80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f82:	bfc8      	it	gt
 8006f84:	2400      	movgt	r4, #0
 8006f86:	f1a3 0302 	sub.w	r3, r3, #2
 8006f8a:	bfd8      	it	le
 8006f8c:	2401      	movle	r4, #1
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d864      	bhi.n	800705c <_dtoa_r+0x29c>
 8006f92:	e8df f003 	tbb	[pc, r3]
 8006f96:	382b      	.short	0x382b
 8006f98:	5636      	.short	0x5636
 8006f9a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f9e:	441e      	add	r6, r3
 8006fa0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	bfc1      	itttt	gt
 8006fa8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fac:	fa08 f803 	lslgt.w	r8, r8, r3
 8006fb0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fb4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fb8:	bfd6      	itet	le
 8006fba:	f1c3 0320 	rsble	r3, r3, #32
 8006fbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006fc2:	fa04 f003 	lslle.w	r0, r4, r3
 8006fc6:	f7f9 fa0d 	bl	80003e4 <__aeabi_ui2d>
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fd0:	3e01      	subs	r6, #1
 8006fd2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006fd4:	e775      	b.n	8006ec2 <_dtoa_r+0x102>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e7b6      	b.n	8006f48 <_dtoa_r+0x188>
 8006fda:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006fdc:	e7b5      	b.n	8006f4a <_dtoa_r+0x18a>
 8006fde:	427b      	negs	r3, r7
 8006fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	eba8 0807 	sub.w	r8, r8, r7
 8006fe8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fea:	e7c2      	b.n	8006f72 <_dtoa_r+0x1b2>
 8006fec:	2300      	movs	r3, #0
 8006fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ff0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dc35      	bgt.n	8007062 <_dtoa_r+0x2a2>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006ffe:	9221      	str	r2, [sp, #132]	@ 0x84
 8007000:	e00b      	b.n	800701a <_dtoa_r+0x25a>
 8007002:	2301      	movs	r3, #1
 8007004:	e7f3      	b.n	8006fee <_dtoa_r+0x22e>
 8007006:	2300      	movs	r3, #0
 8007008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800700a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	9308      	str	r3, [sp, #32]
 8007010:	3301      	adds	r3, #1
 8007012:	2b01      	cmp	r3, #1
 8007014:	9307      	str	r3, [sp, #28]
 8007016:	bfb8      	it	lt
 8007018:	2301      	movlt	r3, #1
 800701a:	2100      	movs	r1, #0
 800701c:	2204      	movs	r2, #4
 800701e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007022:	f102 0514 	add.w	r5, r2, #20
 8007026:	429d      	cmp	r5, r3
 8007028:	d91f      	bls.n	800706a <_dtoa_r+0x2aa>
 800702a:	6041      	str	r1, [r0, #4]
 800702c:	4658      	mov	r0, fp
 800702e:	f001 f8d9 	bl	80081e4 <_Balloc>
 8007032:	4682      	mov	sl, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	d139      	bne.n	80070ac <_dtoa_r+0x2ec>
 8007038:	4602      	mov	r2, r0
 800703a:	f240 11af 	movw	r1, #431	@ 0x1af
 800703e:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <_dtoa_r+0x2e8>)
 8007040:	e6d2      	b.n	8006de8 <_dtoa_r+0x28>
 8007042:	2301      	movs	r3, #1
 8007044:	e7e0      	b.n	8007008 <_dtoa_r+0x248>
 8007046:	2401      	movs	r4, #1
 8007048:	2300      	movs	r3, #0
 800704a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800704c:	9320      	str	r3, [sp, #128]	@ 0x80
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	2200      	movs	r2, #0
 8007054:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007058:	2312      	movs	r3, #18
 800705a:	e7d0      	b.n	8006ffe <_dtoa_r+0x23e>
 800705c:	2301      	movs	r3, #1
 800705e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007060:	e7f5      	b.n	800704e <_dtoa_r+0x28e>
 8007062:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007064:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007068:	e7d7      	b.n	800701a <_dtoa_r+0x25a>
 800706a:	3101      	adds	r1, #1
 800706c:	0052      	lsls	r2, r2, #1
 800706e:	e7d8      	b.n	8007022 <_dtoa_r+0x262>
 8007070:	636f4361 	.word	0x636f4361
 8007074:	3fd287a7 	.word	0x3fd287a7
 8007078:	8b60c8b3 	.word	0x8b60c8b3
 800707c:	3fc68a28 	.word	0x3fc68a28
 8007080:	509f79fb 	.word	0x509f79fb
 8007084:	3fd34413 	.word	0x3fd34413
 8007088:	0800a7f6 	.word	0x0800a7f6
 800708c:	0800a80d 	.word	0x0800a80d
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	0800a7f2 	.word	0x0800a7f2
 8007098:	0800a7b9 	.word	0x0800a7b9
 800709c:	0800a7b8 	.word	0x0800a7b8
 80070a0:	3ff80000 	.word	0x3ff80000
 80070a4:	0800a968 	.word	0x0800a968
 80070a8:	0800a865 	.word	0x0800a865
 80070ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070b0:	6018      	str	r0, [r3, #0]
 80070b2:	9b07      	ldr	r3, [sp, #28]
 80070b4:	2b0e      	cmp	r3, #14
 80070b6:	f200 80a4 	bhi.w	8007202 <_dtoa_r+0x442>
 80070ba:	2c00      	cmp	r4, #0
 80070bc:	f000 80a1 	beq.w	8007202 <_dtoa_r+0x442>
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	dd33      	ble.n	800712c <_dtoa_r+0x36c>
 80070c4:	4b86      	ldr	r3, [pc, #536]	@ (80072e0 <_dtoa_r+0x520>)
 80070c6:	f007 020f 	and.w	r2, r7, #15
 80070ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ce:	05f8      	lsls	r0, r7, #23
 80070d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070dc:	d516      	bpl.n	800710c <_dtoa_r+0x34c>
 80070de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070e2:	4b80      	ldr	r3, [pc, #512]	@ (80072e4 <_dtoa_r+0x524>)
 80070e4:	2603      	movs	r6, #3
 80070e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070ea:	f7f9 fb1f 	bl	800072c <__aeabi_ddiv>
 80070ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f2:	f004 040f 	and.w	r4, r4, #15
 80070f6:	4d7b      	ldr	r5, [pc, #492]	@ (80072e4 <_dtoa_r+0x524>)
 80070f8:	b954      	cbnz	r4, 8007110 <_dtoa_r+0x350>
 80070fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007102:	f7f9 fb13 	bl	800072c <__aeabi_ddiv>
 8007106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800710a:	e028      	b.n	800715e <_dtoa_r+0x39e>
 800710c:	2602      	movs	r6, #2
 800710e:	e7f2      	b.n	80070f6 <_dtoa_r+0x336>
 8007110:	07e1      	lsls	r1, r4, #31
 8007112:	d508      	bpl.n	8007126 <_dtoa_r+0x366>
 8007114:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800711c:	f7f9 f9dc 	bl	80004d8 <__aeabi_dmul>
 8007120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007124:	3601      	adds	r6, #1
 8007126:	1064      	asrs	r4, r4, #1
 8007128:	3508      	adds	r5, #8
 800712a:	e7e5      	b.n	80070f8 <_dtoa_r+0x338>
 800712c:	f000 80d2 	beq.w	80072d4 <_dtoa_r+0x514>
 8007130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007134:	427c      	negs	r4, r7
 8007136:	4b6a      	ldr	r3, [pc, #424]	@ (80072e0 <_dtoa_r+0x520>)
 8007138:	f004 020f 	and.w	r2, r4, #15
 800713c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	f7f9 f9c8 	bl	80004d8 <__aeabi_dmul>
 8007148:	2602      	movs	r6, #2
 800714a:	2300      	movs	r3, #0
 800714c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007150:	4d64      	ldr	r5, [pc, #400]	@ (80072e4 <_dtoa_r+0x524>)
 8007152:	1124      	asrs	r4, r4, #4
 8007154:	2c00      	cmp	r4, #0
 8007156:	f040 80b2 	bne.w	80072be <_dtoa_r+0x4fe>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1d3      	bne.n	8007106 <_dtoa_r+0x346>
 800715e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007162:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80b7 	beq.w	80072d8 <_dtoa_r+0x518>
 800716a:	2200      	movs	r2, #0
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	4b5d      	ldr	r3, [pc, #372]	@ (80072e8 <_dtoa_r+0x528>)
 8007172:	f7f9 fc23 	bl	80009bc <__aeabi_dcmplt>
 8007176:	2800      	cmp	r0, #0
 8007178:	f000 80ae 	beq.w	80072d8 <_dtoa_r+0x518>
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 80aa 	beq.w	80072d8 <_dtoa_r+0x518>
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd37      	ble.n	80071fa <_dtoa_r+0x43a>
 800718a:	1e7b      	subs	r3, r7, #1
 800718c:	4620      	mov	r0, r4
 800718e:	9304      	str	r3, [sp, #16]
 8007190:	2200      	movs	r2, #0
 8007192:	4629      	mov	r1, r5
 8007194:	4b55      	ldr	r3, [pc, #340]	@ (80072ec <_dtoa_r+0x52c>)
 8007196:	f7f9 f99f 	bl	80004d8 <__aeabi_dmul>
 800719a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800719e:	9c08      	ldr	r4, [sp, #32]
 80071a0:	3601      	adds	r6, #1
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7f9 f92e 	bl	8000404 <__aeabi_i2d>
 80071a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ac:	f7f9 f994 	bl	80004d8 <__aeabi_dmul>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4b4f      	ldr	r3, [pc, #316]	@ (80072f0 <_dtoa_r+0x530>)
 80071b4:	f7f8 ffda 	bl	800016c <__adddf3>
 80071b8:	4605      	mov	r5, r0
 80071ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071be:	2c00      	cmp	r4, #0
 80071c0:	f040 809a 	bne.w	80072f8 <_dtoa_r+0x538>
 80071c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	4b4a      	ldr	r3, [pc, #296]	@ (80072f4 <_dtoa_r+0x534>)
 80071cc:	f7f8 ffcc 	bl	8000168 <__aeabi_dsub>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071d8:	462a      	mov	r2, r5
 80071da:	4633      	mov	r3, r6
 80071dc:	f7f9 fc0c 	bl	80009f8 <__aeabi_dcmpgt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f040 828e 	bne.w	8007702 <_dtoa_r+0x942>
 80071e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ea:	462a      	mov	r2, r5
 80071ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071f0:	f7f9 fbe4 	bl	80009bc <__aeabi_dcmplt>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f040 8127 	bne.w	8007448 <_dtoa_r+0x688>
 80071fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007202:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007204:	2b00      	cmp	r3, #0
 8007206:	f2c0 8163 	blt.w	80074d0 <_dtoa_r+0x710>
 800720a:	2f0e      	cmp	r7, #14
 800720c:	f300 8160 	bgt.w	80074d0 <_dtoa_r+0x710>
 8007210:	4b33      	ldr	r3, [pc, #204]	@ (80072e0 <_dtoa_r+0x520>)
 8007212:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007216:	e9d3 3400 	ldrd	r3, r4, [r3]
 800721a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800721e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007220:	2b00      	cmp	r3, #0
 8007222:	da03      	bge.n	800722c <_dtoa_r+0x46c>
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f340 8100 	ble.w	800742c <_dtoa_r+0x66c>
 800722c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007230:	4656      	mov	r6, sl
 8007232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fa77 	bl	800072c <__aeabi_ddiv>
 800723e:	f7f9 fbfb 	bl	8000a38 <__aeabi_d2iz>
 8007242:	4680      	mov	r8, r0
 8007244:	f7f9 f8de 	bl	8000404 <__aeabi_i2d>
 8007248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724c:	f7f9 f944 	bl	80004d8 <__aeabi_dmul>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4620      	mov	r0, r4
 8007256:	4629      	mov	r1, r5
 8007258:	f7f8 ff86 	bl	8000168 <__aeabi_dsub>
 800725c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007260:	9d07      	ldr	r5, [sp, #28]
 8007262:	f806 4b01 	strb.w	r4, [r6], #1
 8007266:	eba6 040a 	sub.w	r4, r6, sl
 800726a:	42a5      	cmp	r5, r4
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	f040 8116 	bne.w	80074a0 <_dtoa_r+0x6e0>
 8007274:	f7f8 ff7a 	bl	800016c <__adddf3>
 8007278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727c:	4604      	mov	r4, r0
 800727e:	460d      	mov	r5, r1
 8007280:	f7f9 fbba 	bl	80009f8 <__aeabi_dcmpgt>
 8007284:	2800      	cmp	r0, #0
 8007286:	f040 80f8 	bne.w	800747a <_dtoa_r+0x6ba>
 800728a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800728e:	4620      	mov	r0, r4
 8007290:	4629      	mov	r1, r5
 8007292:	f7f9 fb89 	bl	80009a8 <__aeabi_dcmpeq>
 8007296:	b118      	cbz	r0, 80072a0 <_dtoa_r+0x4e0>
 8007298:	f018 0f01 	tst.w	r8, #1
 800729c:	f040 80ed 	bne.w	800747a <_dtoa_r+0x6ba>
 80072a0:	4649      	mov	r1, r9
 80072a2:	4658      	mov	r0, fp
 80072a4:	f000 ffde 	bl	8008264 <_Bfree>
 80072a8:	2300      	movs	r3, #0
 80072aa:	7033      	strb	r3, [r6, #0]
 80072ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80072ae:	3701      	adds	r7, #1
 80072b0:	601f      	str	r7, [r3, #0]
 80072b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8320 	beq.w	80078fa <_dtoa_r+0xb3a>
 80072ba:	601e      	str	r6, [r3, #0]
 80072bc:	e31d      	b.n	80078fa <_dtoa_r+0xb3a>
 80072be:	07e2      	lsls	r2, r4, #31
 80072c0:	d505      	bpl.n	80072ce <_dtoa_r+0x50e>
 80072c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072c6:	f7f9 f907 	bl	80004d8 <__aeabi_dmul>
 80072ca:	2301      	movs	r3, #1
 80072cc:	3601      	adds	r6, #1
 80072ce:	1064      	asrs	r4, r4, #1
 80072d0:	3508      	adds	r5, #8
 80072d2:	e73f      	b.n	8007154 <_dtoa_r+0x394>
 80072d4:	2602      	movs	r6, #2
 80072d6:	e742      	b.n	800715e <_dtoa_r+0x39e>
 80072d8:	9c07      	ldr	r4, [sp, #28]
 80072da:	9704      	str	r7, [sp, #16]
 80072dc:	e761      	b.n	80071a2 <_dtoa_r+0x3e2>
 80072de:	bf00      	nop
 80072e0:	0800a968 	.word	0x0800a968
 80072e4:	0800a940 	.word	0x0800a940
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	40240000 	.word	0x40240000
 80072f0:	401c0000 	.word	0x401c0000
 80072f4:	40140000 	.word	0x40140000
 80072f8:	4b70      	ldr	r3, [pc, #448]	@ (80074bc <_dtoa_r+0x6fc>)
 80072fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007304:	4454      	add	r4, sl
 8007306:	2900      	cmp	r1, #0
 8007308:	d045      	beq.n	8007396 <_dtoa_r+0x5d6>
 800730a:	2000      	movs	r0, #0
 800730c:	496c      	ldr	r1, [pc, #432]	@ (80074c0 <_dtoa_r+0x700>)
 800730e:	f7f9 fa0d 	bl	800072c <__aeabi_ddiv>
 8007312:	4633      	mov	r3, r6
 8007314:	462a      	mov	r2, r5
 8007316:	f7f8 ff27 	bl	8000168 <__aeabi_dsub>
 800731a:	4656      	mov	r6, sl
 800731c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007324:	f7f9 fb88 	bl	8000a38 <__aeabi_d2iz>
 8007328:	4605      	mov	r5, r0
 800732a:	f7f9 f86b 	bl	8000404 <__aeabi_i2d>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007336:	f7f8 ff17 	bl	8000168 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	3530      	adds	r5, #48	@ 0x30
 8007340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007344:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007348:	f806 5b01 	strb.w	r5, [r6], #1
 800734c:	f7f9 fb36 	bl	80009bc <__aeabi_dcmplt>
 8007350:	2800      	cmp	r0, #0
 8007352:	d163      	bne.n	800741c <_dtoa_r+0x65c>
 8007354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007358:	2000      	movs	r0, #0
 800735a:	495a      	ldr	r1, [pc, #360]	@ (80074c4 <_dtoa_r+0x704>)
 800735c:	f7f8 ff04 	bl	8000168 <__aeabi_dsub>
 8007360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007364:	f7f9 fb2a 	bl	80009bc <__aeabi_dcmplt>
 8007368:	2800      	cmp	r0, #0
 800736a:	f040 8087 	bne.w	800747c <_dtoa_r+0x6bc>
 800736e:	42a6      	cmp	r6, r4
 8007370:	f43f af43 	beq.w	80071fa <_dtoa_r+0x43a>
 8007374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007378:	2200      	movs	r2, #0
 800737a:	4b53      	ldr	r3, [pc, #332]	@ (80074c8 <_dtoa_r+0x708>)
 800737c:	f7f9 f8ac 	bl	80004d8 <__aeabi_dmul>
 8007380:	2200      	movs	r2, #0
 8007382:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800738a:	4b4f      	ldr	r3, [pc, #316]	@ (80074c8 <_dtoa_r+0x708>)
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007394:	e7c4      	b.n	8007320 <_dtoa_r+0x560>
 8007396:	4631      	mov	r1, r6
 8007398:	4628      	mov	r0, r5
 800739a:	f7f9 f89d 	bl	80004d8 <__aeabi_dmul>
 800739e:	4656      	mov	r6, sl
 80073a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073a4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073aa:	f7f9 fb45 	bl	8000a38 <__aeabi_d2iz>
 80073ae:	4605      	mov	r5, r0
 80073b0:	f7f9 f828 	bl	8000404 <__aeabi_i2d>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073bc:	f7f8 fed4 	bl	8000168 <__aeabi_dsub>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	3530      	adds	r5, #48	@ 0x30
 80073c6:	f806 5b01 	strb.w	r5, [r6], #1
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	d124      	bne.n	8007420 <_dtoa_r+0x660>
 80073d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073da:	4b39      	ldr	r3, [pc, #228]	@ (80074c0 <_dtoa_r+0x700>)
 80073dc:	f7f8 fec6 	bl	800016c <__adddf3>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e8:	f7f9 fb06 	bl	80009f8 <__aeabi_dcmpgt>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d145      	bne.n	800747c <_dtoa_r+0x6bc>
 80073f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073f4:	2000      	movs	r0, #0
 80073f6:	4932      	ldr	r1, [pc, #200]	@ (80074c0 <_dtoa_r+0x700>)
 80073f8:	f7f8 feb6 	bl	8000168 <__aeabi_dsub>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007404:	f7f9 fada 	bl	80009bc <__aeabi_dcmplt>
 8007408:	2800      	cmp	r0, #0
 800740a:	f43f aef6 	beq.w	80071fa <_dtoa_r+0x43a>
 800740e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007410:	1e73      	subs	r3, r6, #1
 8007412:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007414:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007418:	2b30      	cmp	r3, #48	@ 0x30
 800741a:	d0f8      	beq.n	800740e <_dtoa_r+0x64e>
 800741c:	9f04      	ldr	r7, [sp, #16]
 800741e:	e73f      	b.n	80072a0 <_dtoa_r+0x4e0>
 8007420:	4b29      	ldr	r3, [pc, #164]	@ (80074c8 <_dtoa_r+0x708>)
 8007422:	f7f9 f859 	bl	80004d8 <__aeabi_dmul>
 8007426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742a:	e7bc      	b.n	80073a6 <_dtoa_r+0x5e6>
 800742c:	d10c      	bne.n	8007448 <_dtoa_r+0x688>
 800742e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007432:	2200      	movs	r2, #0
 8007434:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <_dtoa_r+0x70c>)
 8007436:	f7f9 f84f 	bl	80004d8 <__aeabi_dmul>
 800743a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800743e:	f7f9 fad1 	bl	80009e4 <__aeabi_dcmpge>
 8007442:	2800      	cmp	r0, #0
 8007444:	f000 815b 	beq.w	80076fe <_dtoa_r+0x93e>
 8007448:	2400      	movs	r4, #0
 800744a:	4625      	mov	r5, r4
 800744c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800744e:	4656      	mov	r6, sl
 8007450:	43db      	mvns	r3, r3
 8007452:	9304      	str	r3, [sp, #16]
 8007454:	2700      	movs	r7, #0
 8007456:	4621      	mov	r1, r4
 8007458:	4658      	mov	r0, fp
 800745a:	f000 ff03 	bl	8008264 <_Bfree>
 800745e:	2d00      	cmp	r5, #0
 8007460:	d0dc      	beq.n	800741c <_dtoa_r+0x65c>
 8007462:	b12f      	cbz	r7, 8007470 <_dtoa_r+0x6b0>
 8007464:	42af      	cmp	r7, r5
 8007466:	d003      	beq.n	8007470 <_dtoa_r+0x6b0>
 8007468:	4639      	mov	r1, r7
 800746a:	4658      	mov	r0, fp
 800746c:	f000 fefa 	bl	8008264 <_Bfree>
 8007470:	4629      	mov	r1, r5
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fef6 	bl	8008264 <_Bfree>
 8007478:	e7d0      	b.n	800741c <_dtoa_r+0x65c>
 800747a:	9704      	str	r7, [sp, #16]
 800747c:	4633      	mov	r3, r6
 800747e:	461e      	mov	r6, r3
 8007480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007484:	2a39      	cmp	r2, #57	@ 0x39
 8007486:	d107      	bne.n	8007498 <_dtoa_r+0x6d8>
 8007488:	459a      	cmp	sl, r3
 800748a:	d1f8      	bne.n	800747e <_dtoa_r+0x6be>
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	3201      	adds	r2, #1
 8007490:	9204      	str	r2, [sp, #16]
 8007492:	2230      	movs	r2, #48	@ 0x30
 8007494:	f88a 2000 	strb.w	r2, [sl]
 8007498:	781a      	ldrb	r2, [r3, #0]
 800749a:	3201      	adds	r2, #1
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e7bd      	b.n	800741c <_dtoa_r+0x65c>
 80074a0:	2200      	movs	r2, #0
 80074a2:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <_dtoa_r+0x708>)
 80074a4:	f7f9 f818 	bl	80004d8 <__aeabi_dmul>
 80074a8:	2200      	movs	r2, #0
 80074aa:	2300      	movs	r3, #0
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	f7f9 fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f43f aebc 	beq.w	8007232 <_dtoa_r+0x472>
 80074ba:	e6f1      	b.n	80072a0 <_dtoa_r+0x4e0>
 80074bc:	0800a968 	.word	0x0800a968
 80074c0:	3fe00000 	.word	0x3fe00000
 80074c4:	3ff00000 	.word	0x3ff00000
 80074c8:	40240000 	.word	0x40240000
 80074cc:	40140000 	.word	0x40140000
 80074d0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	f000 80db 	beq.w	800768e <_dtoa_r+0x8ce>
 80074d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074da:	2a01      	cmp	r2, #1
 80074dc:	f300 80bf 	bgt.w	800765e <_dtoa_r+0x89e>
 80074e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f000 80b7 	beq.w	8007656 <_dtoa_r+0x896>
 80074e8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074ec:	4646      	mov	r6, r8
 80074ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074f2:	2101      	movs	r1, #1
 80074f4:	441a      	add	r2, r3
 80074f6:	4658      	mov	r0, fp
 80074f8:	4498      	add	r8, r3
 80074fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80074fc:	f000 ffb0 	bl	8008460 <__i2b>
 8007500:	4605      	mov	r5, r0
 8007502:	b15e      	cbz	r6, 800751c <_dtoa_r+0x75c>
 8007504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007506:	2b00      	cmp	r3, #0
 8007508:	dd08      	ble.n	800751c <_dtoa_r+0x75c>
 800750a:	42b3      	cmp	r3, r6
 800750c:	bfa8      	it	ge
 800750e:	4633      	movge	r3, r6
 8007510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007512:	eba8 0803 	sub.w	r8, r8, r3
 8007516:	1af6      	subs	r6, r6, r3
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	9309      	str	r3, [sp, #36]	@ 0x24
 800751c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751e:	b1f3      	cbz	r3, 800755e <_dtoa_r+0x79e>
 8007520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80b7 	beq.w	8007696 <_dtoa_r+0x8d6>
 8007528:	b18c      	cbz	r4, 800754e <_dtoa_r+0x78e>
 800752a:	4629      	mov	r1, r5
 800752c:	4622      	mov	r2, r4
 800752e:	4658      	mov	r0, fp
 8007530:	f001 f854 	bl	80085dc <__pow5mult>
 8007534:	464a      	mov	r2, r9
 8007536:	4601      	mov	r1, r0
 8007538:	4605      	mov	r5, r0
 800753a:	4658      	mov	r0, fp
 800753c:	f000 ffa6 	bl	800848c <__multiply>
 8007540:	4649      	mov	r1, r9
 8007542:	9004      	str	r0, [sp, #16]
 8007544:	4658      	mov	r0, fp
 8007546:	f000 fe8d 	bl	8008264 <_Bfree>
 800754a:	9b04      	ldr	r3, [sp, #16]
 800754c:	4699      	mov	r9, r3
 800754e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007550:	1b1a      	subs	r2, r3, r4
 8007552:	d004      	beq.n	800755e <_dtoa_r+0x79e>
 8007554:	4649      	mov	r1, r9
 8007556:	4658      	mov	r0, fp
 8007558:	f001 f840 	bl	80085dc <__pow5mult>
 800755c:	4681      	mov	r9, r0
 800755e:	2101      	movs	r1, #1
 8007560:	4658      	mov	r0, fp
 8007562:	f000 ff7d 	bl	8008460 <__i2b>
 8007566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007568:	4604      	mov	r4, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 81c9 	beq.w	8007902 <_dtoa_r+0xb42>
 8007570:	461a      	mov	r2, r3
 8007572:	4601      	mov	r1, r0
 8007574:	4658      	mov	r0, fp
 8007576:	f001 f831 	bl	80085dc <__pow5mult>
 800757a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800757c:	4604      	mov	r4, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	f300 808f 	bgt.w	80076a2 <_dtoa_r+0x8e2>
 8007584:	9b02      	ldr	r3, [sp, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8087 	bne.w	800769a <_dtoa_r+0x8da>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007592:	2b00      	cmp	r3, #0
 8007594:	f040 8083 	bne.w	800769e <_dtoa_r+0x8de>
 8007598:	9b03      	ldr	r3, [sp, #12]
 800759a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800759e:	0d1b      	lsrs	r3, r3, #20
 80075a0:	051b      	lsls	r3, r3, #20
 80075a2:	b12b      	cbz	r3, 80075b0 <_dtoa_r+0x7f0>
 80075a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a6:	f108 0801 	add.w	r8, r8, #1
 80075aa:	3301      	adds	r3, #1
 80075ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ae:	2301      	movs	r3, #1
 80075b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 81aa 	beq.w	800790e <_dtoa_r+0xb4e>
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075c0:	6918      	ldr	r0, [r3, #16]
 80075c2:	f000 ff01 	bl	80083c8 <__hi0bits>
 80075c6:	f1c0 0020 	rsb	r0, r0, #32
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	4418      	add	r0, r3
 80075ce:	f010 001f 	ands.w	r0, r0, #31
 80075d2:	d071      	beq.n	80076b8 <_dtoa_r+0x8f8>
 80075d4:	f1c0 0320 	rsb	r3, r0, #32
 80075d8:	2b04      	cmp	r3, #4
 80075da:	dd65      	ble.n	80076a8 <_dtoa_r+0x8e8>
 80075dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075de:	f1c0 001c 	rsb	r0, r0, #28
 80075e2:	4403      	add	r3, r0
 80075e4:	4480      	add	r8, r0
 80075e6:	4406      	add	r6, r0
 80075e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ea:	f1b8 0f00 	cmp.w	r8, #0
 80075ee:	dd05      	ble.n	80075fc <_dtoa_r+0x83c>
 80075f0:	4649      	mov	r1, r9
 80075f2:	4642      	mov	r2, r8
 80075f4:	4658      	mov	r0, fp
 80075f6:	f001 f84b 	bl	8008690 <__lshift>
 80075fa:	4681      	mov	r9, r0
 80075fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dd05      	ble.n	800760e <_dtoa_r+0x84e>
 8007602:	4621      	mov	r1, r4
 8007604:	461a      	mov	r2, r3
 8007606:	4658      	mov	r0, fp
 8007608:	f001 f842 	bl	8008690 <__lshift>
 800760c:	4604      	mov	r4, r0
 800760e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d053      	beq.n	80076bc <_dtoa_r+0x8fc>
 8007614:	4621      	mov	r1, r4
 8007616:	4648      	mov	r0, r9
 8007618:	f001 f8a6 	bl	8008768 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	da4d      	bge.n	80076bc <_dtoa_r+0x8fc>
 8007620:	1e7b      	subs	r3, r7, #1
 8007622:	4649      	mov	r1, r9
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	220a      	movs	r2, #10
 8007628:	2300      	movs	r3, #0
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fe3c 	bl	80082a8 <__multadd>
 8007630:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007632:	4681      	mov	r9, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 816c 	beq.w	8007912 <_dtoa_r+0xb52>
 800763a:	2300      	movs	r3, #0
 800763c:	4629      	mov	r1, r5
 800763e:	220a      	movs	r2, #10
 8007640:	4658      	mov	r0, fp
 8007642:	f000 fe31 	bl	80082a8 <__multadd>
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	4605      	mov	r5, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	dc61      	bgt.n	8007712 <_dtoa_r+0x952>
 800764e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007650:	2b02      	cmp	r3, #2
 8007652:	dc3b      	bgt.n	80076cc <_dtoa_r+0x90c>
 8007654:	e05d      	b.n	8007712 <_dtoa_r+0x952>
 8007656:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007658:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800765c:	e746      	b.n	80074ec <_dtoa_r+0x72c>
 800765e:	9b07      	ldr	r3, [sp, #28]
 8007660:	1e5c      	subs	r4, r3, #1
 8007662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007664:	42a3      	cmp	r3, r4
 8007666:	bfbf      	itttt	lt
 8007668:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800766a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800766c:	1ae3      	sublt	r3, r4, r3
 800766e:	18d2      	addlt	r2, r2, r3
 8007670:	bfa8      	it	ge
 8007672:	1b1c      	subge	r4, r3, r4
 8007674:	9b07      	ldr	r3, [sp, #28]
 8007676:	bfbe      	ittt	lt
 8007678:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800767a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800767c:	2400      	movlt	r4, #0
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfb5      	itete	lt
 8007682:	eba8 0603 	sublt.w	r6, r8, r3
 8007686:	4646      	movge	r6, r8
 8007688:	2300      	movlt	r3, #0
 800768a:	9b07      	ldrge	r3, [sp, #28]
 800768c:	e730      	b.n	80074f0 <_dtoa_r+0x730>
 800768e:	4646      	mov	r6, r8
 8007690:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007692:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007694:	e735      	b.n	8007502 <_dtoa_r+0x742>
 8007696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007698:	e75c      	b.n	8007554 <_dtoa_r+0x794>
 800769a:	2300      	movs	r3, #0
 800769c:	e788      	b.n	80075b0 <_dtoa_r+0x7f0>
 800769e:	9b02      	ldr	r3, [sp, #8]
 80076a0:	e786      	b.n	80075b0 <_dtoa_r+0x7f0>
 80076a2:	2300      	movs	r3, #0
 80076a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80076a6:	e788      	b.n	80075ba <_dtoa_r+0x7fa>
 80076a8:	d09f      	beq.n	80075ea <_dtoa_r+0x82a>
 80076aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076ac:	331c      	adds	r3, #28
 80076ae:	441a      	add	r2, r3
 80076b0:	4498      	add	r8, r3
 80076b2:	441e      	add	r6, r3
 80076b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b6:	e798      	b.n	80075ea <_dtoa_r+0x82a>
 80076b8:	4603      	mov	r3, r0
 80076ba:	e7f6      	b.n	80076aa <_dtoa_r+0x8ea>
 80076bc:	9b07      	ldr	r3, [sp, #28]
 80076be:	9704      	str	r7, [sp, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dc20      	bgt.n	8007706 <_dtoa_r+0x946>
 80076c4:	9308      	str	r3, [sp, #32]
 80076c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	dd1e      	ble.n	800770a <_dtoa_r+0x94a>
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f47f aebc 	bne.w	800744c <_dtoa_r+0x68c>
 80076d4:	4621      	mov	r1, r4
 80076d6:	2205      	movs	r2, #5
 80076d8:	4658      	mov	r0, fp
 80076da:	f000 fde5 	bl	80082a8 <__multadd>
 80076de:	4601      	mov	r1, r0
 80076e0:	4604      	mov	r4, r0
 80076e2:	4648      	mov	r0, r9
 80076e4:	f001 f840 	bl	8008768 <__mcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	f77f aeaf 	ble.w	800744c <_dtoa_r+0x68c>
 80076ee:	2331      	movs	r3, #49	@ 0x31
 80076f0:	4656      	mov	r6, sl
 80076f2:	f806 3b01 	strb.w	r3, [r6], #1
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	e6aa      	b.n	8007454 <_dtoa_r+0x694>
 80076fe:	9c07      	ldr	r4, [sp, #28]
 8007700:	9704      	str	r7, [sp, #16]
 8007702:	4625      	mov	r5, r4
 8007704:	e7f3      	b.n	80076ee <_dtoa_r+0x92e>
 8007706:	9b07      	ldr	r3, [sp, #28]
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 8104 	beq.w	800791a <_dtoa_r+0xb5a>
 8007712:	2e00      	cmp	r6, #0
 8007714:	dd05      	ble.n	8007722 <_dtoa_r+0x962>
 8007716:	4629      	mov	r1, r5
 8007718:	4632      	mov	r2, r6
 800771a:	4658      	mov	r0, fp
 800771c:	f000 ffb8 	bl	8008690 <__lshift>
 8007720:	4605      	mov	r5, r0
 8007722:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007724:	2b00      	cmp	r3, #0
 8007726:	d05a      	beq.n	80077de <_dtoa_r+0xa1e>
 8007728:	4658      	mov	r0, fp
 800772a:	6869      	ldr	r1, [r5, #4]
 800772c:	f000 fd5a 	bl	80081e4 <_Balloc>
 8007730:	4606      	mov	r6, r0
 8007732:	b928      	cbnz	r0, 8007740 <_dtoa_r+0x980>
 8007734:	4602      	mov	r2, r0
 8007736:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800773a:	4b83      	ldr	r3, [pc, #524]	@ (8007948 <_dtoa_r+0xb88>)
 800773c:	f7ff bb54 	b.w	8006de8 <_dtoa_r+0x28>
 8007740:	692a      	ldr	r2, [r5, #16]
 8007742:	f105 010c 	add.w	r1, r5, #12
 8007746:	3202      	adds	r2, #2
 8007748:	0092      	lsls	r2, r2, #2
 800774a:	300c      	adds	r0, #12
 800774c:	f7ff fa97 	bl	8006c7e <memcpy>
 8007750:	2201      	movs	r2, #1
 8007752:	4631      	mov	r1, r6
 8007754:	4658      	mov	r0, fp
 8007756:	f000 ff9b 	bl	8008690 <__lshift>
 800775a:	462f      	mov	r7, r5
 800775c:	4605      	mov	r5, r0
 800775e:	f10a 0301 	add.w	r3, sl, #1
 8007762:	9307      	str	r3, [sp, #28]
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	4453      	add	r3, sl
 8007768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800776a:	9b02      	ldr	r3, [sp, #8]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	930a      	str	r3, [sp, #40]	@ 0x28
 8007772:	9b07      	ldr	r3, [sp, #28]
 8007774:	4621      	mov	r1, r4
 8007776:	3b01      	subs	r3, #1
 8007778:	4648      	mov	r0, r9
 800777a:	9302      	str	r3, [sp, #8]
 800777c:	f7ff fa98 	bl	8006cb0 <quorem>
 8007780:	4639      	mov	r1, r7
 8007782:	9008      	str	r0, [sp, #32]
 8007784:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007788:	4648      	mov	r0, r9
 800778a:	f000 ffed 	bl	8008768 <__mcmp>
 800778e:	462a      	mov	r2, r5
 8007790:	9009      	str	r0, [sp, #36]	@ 0x24
 8007792:	4621      	mov	r1, r4
 8007794:	4658      	mov	r0, fp
 8007796:	f001 f803 	bl	80087a0 <__mdiff>
 800779a:	68c2      	ldr	r2, [r0, #12]
 800779c:	4606      	mov	r6, r0
 800779e:	bb02      	cbnz	r2, 80077e2 <_dtoa_r+0xa22>
 80077a0:	4601      	mov	r1, r0
 80077a2:	4648      	mov	r0, r9
 80077a4:	f000 ffe0 	bl	8008768 <__mcmp>
 80077a8:	4602      	mov	r2, r0
 80077aa:	4631      	mov	r1, r6
 80077ac:	4658      	mov	r0, fp
 80077ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80077b0:	f000 fd58 	bl	8008264 <_Bfree>
 80077b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80077b8:	9e07      	ldr	r6, [sp, #28]
 80077ba:	ea43 0102 	orr.w	r1, r3, r2
 80077be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077c0:	4319      	orrs	r1, r3
 80077c2:	d110      	bne.n	80077e6 <_dtoa_r+0xa26>
 80077c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077c8:	d029      	beq.n	800781e <_dtoa_r+0xa5e>
 80077ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd02      	ble.n	80077d6 <_dtoa_r+0xa16>
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	f883 8000 	strb.w	r8, [r3]
 80077dc:	e63b      	b.n	8007456 <_dtoa_r+0x696>
 80077de:	4628      	mov	r0, r5
 80077e0:	e7bb      	b.n	800775a <_dtoa_r+0x99a>
 80077e2:	2201      	movs	r2, #1
 80077e4:	e7e1      	b.n	80077aa <_dtoa_r+0x9ea>
 80077e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	db04      	blt.n	80077f6 <_dtoa_r+0xa36>
 80077ec:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80077ee:	430b      	orrs	r3, r1
 80077f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077f2:	430b      	orrs	r3, r1
 80077f4:	d120      	bne.n	8007838 <_dtoa_r+0xa78>
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	dded      	ble.n	80077d6 <_dtoa_r+0xa16>
 80077fa:	4649      	mov	r1, r9
 80077fc:	2201      	movs	r2, #1
 80077fe:	4658      	mov	r0, fp
 8007800:	f000 ff46 	bl	8008690 <__lshift>
 8007804:	4621      	mov	r1, r4
 8007806:	4681      	mov	r9, r0
 8007808:	f000 ffae 	bl	8008768 <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	dc03      	bgt.n	8007818 <_dtoa_r+0xa58>
 8007810:	d1e1      	bne.n	80077d6 <_dtoa_r+0xa16>
 8007812:	f018 0f01 	tst.w	r8, #1
 8007816:	d0de      	beq.n	80077d6 <_dtoa_r+0xa16>
 8007818:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800781c:	d1d8      	bne.n	80077d0 <_dtoa_r+0xa10>
 800781e:	2339      	movs	r3, #57	@ 0x39
 8007820:	9a02      	ldr	r2, [sp, #8]
 8007822:	7013      	strb	r3, [r2, #0]
 8007824:	4633      	mov	r3, r6
 8007826:	461e      	mov	r6, r3
 8007828:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800782c:	3b01      	subs	r3, #1
 800782e:	2a39      	cmp	r2, #57	@ 0x39
 8007830:	d052      	beq.n	80078d8 <_dtoa_r+0xb18>
 8007832:	3201      	adds	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	e60e      	b.n	8007456 <_dtoa_r+0x696>
 8007838:	2a00      	cmp	r2, #0
 800783a:	dd07      	ble.n	800784c <_dtoa_r+0xa8c>
 800783c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007840:	d0ed      	beq.n	800781e <_dtoa_r+0xa5e>
 8007842:	9a02      	ldr	r2, [sp, #8]
 8007844:	f108 0301 	add.w	r3, r8, #1
 8007848:	7013      	strb	r3, [r2, #0]
 800784a:	e604      	b.n	8007456 <_dtoa_r+0x696>
 800784c:	9b07      	ldr	r3, [sp, #28]
 800784e:	9a07      	ldr	r2, [sp, #28]
 8007850:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007854:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007856:	4293      	cmp	r3, r2
 8007858:	d028      	beq.n	80078ac <_dtoa_r+0xaec>
 800785a:	4649      	mov	r1, r9
 800785c:	2300      	movs	r3, #0
 800785e:	220a      	movs	r2, #10
 8007860:	4658      	mov	r0, fp
 8007862:	f000 fd21 	bl	80082a8 <__multadd>
 8007866:	42af      	cmp	r7, r5
 8007868:	4681      	mov	r9, r0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	f04f 020a 	mov.w	r2, #10
 8007872:	4639      	mov	r1, r7
 8007874:	4658      	mov	r0, fp
 8007876:	d107      	bne.n	8007888 <_dtoa_r+0xac8>
 8007878:	f000 fd16 	bl	80082a8 <__multadd>
 800787c:	4607      	mov	r7, r0
 800787e:	4605      	mov	r5, r0
 8007880:	9b07      	ldr	r3, [sp, #28]
 8007882:	3301      	adds	r3, #1
 8007884:	9307      	str	r3, [sp, #28]
 8007886:	e774      	b.n	8007772 <_dtoa_r+0x9b2>
 8007888:	f000 fd0e 	bl	80082a8 <__multadd>
 800788c:	4629      	mov	r1, r5
 800788e:	4607      	mov	r7, r0
 8007890:	2300      	movs	r3, #0
 8007892:	220a      	movs	r2, #10
 8007894:	4658      	mov	r0, fp
 8007896:	f000 fd07 	bl	80082a8 <__multadd>
 800789a:	4605      	mov	r5, r0
 800789c:	e7f0      	b.n	8007880 <_dtoa_r+0xac0>
 800789e:	9b08      	ldr	r3, [sp, #32]
 80078a0:	2700      	movs	r7, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfcc      	ite	gt
 80078a6:	461e      	movgt	r6, r3
 80078a8:	2601      	movle	r6, #1
 80078aa:	4456      	add	r6, sl
 80078ac:	4649      	mov	r1, r9
 80078ae:	2201      	movs	r2, #1
 80078b0:	4658      	mov	r0, fp
 80078b2:	f000 feed 	bl	8008690 <__lshift>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4681      	mov	r9, r0
 80078ba:	f000 ff55 	bl	8008768 <__mcmp>
 80078be:	2800      	cmp	r0, #0
 80078c0:	dcb0      	bgt.n	8007824 <_dtoa_r+0xa64>
 80078c2:	d102      	bne.n	80078ca <_dtoa_r+0xb0a>
 80078c4:	f018 0f01 	tst.w	r8, #1
 80078c8:	d1ac      	bne.n	8007824 <_dtoa_r+0xa64>
 80078ca:	4633      	mov	r3, r6
 80078cc:	461e      	mov	r6, r3
 80078ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078d2:	2a30      	cmp	r2, #48	@ 0x30
 80078d4:	d0fa      	beq.n	80078cc <_dtoa_r+0xb0c>
 80078d6:	e5be      	b.n	8007456 <_dtoa_r+0x696>
 80078d8:	459a      	cmp	sl, r3
 80078da:	d1a4      	bne.n	8007826 <_dtoa_r+0xa66>
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	3301      	adds	r3, #1
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	2331      	movs	r3, #49	@ 0x31
 80078e4:	f88a 3000 	strb.w	r3, [sl]
 80078e8:	e5b5      	b.n	8007456 <_dtoa_r+0x696>
 80078ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078ec:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800794c <_dtoa_r+0xb8c>
 80078f0:	b11b      	cbz	r3, 80078fa <_dtoa_r+0xb3a>
 80078f2:	f10a 0308 	add.w	r3, sl, #8
 80078f6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	4650      	mov	r0, sl
 80078fc:	b017      	add	sp, #92	@ 0x5c
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007904:	2b01      	cmp	r3, #1
 8007906:	f77f ae3d 	ble.w	8007584 <_dtoa_r+0x7c4>
 800790a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800790c:	930a      	str	r3, [sp, #40]	@ 0x28
 800790e:	2001      	movs	r0, #1
 8007910:	e65b      	b.n	80075ca <_dtoa_r+0x80a>
 8007912:	9b08      	ldr	r3, [sp, #32]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f77f aed6 	ble.w	80076c6 <_dtoa_r+0x906>
 800791a:	4656      	mov	r6, sl
 800791c:	4621      	mov	r1, r4
 800791e:	4648      	mov	r0, r9
 8007920:	f7ff f9c6 	bl	8006cb0 <quorem>
 8007924:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	f806 8b01 	strb.w	r8, [r6], #1
 800792e:	eba6 020a 	sub.w	r2, r6, sl
 8007932:	4293      	cmp	r3, r2
 8007934:	ddb3      	ble.n	800789e <_dtoa_r+0xade>
 8007936:	4649      	mov	r1, r9
 8007938:	2300      	movs	r3, #0
 800793a:	220a      	movs	r2, #10
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fcb3 	bl	80082a8 <__multadd>
 8007942:	4681      	mov	r9, r0
 8007944:	e7ea      	b.n	800791c <_dtoa_r+0xb5c>
 8007946:	bf00      	nop
 8007948:	0800a865 	.word	0x0800a865
 800794c:	0800a7e9 	.word	0x0800a7e9

08007950 <_free_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4605      	mov	r5, r0
 8007954:	2900      	cmp	r1, #0
 8007956:	d040      	beq.n	80079da <_free_r+0x8a>
 8007958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800795c:	1f0c      	subs	r4, r1, #4
 800795e:	2b00      	cmp	r3, #0
 8007960:	bfb8      	it	lt
 8007962:	18e4      	addlt	r4, r4, r3
 8007964:	f000 fc32 	bl	80081cc <__malloc_lock>
 8007968:	4a1c      	ldr	r2, [pc, #112]	@ (80079dc <_free_r+0x8c>)
 800796a:	6813      	ldr	r3, [r2, #0]
 800796c:	b933      	cbnz	r3, 800797c <_free_r+0x2c>
 800796e:	6063      	str	r3, [r4, #4]
 8007970:	6014      	str	r4, [r2, #0]
 8007972:	4628      	mov	r0, r5
 8007974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007978:	f000 bc2e 	b.w	80081d8 <__malloc_unlock>
 800797c:	42a3      	cmp	r3, r4
 800797e:	d908      	bls.n	8007992 <_free_r+0x42>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	1821      	adds	r1, r4, r0
 8007984:	428b      	cmp	r3, r1
 8007986:	bf01      	itttt	eq
 8007988:	6819      	ldreq	r1, [r3, #0]
 800798a:	685b      	ldreq	r3, [r3, #4]
 800798c:	1809      	addeq	r1, r1, r0
 800798e:	6021      	streq	r1, [r4, #0]
 8007990:	e7ed      	b.n	800796e <_free_r+0x1e>
 8007992:	461a      	mov	r2, r3
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b10b      	cbz	r3, 800799c <_free_r+0x4c>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d9fa      	bls.n	8007992 <_free_r+0x42>
 800799c:	6811      	ldr	r1, [r2, #0]
 800799e:	1850      	adds	r0, r2, r1
 80079a0:	42a0      	cmp	r0, r4
 80079a2:	d10b      	bne.n	80079bc <_free_r+0x6c>
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	4401      	add	r1, r0
 80079a8:	1850      	adds	r0, r2, r1
 80079aa:	4283      	cmp	r3, r0
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	d1e0      	bne.n	8007972 <_free_r+0x22>
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4408      	add	r0, r1
 80079b6:	6010      	str	r0, [r2, #0]
 80079b8:	6053      	str	r3, [r2, #4]
 80079ba:	e7da      	b.n	8007972 <_free_r+0x22>
 80079bc:	d902      	bls.n	80079c4 <_free_r+0x74>
 80079be:	230c      	movs	r3, #12
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	e7d6      	b.n	8007972 <_free_r+0x22>
 80079c4:	6820      	ldr	r0, [r4, #0]
 80079c6:	1821      	adds	r1, r4, r0
 80079c8:	428b      	cmp	r3, r1
 80079ca:	bf01      	itttt	eq
 80079cc:	6819      	ldreq	r1, [r3, #0]
 80079ce:	685b      	ldreq	r3, [r3, #4]
 80079d0:	1809      	addeq	r1, r1, r0
 80079d2:	6021      	streq	r1, [r4, #0]
 80079d4:	6063      	str	r3, [r4, #4]
 80079d6:	6054      	str	r4, [r2, #4]
 80079d8:	e7cb      	b.n	8007972 <_free_r+0x22>
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200006e0 	.word	0x200006e0

080079e0 <rshift>:
 80079e0:	6903      	ldr	r3, [r0, #16]
 80079e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079ea:	f100 0414 	add.w	r4, r0, #20
 80079ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079f2:	dd46      	ble.n	8007a82 <rshift+0xa2>
 80079f4:	f011 011f 	ands.w	r1, r1, #31
 80079f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007a00:	d10c      	bne.n	8007a1c <rshift+0x3c>
 8007a02:	4629      	mov	r1, r5
 8007a04:	f100 0710 	add.w	r7, r0, #16
 8007a08:	42b1      	cmp	r1, r6
 8007a0a:	d335      	bcc.n	8007a78 <rshift+0x98>
 8007a0c:	1a9b      	subs	r3, r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	1eea      	subs	r2, r5, #3
 8007a12:	4296      	cmp	r6, r2
 8007a14:	bf38      	it	cc
 8007a16:	2300      	movcc	r3, #0
 8007a18:	4423      	add	r3, r4
 8007a1a:	e015      	b.n	8007a48 <rshift+0x68>
 8007a1c:	46a1      	mov	r9, r4
 8007a1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007a22:	f1c1 0820 	rsb	r8, r1, #32
 8007a26:	40cf      	lsrs	r7, r1
 8007a28:	f105 0e04 	add.w	lr, r5, #4
 8007a2c:	4576      	cmp	r6, lr
 8007a2e:	46f4      	mov	ip, lr
 8007a30:	d816      	bhi.n	8007a60 <rshift+0x80>
 8007a32:	1a9a      	subs	r2, r3, r2
 8007a34:	0092      	lsls	r2, r2, #2
 8007a36:	3a04      	subs	r2, #4
 8007a38:	3501      	adds	r5, #1
 8007a3a:	42ae      	cmp	r6, r5
 8007a3c:	bf38      	it	cc
 8007a3e:	2200      	movcc	r2, #0
 8007a40:	18a3      	adds	r3, r4, r2
 8007a42:	50a7      	str	r7, [r4, r2]
 8007a44:	b107      	cbz	r7, 8007a48 <rshift+0x68>
 8007a46:	3304      	adds	r3, #4
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	eba3 0204 	sub.w	r2, r3, r4
 8007a4e:	bf08      	it	eq
 8007a50:	2300      	moveq	r3, #0
 8007a52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a56:	6102      	str	r2, [r0, #16]
 8007a58:	bf08      	it	eq
 8007a5a:	6143      	streq	r3, [r0, #20]
 8007a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a60:	f8dc c000 	ldr.w	ip, [ip]
 8007a64:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a68:	ea4c 0707 	orr.w	r7, ip, r7
 8007a6c:	f849 7b04 	str.w	r7, [r9], #4
 8007a70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a74:	40cf      	lsrs	r7, r1
 8007a76:	e7d9      	b.n	8007a2c <rshift+0x4c>
 8007a78:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a80:	e7c2      	b.n	8007a08 <rshift+0x28>
 8007a82:	4623      	mov	r3, r4
 8007a84:	e7e0      	b.n	8007a48 <rshift+0x68>

08007a86 <__hexdig_fun>:
 8007a86:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d802      	bhi.n	8007a94 <__hexdig_fun+0xe>
 8007a8e:	3820      	subs	r0, #32
 8007a90:	b2c0      	uxtb	r0, r0
 8007a92:	4770      	bx	lr
 8007a94:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007a98:	2b05      	cmp	r3, #5
 8007a9a:	d801      	bhi.n	8007aa0 <__hexdig_fun+0x1a>
 8007a9c:	3847      	subs	r0, #71	@ 0x47
 8007a9e:	e7f7      	b.n	8007a90 <__hexdig_fun+0xa>
 8007aa0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d801      	bhi.n	8007aac <__hexdig_fun+0x26>
 8007aa8:	3827      	subs	r0, #39	@ 0x27
 8007aaa:	e7f1      	b.n	8007a90 <__hexdig_fun+0xa>
 8007aac:	2000      	movs	r0, #0
 8007aae:	4770      	bx	lr

08007ab0 <__gethex>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	468a      	mov	sl, r1
 8007ab6:	4690      	mov	r8, r2
 8007ab8:	b085      	sub	sp, #20
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	680b      	ldr	r3, [r1, #0]
 8007abe:	9001      	str	r0, [sp, #4]
 8007ac0:	1c9c      	adds	r4, r3, #2
 8007ac2:	46a1      	mov	r9, r4
 8007ac4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007ac8:	2830      	cmp	r0, #48	@ 0x30
 8007aca:	d0fa      	beq.n	8007ac2 <__gethex+0x12>
 8007acc:	eba9 0303 	sub.w	r3, r9, r3
 8007ad0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007ad4:	f7ff ffd7 	bl	8007a86 <__hexdig_fun>
 8007ad8:	4605      	mov	r5, r0
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d168      	bne.n	8007bb0 <__gethex+0x100>
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4648      	mov	r0, r9
 8007ae2:	499f      	ldr	r1, [pc, #636]	@ (8007d60 <__gethex+0x2b0>)
 8007ae4:	f7ff f833 	bl	8006b4e <strncmp>
 8007ae8:	4607      	mov	r7, r0
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d167      	bne.n	8007bbe <__gethex+0x10e>
 8007aee:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007af2:	4626      	mov	r6, r4
 8007af4:	f7ff ffc7 	bl	8007a86 <__hexdig_fun>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d062      	beq.n	8007bc2 <__gethex+0x112>
 8007afc:	4623      	mov	r3, r4
 8007afe:	7818      	ldrb	r0, [r3, #0]
 8007b00:	4699      	mov	r9, r3
 8007b02:	2830      	cmp	r0, #48	@ 0x30
 8007b04:	f103 0301 	add.w	r3, r3, #1
 8007b08:	d0f9      	beq.n	8007afe <__gethex+0x4e>
 8007b0a:	f7ff ffbc 	bl	8007a86 <__hexdig_fun>
 8007b0e:	fab0 f580 	clz	r5, r0
 8007b12:	f04f 0b01 	mov.w	fp, #1
 8007b16:	096d      	lsrs	r5, r5, #5
 8007b18:	464a      	mov	r2, r9
 8007b1a:	4616      	mov	r6, r2
 8007b1c:	7830      	ldrb	r0, [r6, #0]
 8007b1e:	3201      	adds	r2, #1
 8007b20:	f7ff ffb1 	bl	8007a86 <__hexdig_fun>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d1f8      	bne.n	8007b1a <__gethex+0x6a>
 8007b28:	2201      	movs	r2, #1
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	498c      	ldr	r1, [pc, #560]	@ (8007d60 <__gethex+0x2b0>)
 8007b2e:	f7ff f80e 	bl	8006b4e <strncmp>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d13f      	bne.n	8007bb6 <__gethex+0x106>
 8007b36:	b944      	cbnz	r4, 8007b4a <__gethex+0x9a>
 8007b38:	1c74      	adds	r4, r6, #1
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	4616      	mov	r6, r2
 8007b3e:	7830      	ldrb	r0, [r6, #0]
 8007b40:	3201      	adds	r2, #1
 8007b42:	f7ff ffa0 	bl	8007a86 <__hexdig_fun>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d1f8      	bne.n	8007b3c <__gethex+0x8c>
 8007b4a:	1ba4      	subs	r4, r4, r6
 8007b4c:	00a7      	lsls	r7, r4, #2
 8007b4e:	7833      	ldrb	r3, [r6, #0]
 8007b50:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007b54:	2b50      	cmp	r3, #80	@ 0x50
 8007b56:	d13e      	bne.n	8007bd6 <__gethex+0x126>
 8007b58:	7873      	ldrb	r3, [r6, #1]
 8007b5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007b5c:	d033      	beq.n	8007bc6 <__gethex+0x116>
 8007b5e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007b60:	d034      	beq.n	8007bcc <__gethex+0x11c>
 8007b62:	2400      	movs	r4, #0
 8007b64:	1c71      	adds	r1, r6, #1
 8007b66:	7808      	ldrb	r0, [r1, #0]
 8007b68:	f7ff ff8d 	bl	8007a86 <__hexdig_fun>
 8007b6c:	1e43      	subs	r3, r0, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b18      	cmp	r3, #24
 8007b72:	d830      	bhi.n	8007bd6 <__gethex+0x126>
 8007b74:	f1a0 0210 	sub.w	r2, r0, #16
 8007b78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b7c:	f7ff ff83 	bl	8007a86 <__hexdig_fun>
 8007b80:	f100 3cff 	add.w	ip, r0, #4294967295
 8007b84:	fa5f fc8c 	uxtb.w	ip, ip
 8007b88:	f1bc 0f18 	cmp.w	ip, #24
 8007b8c:	f04f 030a 	mov.w	r3, #10
 8007b90:	d91e      	bls.n	8007bd0 <__gethex+0x120>
 8007b92:	b104      	cbz	r4, 8007b96 <__gethex+0xe6>
 8007b94:	4252      	negs	r2, r2
 8007b96:	4417      	add	r7, r2
 8007b98:	f8ca 1000 	str.w	r1, [sl]
 8007b9c:	b1ed      	cbz	r5, 8007bda <__gethex+0x12a>
 8007b9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2506      	moveq	r5, #6
 8007ba6:	2500      	movne	r5, #0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	b005      	add	sp, #20
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	2500      	movs	r5, #0
 8007bb2:	462c      	mov	r4, r5
 8007bb4:	e7b0      	b.n	8007b18 <__gethex+0x68>
 8007bb6:	2c00      	cmp	r4, #0
 8007bb8:	d1c7      	bne.n	8007b4a <__gethex+0x9a>
 8007bba:	4627      	mov	r7, r4
 8007bbc:	e7c7      	b.n	8007b4e <__gethex+0x9e>
 8007bbe:	464e      	mov	r6, r9
 8007bc0:	462f      	mov	r7, r5
 8007bc2:	2501      	movs	r5, #1
 8007bc4:	e7c3      	b.n	8007b4e <__gethex+0x9e>
 8007bc6:	2400      	movs	r4, #0
 8007bc8:	1cb1      	adds	r1, r6, #2
 8007bca:	e7cc      	b.n	8007b66 <__gethex+0xb6>
 8007bcc:	2401      	movs	r4, #1
 8007bce:	e7fb      	b.n	8007bc8 <__gethex+0x118>
 8007bd0:	fb03 0002 	mla	r0, r3, r2, r0
 8007bd4:	e7ce      	b.n	8007b74 <__gethex+0xc4>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	e7de      	b.n	8007b98 <__gethex+0xe8>
 8007bda:	4629      	mov	r1, r5
 8007bdc:	eba6 0309 	sub.w	r3, r6, r9
 8007be0:	3b01      	subs	r3, #1
 8007be2:	2b07      	cmp	r3, #7
 8007be4:	dc0a      	bgt.n	8007bfc <__gethex+0x14c>
 8007be6:	9801      	ldr	r0, [sp, #4]
 8007be8:	f000 fafc 	bl	80081e4 <_Balloc>
 8007bec:	4604      	mov	r4, r0
 8007bee:	b940      	cbnz	r0, 8007c02 <__gethex+0x152>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	21e4      	movs	r1, #228	@ 0xe4
 8007bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8007d64 <__gethex+0x2b4>)
 8007bf6:	485c      	ldr	r0, [pc, #368]	@ (8007d68 <__gethex+0x2b8>)
 8007bf8:	f001 fa4c 	bl	8009094 <__assert_func>
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	105b      	asrs	r3, r3, #1
 8007c00:	e7ef      	b.n	8007be2 <__gethex+0x132>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f100 0a14 	add.w	sl, r0, #20
 8007c08:	4655      	mov	r5, sl
 8007c0a:	469b      	mov	fp, r3
 8007c0c:	45b1      	cmp	r9, r6
 8007c0e:	d337      	bcc.n	8007c80 <__gethex+0x1d0>
 8007c10:	f845 bb04 	str.w	fp, [r5], #4
 8007c14:	eba5 050a 	sub.w	r5, r5, sl
 8007c18:	10ad      	asrs	r5, r5, #2
 8007c1a:	6125      	str	r5, [r4, #16]
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fbd3 	bl	80083c8 <__hi0bits>
 8007c22:	016d      	lsls	r5, r5, #5
 8007c24:	f8d8 6000 	ldr.w	r6, [r8]
 8007c28:	1a2d      	subs	r5, r5, r0
 8007c2a:	42b5      	cmp	r5, r6
 8007c2c:	dd54      	ble.n	8007cd8 <__gethex+0x228>
 8007c2e:	1bad      	subs	r5, r5, r6
 8007c30:	4629      	mov	r1, r5
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 ff5b 	bl	8008aee <__any_on>
 8007c38:	4681      	mov	r9, r0
 8007c3a:	b178      	cbz	r0, 8007c5c <__gethex+0x1ac>
 8007c3c:	f04f 0901 	mov.w	r9, #1
 8007c40:	1e6b      	subs	r3, r5, #1
 8007c42:	1159      	asrs	r1, r3, #5
 8007c44:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007c48:	f003 021f 	and.w	r2, r3, #31
 8007c4c:	fa09 f202 	lsl.w	r2, r9, r2
 8007c50:	420a      	tst	r2, r1
 8007c52:	d003      	beq.n	8007c5c <__gethex+0x1ac>
 8007c54:	454b      	cmp	r3, r9
 8007c56:	dc36      	bgt.n	8007cc6 <__gethex+0x216>
 8007c58:	f04f 0902 	mov.w	r9, #2
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f7ff febe 	bl	80079e0 <rshift>
 8007c64:	442f      	add	r7, r5
 8007c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	da42      	bge.n	8007cf4 <__gethex+0x244>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	9801      	ldr	r0, [sp, #4]
 8007c72:	f000 faf7 	bl	8008264 <_Bfree>
 8007c76:	2300      	movs	r3, #0
 8007c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c7a:	25a3      	movs	r5, #163	@ 0xa3
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e793      	b.n	8007ba8 <__gethex+0xf8>
 8007c80:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007c84:	2a2e      	cmp	r2, #46	@ 0x2e
 8007c86:	d012      	beq.n	8007cae <__gethex+0x1fe>
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d104      	bne.n	8007c96 <__gethex+0x1e6>
 8007c8c:	f845 bb04 	str.w	fp, [r5], #4
 8007c90:	f04f 0b00 	mov.w	fp, #0
 8007c94:	465b      	mov	r3, fp
 8007c96:	7830      	ldrb	r0, [r6, #0]
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	f7ff fef4 	bl	8007a86 <__hexdig_fun>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	f000 000f 	and.w	r0, r0, #15
 8007ca4:	4098      	lsls	r0, r3
 8007ca6:	ea4b 0b00 	orr.w	fp, fp, r0
 8007caa:	3304      	adds	r3, #4
 8007cac:	e7ae      	b.n	8007c0c <__gethex+0x15c>
 8007cae:	45b1      	cmp	r9, r6
 8007cb0:	d8ea      	bhi.n	8007c88 <__gethex+0x1d8>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	492a      	ldr	r1, [pc, #168]	@ (8007d60 <__gethex+0x2b0>)
 8007cb8:	9303      	str	r3, [sp, #12]
 8007cba:	f7fe ff48 	bl	8006b4e <strncmp>
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d1e1      	bne.n	8007c88 <__gethex+0x1d8>
 8007cc4:	e7a2      	b.n	8007c0c <__gethex+0x15c>
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	1ea9      	subs	r1, r5, #2
 8007cca:	f000 ff10 	bl	8008aee <__any_on>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d0c2      	beq.n	8007c58 <__gethex+0x1a8>
 8007cd2:	f04f 0903 	mov.w	r9, #3
 8007cd6:	e7c1      	b.n	8007c5c <__gethex+0x1ac>
 8007cd8:	da09      	bge.n	8007cee <__gethex+0x23e>
 8007cda:	1b75      	subs	r5, r6, r5
 8007cdc:	4621      	mov	r1, r4
 8007cde:	462a      	mov	r2, r5
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	f000 fcd5 	bl	8008690 <__lshift>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	1b7f      	subs	r7, r7, r5
 8007cea:	f100 0a14 	add.w	sl, r0, #20
 8007cee:	f04f 0900 	mov.w	r9, #0
 8007cf2:	e7b8      	b.n	8007c66 <__gethex+0x1b6>
 8007cf4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007cf8:	42bd      	cmp	r5, r7
 8007cfa:	dd6f      	ble.n	8007ddc <__gethex+0x32c>
 8007cfc:	1bed      	subs	r5, r5, r7
 8007cfe:	42ae      	cmp	r6, r5
 8007d00:	dc34      	bgt.n	8007d6c <__gethex+0x2bc>
 8007d02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d022      	beq.n	8007d50 <__gethex+0x2a0>
 8007d0a:	2b03      	cmp	r3, #3
 8007d0c:	d024      	beq.n	8007d58 <__gethex+0x2a8>
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d115      	bne.n	8007d3e <__gethex+0x28e>
 8007d12:	42ae      	cmp	r6, r5
 8007d14:	d113      	bne.n	8007d3e <__gethex+0x28e>
 8007d16:	2e01      	cmp	r6, #1
 8007d18:	d10b      	bne.n	8007d32 <__gethex+0x282>
 8007d1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d1e:	9a02      	ldr	r2, [sp, #8]
 8007d20:	2562      	movs	r5, #98	@ 0x62
 8007d22:	6013      	str	r3, [r2, #0]
 8007d24:	2301      	movs	r3, #1
 8007d26:	6123      	str	r3, [r4, #16]
 8007d28:	f8ca 3000 	str.w	r3, [sl]
 8007d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d2e:	601c      	str	r4, [r3, #0]
 8007d30:	e73a      	b.n	8007ba8 <__gethex+0xf8>
 8007d32:	4620      	mov	r0, r4
 8007d34:	1e71      	subs	r1, r6, #1
 8007d36:	f000 feda 	bl	8008aee <__any_on>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d1ed      	bne.n	8007d1a <__gethex+0x26a>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	9801      	ldr	r0, [sp, #4]
 8007d42:	f000 fa8f 	bl	8008264 <_Bfree>
 8007d46:	2300      	movs	r3, #0
 8007d48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d4a:	2550      	movs	r5, #80	@ 0x50
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e72b      	b.n	8007ba8 <__gethex+0xf8>
 8007d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1f3      	bne.n	8007d3e <__gethex+0x28e>
 8007d56:	e7e0      	b.n	8007d1a <__gethex+0x26a>
 8007d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1dd      	bne.n	8007d1a <__gethex+0x26a>
 8007d5e:	e7ee      	b.n	8007d3e <__gethex+0x28e>
 8007d60:	0800a756 	.word	0x0800a756
 8007d64:	0800a865 	.word	0x0800a865
 8007d68:	0800a876 	.word	0x0800a876
 8007d6c:	1e6f      	subs	r7, r5, #1
 8007d6e:	f1b9 0f00 	cmp.w	r9, #0
 8007d72:	d130      	bne.n	8007dd6 <__gethex+0x326>
 8007d74:	b127      	cbz	r7, 8007d80 <__gethex+0x2d0>
 8007d76:	4639      	mov	r1, r7
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 feb8 	bl	8008aee <__any_on>
 8007d7e:	4681      	mov	r9, r0
 8007d80:	2301      	movs	r3, #1
 8007d82:	4629      	mov	r1, r5
 8007d84:	1b76      	subs	r6, r6, r5
 8007d86:	2502      	movs	r5, #2
 8007d88:	117a      	asrs	r2, r7, #5
 8007d8a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d8e:	f007 071f 	and.w	r7, r7, #31
 8007d92:	40bb      	lsls	r3, r7
 8007d94:	4213      	tst	r3, r2
 8007d96:	4620      	mov	r0, r4
 8007d98:	bf18      	it	ne
 8007d9a:	f049 0902 	orrne.w	r9, r9, #2
 8007d9e:	f7ff fe1f 	bl	80079e0 <rshift>
 8007da2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007da6:	f1b9 0f00 	cmp.w	r9, #0
 8007daa:	d047      	beq.n	8007e3c <__gethex+0x38c>
 8007dac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d015      	beq.n	8007de0 <__gethex+0x330>
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d017      	beq.n	8007de8 <__gethex+0x338>
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d109      	bne.n	8007dd0 <__gethex+0x320>
 8007dbc:	f019 0f02 	tst.w	r9, #2
 8007dc0:	d006      	beq.n	8007dd0 <__gethex+0x320>
 8007dc2:	f8da 3000 	ldr.w	r3, [sl]
 8007dc6:	ea49 0903 	orr.w	r9, r9, r3
 8007dca:	f019 0f01 	tst.w	r9, #1
 8007dce:	d10e      	bne.n	8007dee <__gethex+0x33e>
 8007dd0:	f045 0510 	orr.w	r5, r5, #16
 8007dd4:	e032      	b.n	8007e3c <__gethex+0x38c>
 8007dd6:	f04f 0901 	mov.w	r9, #1
 8007dda:	e7d1      	b.n	8007d80 <__gethex+0x2d0>
 8007ddc:	2501      	movs	r5, #1
 8007dde:	e7e2      	b.n	8007da6 <__gethex+0x2f6>
 8007de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007de2:	f1c3 0301 	rsb	r3, r3, #1
 8007de6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f0      	beq.n	8007dd0 <__gethex+0x320>
 8007dee:	f04f 0c00 	mov.w	ip, #0
 8007df2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007df6:	f104 0314 	add.w	r3, r4, #20
 8007dfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007dfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e0c:	d01b      	beq.n	8007e46 <__gethex+0x396>
 8007e0e:	3201      	adds	r2, #1
 8007e10:	6002      	str	r2, [r0, #0]
 8007e12:	2d02      	cmp	r5, #2
 8007e14:	f104 0314 	add.w	r3, r4, #20
 8007e18:	d13c      	bne.n	8007e94 <__gethex+0x3e4>
 8007e1a:	f8d8 2000 	ldr.w	r2, [r8]
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	42b2      	cmp	r2, r6
 8007e22:	d109      	bne.n	8007e38 <__gethex+0x388>
 8007e24:	2201      	movs	r2, #1
 8007e26:	1171      	asrs	r1, r6, #5
 8007e28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e2c:	f006 061f 	and.w	r6, r6, #31
 8007e30:	fa02 f606 	lsl.w	r6, r2, r6
 8007e34:	421e      	tst	r6, r3
 8007e36:	d13a      	bne.n	8007eae <__gethex+0x3fe>
 8007e38:	f045 0520 	orr.w	r5, r5, #32
 8007e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e3e:	601c      	str	r4, [r3, #0]
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	601f      	str	r7, [r3, #0]
 8007e44:	e6b0      	b.n	8007ba8 <__gethex+0xf8>
 8007e46:	4299      	cmp	r1, r3
 8007e48:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e4c:	d8d9      	bhi.n	8007e02 <__gethex+0x352>
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	459b      	cmp	fp, r3
 8007e52:	db17      	blt.n	8007e84 <__gethex+0x3d4>
 8007e54:	6861      	ldr	r1, [r4, #4]
 8007e56:	9801      	ldr	r0, [sp, #4]
 8007e58:	3101      	adds	r1, #1
 8007e5a:	f000 f9c3 	bl	80081e4 <_Balloc>
 8007e5e:	4681      	mov	r9, r0
 8007e60:	b918      	cbnz	r0, 8007e6a <__gethex+0x3ba>
 8007e62:	4602      	mov	r2, r0
 8007e64:	2184      	movs	r1, #132	@ 0x84
 8007e66:	4b19      	ldr	r3, [pc, #100]	@ (8007ecc <__gethex+0x41c>)
 8007e68:	e6c5      	b.n	8007bf6 <__gethex+0x146>
 8007e6a:	6922      	ldr	r2, [r4, #16]
 8007e6c:	f104 010c 	add.w	r1, r4, #12
 8007e70:	3202      	adds	r2, #2
 8007e72:	0092      	lsls	r2, r2, #2
 8007e74:	300c      	adds	r0, #12
 8007e76:	f7fe ff02 	bl	8006c7e <memcpy>
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	9801      	ldr	r0, [sp, #4]
 8007e7e:	f000 f9f1 	bl	8008264 <_Bfree>
 8007e82:	464c      	mov	r4, r9
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	6122      	str	r2, [r4, #16]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e90:	615a      	str	r2, [r3, #20]
 8007e92:	e7be      	b.n	8007e12 <__gethex+0x362>
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	455a      	cmp	r2, fp
 8007e98:	dd0b      	ble.n	8007eb2 <__gethex+0x402>
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f7ff fd9f 	bl	80079e0 <rshift>
 8007ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ea6:	3701      	adds	r7, #1
 8007ea8:	42bb      	cmp	r3, r7
 8007eaa:	f6ff aee0 	blt.w	8007c6e <__gethex+0x1be>
 8007eae:	2501      	movs	r5, #1
 8007eb0:	e7c2      	b.n	8007e38 <__gethex+0x388>
 8007eb2:	f016 061f 	ands.w	r6, r6, #31
 8007eb6:	d0fa      	beq.n	8007eae <__gethex+0x3fe>
 8007eb8:	4453      	add	r3, sl
 8007eba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ebe:	f000 fa83 	bl	80083c8 <__hi0bits>
 8007ec2:	f1c6 0620 	rsb	r6, r6, #32
 8007ec6:	42b0      	cmp	r0, r6
 8007ec8:	dbe7      	blt.n	8007e9a <__gethex+0x3ea>
 8007eca:	e7f0      	b.n	8007eae <__gethex+0x3fe>
 8007ecc:	0800a865 	.word	0x0800a865

08007ed0 <L_shift>:
 8007ed0:	f1c2 0208 	rsb	r2, r2, #8
 8007ed4:	0092      	lsls	r2, r2, #2
 8007ed6:	b570      	push	{r4, r5, r6, lr}
 8007ed8:	f1c2 0620 	rsb	r6, r2, #32
 8007edc:	6843      	ldr	r3, [r0, #4]
 8007ede:	6804      	ldr	r4, [r0, #0]
 8007ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8007ee4:	432c      	orrs	r4, r5
 8007ee6:	40d3      	lsrs	r3, r2
 8007ee8:	6004      	str	r4, [r0, #0]
 8007eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8007eee:	4288      	cmp	r0, r1
 8007ef0:	d3f4      	bcc.n	8007edc <L_shift+0xc>
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}

08007ef4 <__match>:
 8007ef4:	b530      	push	{r4, r5, lr}
 8007ef6:	6803      	ldr	r3, [r0, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007efe:	b914      	cbnz	r4, 8007f06 <__match+0x12>
 8007f00:	6003      	str	r3, [r0, #0]
 8007f02:	2001      	movs	r0, #1
 8007f04:	bd30      	pop	{r4, r5, pc}
 8007f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007f0e:	2d19      	cmp	r5, #25
 8007f10:	bf98      	it	ls
 8007f12:	3220      	addls	r2, #32
 8007f14:	42a2      	cmp	r2, r4
 8007f16:	d0f0      	beq.n	8007efa <__match+0x6>
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e7f3      	b.n	8007f04 <__match+0x10>

08007f1c <__hexnan>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	2500      	movs	r5, #0
 8007f22:	680b      	ldr	r3, [r1, #0]
 8007f24:	4682      	mov	sl, r0
 8007f26:	115e      	asrs	r6, r3, #5
 8007f28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f2c:	f013 031f 	ands.w	r3, r3, #31
 8007f30:	bf18      	it	ne
 8007f32:	3604      	addne	r6, #4
 8007f34:	1f37      	subs	r7, r6, #4
 8007f36:	4690      	mov	r8, r2
 8007f38:	46b9      	mov	r9, r7
 8007f3a:	463c      	mov	r4, r7
 8007f3c:	46ab      	mov	fp, r5
 8007f3e:	b087      	sub	sp, #28
 8007f40:	6801      	ldr	r1, [r0, #0]
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f48:	9502      	str	r5, [sp, #8]
 8007f4a:	784a      	ldrb	r2, [r1, #1]
 8007f4c:	1c4b      	adds	r3, r1, #1
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	b342      	cbz	r2, 8007fa4 <__hexnan+0x88>
 8007f52:	4610      	mov	r0, r2
 8007f54:	9105      	str	r1, [sp, #20]
 8007f56:	9204      	str	r2, [sp, #16]
 8007f58:	f7ff fd95 	bl	8007a86 <__hexdig_fun>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d151      	bne.n	8008004 <__hexnan+0xe8>
 8007f60:	9a04      	ldr	r2, [sp, #16]
 8007f62:	9905      	ldr	r1, [sp, #20]
 8007f64:	2a20      	cmp	r2, #32
 8007f66:	d818      	bhi.n	8007f9a <__hexnan+0x7e>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	459b      	cmp	fp, r3
 8007f6c:	dd13      	ble.n	8007f96 <__hexnan+0x7a>
 8007f6e:	454c      	cmp	r4, r9
 8007f70:	d206      	bcs.n	8007f80 <__hexnan+0x64>
 8007f72:	2d07      	cmp	r5, #7
 8007f74:	dc04      	bgt.n	8007f80 <__hexnan+0x64>
 8007f76:	462a      	mov	r2, r5
 8007f78:	4649      	mov	r1, r9
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f7ff ffa8 	bl	8007ed0 <L_shift>
 8007f80:	4544      	cmp	r4, r8
 8007f82:	d952      	bls.n	800802a <__hexnan+0x10e>
 8007f84:	2300      	movs	r3, #0
 8007f86:	f1a4 0904 	sub.w	r9, r4, #4
 8007f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f8e:	461d      	mov	r5, r3
 8007f90:	464c      	mov	r4, r9
 8007f92:	f8cd b008 	str.w	fp, [sp, #8]
 8007f96:	9903      	ldr	r1, [sp, #12]
 8007f98:	e7d7      	b.n	8007f4a <__hexnan+0x2e>
 8007f9a:	2a29      	cmp	r2, #41	@ 0x29
 8007f9c:	d157      	bne.n	800804e <__hexnan+0x132>
 8007f9e:	3102      	adds	r1, #2
 8007fa0:	f8ca 1000 	str.w	r1, [sl]
 8007fa4:	f1bb 0f00 	cmp.w	fp, #0
 8007fa8:	d051      	beq.n	800804e <__hexnan+0x132>
 8007faa:	454c      	cmp	r4, r9
 8007fac:	d206      	bcs.n	8007fbc <__hexnan+0xa0>
 8007fae:	2d07      	cmp	r5, #7
 8007fb0:	dc04      	bgt.n	8007fbc <__hexnan+0xa0>
 8007fb2:	462a      	mov	r2, r5
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7ff ff8a 	bl	8007ed0 <L_shift>
 8007fbc:	4544      	cmp	r4, r8
 8007fbe:	d936      	bls.n	800802e <__hexnan+0x112>
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	f1a8 0204 	sub.w	r2, r8, #4
 8007fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fca:	429f      	cmp	r7, r3
 8007fcc:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fd0:	d2f9      	bcs.n	8007fc6 <__hexnan+0xaa>
 8007fd2:	1b3b      	subs	r3, r7, r4
 8007fd4:	f023 0303 	bic.w	r3, r3, #3
 8007fd8:	3304      	adds	r3, #4
 8007fda:	3401      	adds	r4, #1
 8007fdc:	3e03      	subs	r6, #3
 8007fde:	42b4      	cmp	r4, r6
 8007fe0:	bf88      	it	hi
 8007fe2:	2304      	movhi	r3, #4
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4443      	add	r3, r8
 8007fe8:	f843 2b04 	str.w	r2, [r3], #4
 8007fec:	429f      	cmp	r7, r3
 8007fee:	d2fb      	bcs.n	8007fe8 <__hexnan+0xcc>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	b91b      	cbnz	r3, 8007ffc <__hexnan+0xe0>
 8007ff4:	4547      	cmp	r7, r8
 8007ff6:	d128      	bne.n	800804a <__hexnan+0x12e>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	2005      	movs	r0, #5
 8007ffe:	b007      	add	sp, #28
 8008000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008004:	3501      	adds	r5, #1
 8008006:	2d08      	cmp	r5, #8
 8008008:	f10b 0b01 	add.w	fp, fp, #1
 800800c:	dd06      	ble.n	800801c <__hexnan+0x100>
 800800e:	4544      	cmp	r4, r8
 8008010:	d9c1      	bls.n	8007f96 <__hexnan+0x7a>
 8008012:	2300      	movs	r3, #0
 8008014:	2501      	movs	r5, #1
 8008016:	f844 3c04 	str.w	r3, [r4, #-4]
 800801a:	3c04      	subs	r4, #4
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	f000 000f 	and.w	r0, r0, #15
 8008022:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008026:	6020      	str	r0, [r4, #0]
 8008028:	e7b5      	b.n	8007f96 <__hexnan+0x7a>
 800802a:	2508      	movs	r5, #8
 800802c:	e7b3      	b.n	8007f96 <__hexnan+0x7a>
 800802e:	9b01      	ldr	r3, [sp, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0dd      	beq.n	8007ff0 <__hexnan+0xd4>
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	f1c3 0320 	rsb	r3, r3, #32
 800803c:	40da      	lsrs	r2, r3
 800803e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008042:	4013      	ands	r3, r2
 8008044:	f846 3c04 	str.w	r3, [r6, #-4]
 8008048:	e7d2      	b.n	8007ff0 <__hexnan+0xd4>
 800804a:	3f04      	subs	r7, #4
 800804c:	e7d0      	b.n	8007ff0 <__hexnan+0xd4>
 800804e:	2004      	movs	r0, #4
 8008050:	e7d5      	b.n	8007ffe <__hexnan+0xe2>
	...

08008054 <malloc>:
 8008054:	4b02      	ldr	r3, [pc, #8]	@ (8008060 <malloc+0xc>)
 8008056:	4601      	mov	r1, r0
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	f000 b825 	b.w	80080a8 <_malloc_r>
 800805e:	bf00      	nop
 8008060:	20000184 	.word	0x20000184

08008064 <sbrk_aligned>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4e0f      	ldr	r6, [pc, #60]	@ (80080a4 <sbrk_aligned+0x40>)
 8008068:	460c      	mov	r4, r1
 800806a:	6831      	ldr	r1, [r6, #0]
 800806c:	4605      	mov	r5, r0
 800806e:	b911      	cbnz	r1, 8008076 <sbrk_aligned+0x12>
 8008070:	f001 f800 	bl	8009074 <_sbrk_r>
 8008074:	6030      	str	r0, [r6, #0]
 8008076:	4621      	mov	r1, r4
 8008078:	4628      	mov	r0, r5
 800807a:	f000 fffb 	bl	8009074 <_sbrk_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d103      	bne.n	800808a <sbrk_aligned+0x26>
 8008082:	f04f 34ff 	mov.w	r4, #4294967295
 8008086:	4620      	mov	r0, r4
 8008088:	bd70      	pop	{r4, r5, r6, pc}
 800808a:	1cc4      	adds	r4, r0, #3
 800808c:	f024 0403 	bic.w	r4, r4, #3
 8008090:	42a0      	cmp	r0, r4
 8008092:	d0f8      	beq.n	8008086 <sbrk_aligned+0x22>
 8008094:	1a21      	subs	r1, r4, r0
 8008096:	4628      	mov	r0, r5
 8008098:	f000 ffec 	bl	8009074 <_sbrk_r>
 800809c:	3001      	adds	r0, #1
 800809e:	d1f2      	bne.n	8008086 <sbrk_aligned+0x22>
 80080a0:	e7ef      	b.n	8008082 <sbrk_aligned+0x1e>
 80080a2:	bf00      	nop
 80080a4:	200006dc 	.word	0x200006dc

080080a8 <_malloc_r>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	1ccd      	adds	r5, r1, #3
 80080ae:	f025 0503 	bic.w	r5, r5, #3
 80080b2:	3508      	adds	r5, #8
 80080b4:	2d0c      	cmp	r5, #12
 80080b6:	bf38      	it	cc
 80080b8:	250c      	movcc	r5, #12
 80080ba:	2d00      	cmp	r5, #0
 80080bc:	4606      	mov	r6, r0
 80080be:	db01      	blt.n	80080c4 <_malloc_r+0x1c>
 80080c0:	42a9      	cmp	r1, r5
 80080c2:	d904      	bls.n	80080ce <_malloc_r+0x26>
 80080c4:	230c      	movs	r3, #12
 80080c6:	6033      	str	r3, [r6, #0]
 80080c8:	2000      	movs	r0, #0
 80080ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081a4 <_malloc_r+0xfc>
 80080d2:	f000 f87b 	bl	80081cc <__malloc_lock>
 80080d6:	f8d8 3000 	ldr.w	r3, [r8]
 80080da:	461c      	mov	r4, r3
 80080dc:	bb44      	cbnz	r4, 8008130 <_malloc_r+0x88>
 80080de:	4629      	mov	r1, r5
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7ff ffbf 	bl	8008064 <sbrk_aligned>
 80080e6:	1c43      	adds	r3, r0, #1
 80080e8:	4604      	mov	r4, r0
 80080ea:	d158      	bne.n	800819e <_malloc_r+0xf6>
 80080ec:	f8d8 4000 	ldr.w	r4, [r8]
 80080f0:	4627      	mov	r7, r4
 80080f2:	2f00      	cmp	r7, #0
 80080f4:	d143      	bne.n	800817e <_malloc_r+0xd6>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	d04b      	beq.n	8008192 <_malloc_r+0xea>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	4639      	mov	r1, r7
 80080fe:	4630      	mov	r0, r6
 8008100:	eb04 0903 	add.w	r9, r4, r3
 8008104:	f000 ffb6 	bl	8009074 <_sbrk_r>
 8008108:	4581      	cmp	r9, r0
 800810a:	d142      	bne.n	8008192 <_malloc_r+0xea>
 800810c:	6821      	ldr	r1, [r4, #0]
 800810e:	4630      	mov	r0, r6
 8008110:	1a6d      	subs	r5, r5, r1
 8008112:	4629      	mov	r1, r5
 8008114:	f7ff ffa6 	bl	8008064 <sbrk_aligned>
 8008118:	3001      	adds	r0, #1
 800811a:	d03a      	beq.n	8008192 <_malloc_r+0xea>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	442b      	add	r3, r5
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	f8d8 3000 	ldr.w	r3, [r8]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	bb62      	cbnz	r2, 8008184 <_malloc_r+0xdc>
 800812a:	f8c8 7000 	str.w	r7, [r8]
 800812e:	e00f      	b.n	8008150 <_malloc_r+0xa8>
 8008130:	6822      	ldr	r2, [r4, #0]
 8008132:	1b52      	subs	r2, r2, r5
 8008134:	d420      	bmi.n	8008178 <_malloc_r+0xd0>
 8008136:	2a0b      	cmp	r2, #11
 8008138:	d917      	bls.n	800816a <_malloc_r+0xc2>
 800813a:	1961      	adds	r1, r4, r5
 800813c:	42a3      	cmp	r3, r4
 800813e:	6025      	str	r5, [r4, #0]
 8008140:	bf18      	it	ne
 8008142:	6059      	strne	r1, [r3, #4]
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	bf08      	it	eq
 8008148:	f8c8 1000 	streq.w	r1, [r8]
 800814c:	5162      	str	r2, [r4, r5]
 800814e:	604b      	str	r3, [r1, #4]
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f841 	bl	80081d8 <__malloc_unlock>
 8008156:	f104 000b 	add.w	r0, r4, #11
 800815a:	1d23      	adds	r3, r4, #4
 800815c:	f020 0007 	bic.w	r0, r0, #7
 8008160:	1ac2      	subs	r2, r0, r3
 8008162:	bf1c      	itt	ne
 8008164:	1a1b      	subne	r3, r3, r0
 8008166:	50a3      	strne	r3, [r4, r2]
 8008168:	e7af      	b.n	80080ca <_malloc_r+0x22>
 800816a:	6862      	ldr	r2, [r4, #4]
 800816c:	42a3      	cmp	r3, r4
 800816e:	bf0c      	ite	eq
 8008170:	f8c8 2000 	streq.w	r2, [r8]
 8008174:	605a      	strne	r2, [r3, #4]
 8008176:	e7eb      	b.n	8008150 <_malloc_r+0xa8>
 8008178:	4623      	mov	r3, r4
 800817a:	6864      	ldr	r4, [r4, #4]
 800817c:	e7ae      	b.n	80080dc <_malloc_r+0x34>
 800817e:	463c      	mov	r4, r7
 8008180:	687f      	ldr	r7, [r7, #4]
 8008182:	e7b6      	b.n	80080f2 <_malloc_r+0x4a>
 8008184:	461a      	mov	r2, r3
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	42a3      	cmp	r3, r4
 800818a:	d1fb      	bne.n	8008184 <_malloc_r+0xdc>
 800818c:	2300      	movs	r3, #0
 800818e:	6053      	str	r3, [r2, #4]
 8008190:	e7de      	b.n	8008150 <_malloc_r+0xa8>
 8008192:	230c      	movs	r3, #12
 8008194:	4630      	mov	r0, r6
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	f000 f81e 	bl	80081d8 <__malloc_unlock>
 800819c:	e794      	b.n	80080c8 <_malloc_r+0x20>
 800819e:	6005      	str	r5, [r0, #0]
 80081a0:	e7d6      	b.n	8008150 <_malloc_r+0xa8>
 80081a2:	bf00      	nop
 80081a4:	200006e0 	.word	0x200006e0

080081a8 <__ascii_mbtowc>:
 80081a8:	b082      	sub	sp, #8
 80081aa:	b901      	cbnz	r1, 80081ae <__ascii_mbtowc+0x6>
 80081ac:	a901      	add	r1, sp, #4
 80081ae:	b142      	cbz	r2, 80081c2 <__ascii_mbtowc+0x1a>
 80081b0:	b14b      	cbz	r3, 80081c6 <__ascii_mbtowc+0x1e>
 80081b2:	7813      	ldrb	r3, [r2, #0]
 80081b4:	600b      	str	r3, [r1, #0]
 80081b6:	7812      	ldrb	r2, [r2, #0]
 80081b8:	1e10      	subs	r0, r2, #0
 80081ba:	bf18      	it	ne
 80081bc:	2001      	movne	r0, #1
 80081be:	b002      	add	sp, #8
 80081c0:	4770      	bx	lr
 80081c2:	4610      	mov	r0, r2
 80081c4:	e7fb      	b.n	80081be <__ascii_mbtowc+0x16>
 80081c6:	f06f 0001 	mvn.w	r0, #1
 80081ca:	e7f8      	b.n	80081be <__ascii_mbtowc+0x16>

080081cc <__malloc_lock>:
 80081cc:	4801      	ldr	r0, [pc, #4]	@ (80081d4 <__malloc_lock+0x8>)
 80081ce:	f7fe bd46 	b.w	8006c5e <__retarget_lock_acquire_recursive>
 80081d2:	bf00      	nop
 80081d4:	200006d8 	.word	0x200006d8

080081d8 <__malloc_unlock>:
 80081d8:	4801      	ldr	r0, [pc, #4]	@ (80081e0 <__malloc_unlock+0x8>)
 80081da:	f7fe bd41 	b.w	8006c60 <__retarget_lock_release_recursive>
 80081de:	bf00      	nop
 80081e0:	200006d8 	.word	0x200006d8

080081e4 <_Balloc>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	69c6      	ldr	r6, [r0, #28]
 80081e8:	4604      	mov	r4, r0
 80081ea:	460d      	mov	r5, r1
 80081ec:	b976      	cbnz	r6, 800820c <_Balloc+0x28>
 80081ee:	2010      	movs	r0, #16
 80081f0:	f7ff ff30 	bl	8008054 <malloc>
 80081f4:	4602      	mov	r2, r0
 80081f6:	61e0      	str	r0, [r4, #28]
 80081f8:	b920      	cbnz	r0, 8008204 <_Balloc+0x20>
 80081fa:	216b      	movs	r1, #107	@ 0x6b
 80081fc:	4b17      	ldr	r3, [pc, #92]	@ (800825c <_Balloc+0x78>)
 80081fe:	4818      	ldr	r0, [pc, #96]	@ (8008260 <_Balloc+0x7c>)
 8008200:	f000 ff48 	bl	8009094 <__assert_func>
 8008204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008208:	6006      	str	r6, [r0, #0]
 800820a:	60c6      	str	r6, [r0, #12]
 800820c:	69e6      	ldr	r6, [r4, #28]
 800820e:	68f3      	ldr	r3, [r6, #12]
 8008210:	b183      	cbz	r3, 8008234 <_Balloc+0x50>
 8008212:	69e3      	ldr	r3, [r4, #28]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800821a:	b9b8      	cbnz	r0, 800824c <_Balloc+0x68>
 800821c:	2101      	movs	r1, #1
 800821e:	fa01 f605 	lsl.w	r6, r1, r5
 8008222:	1d72      	adds	r2, r6, #5
 8008224:	4620      	mov	r0, r4
 8008226:	0092      	lsls	r2, r2, #2
 8008228:	f000 ff52 	bl	80090d0 <_calloc_r>
 800822c:	b160      	cbz	r0, 8008248 <_Balloc+0x64>
 800822e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008232:	e00e      	b.n	8008252 <_Balloc+0x6e>
 8008234:	2221      	movs	r2, #33	@ 0x21
 8008236:	2104      	movs	r1, #4
 8008238:	4620      	mov	r0, r4
 800823a:	f000 ff49 	bl	80090d0 <_calloc_r>
 800823e:	69e3      	ldr	r3, [r4, #28]
 8008240:	60f0      	str	r0, [r6, #12]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e4      	bne.n	8008212 <_Balloc+0x2e>
 8008248:	2000      	movs	r0, #0
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	6802      	ldr	r2, [r0, #0]
 800824e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008252:	2300      	movs	r3, #0
 8008254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008258:	e7f7      	b.n	800824a <_Balloc+0x66>
 800825a:	bf00      	nop
 800825c:	0800a7f6 	.word	0x0800a7f6
 8008260:	0800a8d6 	.word	0x0800a8d6

08008264 <_Bfree>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	69c6      	ldr	r6, [r0, #28]
 8008268:	4605      	mov	r5, r0
 800826a:	460c      	mov	r4, r1
 800826c:	b976      	cbnz	r6, 800828c <_Bfree+0x28>
 800826e:	2010      	movs	r0, #16
 8008270:	f7ff fef0 	bl	8008054 <malloc>
 8008274:	4602      	mov	r2, r0
 8008276:	61e8      	str	r0, [r5, #28]
 8008278:	b920      	cbnz	r0, 8008284 <_Bfree+0x20>
 800827a:	218f      	movs	r1, #143	@ 0x8f
 800827c:	4b08      	ldr	r3, [pc, #32]	@ (80082a0 <_Bfree+0x3c>)
 800827e:	4809      	ldr	r0, [pc, #36]	@ (80082a4 <_Bfree+0x40>)
 8008280:	f000 ff08 	bl	8009094 <__assert_func>
 8008284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008288:	6006      	str	r6, [r0, #0]
 800828a:	60c6      	str	r6, [r0, #12]
 800828c:	b13c      	cbz	r4, 800829e <_Bfree+0x3a>
 800828e:	69eb      	ldr	r3, [r5, #28]
 8008290:	6862      	ldr	r2, [r4, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008298:	6021      	str	r1, [r4, #0]
 800829a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	0800a7f6 	.word	0x0800a7f6
 80082a4:	0800a8d6 	.word	0x0800a8d6

080082a8 <__multadd>:
 80082a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ac:	4607      	mov	r7, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	461e      	mov	r6, r3
 80082b2:	2000      	movs	r0, #0
 80082b4:	690d      	ldr	r5, [r1, #16]
 80082b6:	f101 0c14 	add.w	ip, r1, #20
 80082ba:	f8dc 3000 	ldr.w	r3, [ip]
 80082be:	3001      	adds	r0, #1
 80082c0:	b299      	uxth	r1, r3
 80082c2:	fb02 6101 	mla	r1, r2, r1, r6
 80082c6:	0c1e      	lsrs	r6, r3, #16
 80082c8:	0c0b      	lsrs	r3, r1, #16
 80082ca:	fb02 3306 	mla	r3, r2, r6, r3
 80082ce:	b289      	uxth	r1, r1
 80082d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082d4:	4285      	cmp	r5, r0
 80082d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082da:	f84c 1b04 	str.w	r1, [ip], #4
 80082de:	dcec      	bgt.n	80082ba <__multadd+0x12>
 80082e0:	b30e      	cbz	r6, 8008326 <__multadd+0x7e>
 80082e2:	68a3      	ldr	r3, [r4, #8]
 80082e4:	42ab      	cmp	r3, r5
 80082e6:	dc19      	bgt.n	800831c <__multadd+0x74>
 80082e8:	6861      	ldr	r1, [r4, #4]
 80082ea:	4638      	mov	r0, r7
 80082ec:	3101      	adds	r1, #1
 80082ee:	f7ff ff79 	bl	80081e4 <_Balloc>
 80082f2:	4680      	mov	r8, r0
 80082f4:	b928      	cbnz	r0, 8008302 <__multadd+0x5a>
 80082f6:	4602      	mov	r2, r0
 80082f8:	21ba      	movs	r1, #186	@ 0xba
 80082fa:	4b0c      	ldr	r3, [pc, #48]	@ (800832c <__multadd+0x84>)
 80082fc:	480c      	ldr	r0, [pc, #48]	@ (8008330 <__multadd+0x88>)
 80082fe:	f000 fec9 	bl	8009094 <__assert_func>
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	f104 010c 	add.w	r1, r4, #12
 8008308:	3202      	adds	r2, #2
 800830a:	0092      	lsls	r2, r2, #2
 800830c:	300c      	adds	r0, #12
 800830e:	f7fe fcb6 	bl	8006c7e <memcpy>
 8008312:	4621      	mov	r1, r4
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff ffa5 	bl	8008264 <_Bfree>
 800831a:	4644      	mov	r4, r8
 800831c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008320:	3501      	adds	r5, #1
 8008322:	615e      	str	r6, [r3, #20]
 8008324:	6125      	str	r5, [r4, #16]
 8008326:	4620      	mov	r0, r4
 8008328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800832c:	0800a865 	.word	0x0800a865
 8008330:	0800a8d6 	.word	0x0800a8d6

08008334 <__s2b>:
 8008334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008338:	4615      	mov	r5, r2
 800833a:	2209      	movs	r2, #9
 800833c:	461f      	mov	r7, r3
 800833e:	3308      	adds	r3, #8
 8008340:	460c      	mov	r4, r1
 8008342:	fb93 f3f2 	sdiv	r3, r3, r2
 8008346:	4606      	mov	r6, r0
 8008348:	2201      	movs	r2, #1
 800834a:	2100      	movs	r1, #0
 800834c:	429a      	cmp	r2, r3
 800834e:	db09      	blt.n	8008364 <__s2b+0x30>
 8008350:	4630      	mov	r0, r6
 8008352:	f7ff ff47 	bl	80081e4 <_Balloc>
 8008356:	b940      	cbnz	r0, 800836a <__s2b+0x36>
 8008358:	4602      	mov	r2, r0
 800835a:	21d3      	movs	r1, #211	@ 0xd3
 800835c:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <__s2b+0x8c>)
 800835e:	4819      	ldr	r0, [pc, #100]	@ (80083c4 <__s2b+0x90>)
 8008360:	f000 fe98 	bl	8009094 <__assert_func>
 8008364:	0052      	lsls	r2, r2, #1
 8008366:	3101      	adds	r1, #1
 8008368:	e7f0      	b.n	800834c <__s2b+0x18>
 800836a:	9b08      	ldr	r3, [sp, #32]
 800836c:	2d09      	cmp	r5, #9
 800836e:	6143      	str	r3, [r0, #20]
 8008370:	f04f 0301 	mov.w	r3, #1
 8008374:	6103      	str	r3, [r0, #16]
 8008376:	dd16      	ble.n	80083a6 <__s2b+0x72>
 8008378:	f104 0909 	add.w	r9, r4, #9
 800837c:	46c8      	mov	r8, r9
 800837e:	442c      	add	r4, r5
 8008380:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008384:	4601      	mov	r1, r0
 8008386:	220a      	movs	r2, #10
 8008388:	4630      	mov	r0, r6
 800838a:	3b30      	subs	r3, #48	@ 0x30
 800838c:	f7ff ff8c 	bl	80082a8 <__multadd>
 8008390:	45a0      	cmp	r8, r4
 8008392:	d1f5      	bne.n	8008380 <__s2b+0x4c>
 8008394:	f1a5 0408 	sub.w	r4, r5, #8
 8008398:	444c      	add	r4, r9
 800839a:	1b2d      	subs	r5, r5, r4
 800839c:	1963      	adds	r3, r4, r5
 800839e:	42bb      	cmp	r3, r7
 80083a0:	db04      	blt.n	80083ac <__s2b+0x78>
 80083a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a6:	2509      	movs	r5, #9
 80083a8:	340a      	adds	r4, #10
 80083aa:	e7f6      	b.n	800839a <__s2b+0x66>
 80083ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80083b0:	4601      	mov	r1, r0
 80083b2:	220a      	movs	r2, #10
 80083b4:	4630      	mov	r0, r6
 80083b6:	3b30      	subs	r3, #48	@ 0x30
 80083b8:	f7ff ff76 	bl	80082a8 <__multadd>
 80083bc:	e7ee      	b.n	800839c <__s2b+0x68>
 80083be:	bf00      	nop
 80083c0:	0800a865 	.word	0x0800a865
 80083c4:	0800a8d6 	.word	0x0800a8d6

080083c8 <__hi0bits>:
 80083c8:	4603      	mov	r3, r0
 80083ca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083ce:	bf3a      	itte	cc
 80083d0:	0403      	lslcc	r3, r0, #16
 80083d2:	2010      	movcc	r0, #16
 80083d4:	2000      	movcs	r0, #0
 80083d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083da:	bf3c      	itt	cc
 80083dc:	021b      	lslcc	r3, r3, #8
 80083de:	3008      	addcc	r0, #8
 80083e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083e4:	bf3c      	itt	cc
 80083e6:	011b      	lslcc	r3, r3, #4
 80083e8:	3004      	addcc	r0, #4
 80083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ee:	bf3c      	itt	cc
 80083f0:	009b      	lslcc	r3, r3, #2
 80083f2:	3002      	addcc	r0, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	db05      	blt.n	8008404 <__hi0bits+0x3c>
 80083f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083fc:	f100 0001 	add.w	r0, r0, #1
 8008400:	bf08      	it	eq
 8008402:	2020      	moveq	r0, #32
 8008404:	4770      	bx	lr

08008406 <__lo0bits>:
 8008406:	6803      	ldr	r3, [r0, #0]
 8008408:	4602      	mov	r2, r0
 800840a:	f013 0007 	ands.w	r0, r3, #7
 800840e:	d00b      	beq.n	8008428 <__lo0bits+0x22>
 8008410:	07d9      	lsls	r1, r3, #31
 8008412:	d421      	bmi.n	8008458 <__lo0bits+0x52>
 8008414:	0798      	lsls	r0, r3, #30
 8008416:	bf49      	itett	mi
 8008418:	085b      	lsrmi	r3, r3, #1
 800841a:	089b      	lsrpl	r3, r3, #2
 800841c:	2001      	movmi	r0, #1
 800841e:	6013      	strmi	r3, [r2, #0]
 8008420:	bf5c      	itt	pl
 8008422:	2002      	movpl	r0, #2
 8008424:	6013      	strpl	r3, [r2, #0]
 8008426:	4770      	bx	lr
 8008428:	b299      	uxth	r1, r3
 800842a:	b909      	cbnz	r1, 8008430 <__lo0bits+0x2a>
 800842c:	2010      	movs	r0, #16
 800842e:	0c1b      	lsrs	r3, r3, #16
 8008430:	b2d9      	uxtb	r1, r3
 8008432:	b909      	cbnz	r1, 8008438 <__lo0bits+0x32>
 8008434:	3008      	adds	r0, #8
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	0719      	lsls	r1, r3, #28
 800843a:	bf04      	itt	eq
 800843c:	091b      	lsreq	r3, r3, #4
 800843e:	3004      	addeq	r0, #4
 8008440:	0799      	lsls	r1, r3, #30
 8008442:	bf04      	itt	eq
 8008444:	089b      	lsreq	r3, r3, #2
 8008446:	3002      	addeq	r0, #2
 8008448:	07d9      	lsls	r1, r3, #31
 800844a:	d403      	bmi.n	8008454 <__lo0bits+0x4e>
 800844c:	085b      	lsrs	r3, r3, #1
 800844e:	f100 0001 	add.w	r0, r0, #1
 8008452:	d003      	beq.n	800845c <__lo0bits+0x56>
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	4770      	bx	lr
 8008458:	2000      	movs	r0, #0
 800845a:	4770      	bx	lr
 800845c:	2020      	movs	r0, #32
 800845e:	4770      	bx	lr

08008460 <__i2b>:
 8008460:	b510      	push	{r4, lr}
 8008462:	460c      	mov	r4, r1
 8008464:	2101      	movs	r1, #1
 8008466:	f7ff febd 	bl	80081e4 <_Balloc>
 800846a:	4602      	mov	r2, r0
 800846c:	b928      	cbnz	r0, 800847a <__i2b+0x1a>
 800846e:	f240 1145 	movw	r1, #325	@ 0x145
 8008472:	4b04      	ldr	r3, [pc, #16]	@ (8008484 <__i2b+0x24>)
 8008474:	4804      	ldr	r0, [pc, #16]	@ (8008488 <__i2b+0x28>)
 8008476:	f000 fe0d 	bl	8009094 <__assert_func>
 800847a:	2301      	movs	r3, #1
 800847c:	6144      	str	r4, [r0, #20]
 800847e:	6103      	str	r3, [r0, #16]
 8008480:	bd10      	pop	{r4, pc}
 8008482:	bf00      	nop
 8008484:	0800a865 	.word	0x0800a865
 8008488:	0800a8d6 	.word	0x0800a8d6

0800848c <__multiply>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	4614      	mov	r4, r2
 8008492:	690a      	ldr	r2, [r1, #16]
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	460f      	mov	r7, r1
 8008498:	429a      	cmp	r2, r3
 800849a:	bfa2      	ittt	ge
 800849c:	4623      	movge	r3, r4
 800849e:	460c      	movge	r4, r1
 80084a0:	461f      	movge	r7, r3
 80084a2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	6861      	ldr	r1, [r4, #4]
 80084ae:	eb0a 0609 	add.w	r6, sl, r9
 80084b2:	42b3      	cmp	r3, r6
 80084b4:	b085      	sub	sp, #20
 80084b6:	bfb8      	it	lt
 80084b8:	3101      	addlt	r1, #1
 80084ba:	f7ff fe93 	bl	80081e4 <_Balloc>
 80084be:	b930      	cbnz	r0, 80084ce <__multiply+0x42>
 80084c0:	4602      	mov	r2, r0
 80084c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084c6:	4b43      	ldr	r3, [pc, #268]	@ (80085d4 <__multiply+0x148>)
 80084c8:	4843      	ldr	r0, [pc, #268]	@ (80085d8 <__multiply+0x14c>)
 80084ca:	f000 fde3 	bl	8009094 <__assert_func>
 80084ce:	f100 0514 	add.w	r5, r0, #20
 80084d2:	462b      	mov	r3, r5
 80084d4:	2200      	movs	r2, #0
 80084d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80084da:	4543      	cmp	r3, r8
 80084dc:	d321      	bcc.n	8008522 <__multiply+0x96>
 80084de:	f107 0114 	add.w	r1, r7, #20
 80084e2:	f104 0214 	add.w	r2, r4, #20
 80084e6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80084ea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80084ee:	9302      	str	r3, [sp, #8]
 80084f0:	1b13      	subs	r3, r2, r4
 80084f2:	3b15      	subs	r3, #21
 80084f4:	f023 0303 	bic.w	r3, r3, #3
 80084f8:	3304      	adds	r3, #4
 80084fa:	f104 0715 	add.w	r7, r4, #21
 80084fe:	42ba      	cmp	r2, r7
 8008500:	bf38      	it	cc
 8008502:	2304      	movcc	r3, #4
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	9b02      	ldr	r3, [sp, #8]
 8008508:	9103      	str	r1, [sp, #12]
 800850a:	428b      	cmp	r3, r1
 800850c:	d80c      	bhi.n	8008528 <__multiply+0x9c>
 800850e:	2e00      	cmp	r6, #0
 8008510:	dd03      	ble.n	800851a <__multiply+0x8e>
 8008512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05a      	beq.n	80085d0 <__multiply+0x144>
 800851a:	6106      	str	r6, [r0, #16]
 800851c:	b005      	add	sp, #20
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008522:	f843 2b04 	str.w	r2, [r3], #4
 8008526:	e7d8      	b.n	80084da <__multiply+0x4e>
 8008528:	f8b1 a000 	ldrh.w	sl, [r1]
 800852c:	f1ba 0f00 	cmp.w	sl, #0
 8008530:	d023      	beq.n	800857a <__multiply+0xee>
 8008532:	46a9      	mov	r9, r5
 8008534:	f04f 0c00 	mov.w	ip, #0
 8008538:	f104 0e14 	add.w	lr, r4, #20
 800853c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008540:	f8d9 3000 	ldr.w	r3, [r9]
 8008544:	fa1f fb87 	uxth.w	fp, r7
 8008548:	b29b      	uxth	r3, r3
 800854a:	fb0a 330b 	mla	r3, sl, fp, r3
 800854e:	4463      	add	r3, ip
 8008550:	f8d9 c000 	ldr.w	ip, [r9]
 8008554:	0c3f      	lsrs	r7, r7, #16
 8008556:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800855a:	fb0a c707 	mla	r7, sl, r7, ip
 800855e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008562:	b29b      	uxth	r3, r3
 8008564:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008568:	4572      	cmp	r2, lr
 800856a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800856e:	f849 3b04 	str.w	r3, [r9], #4
 8008572:	d8e3      	bhi.n	800853c <__multiply+0xb0>
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	f845 c003 	str.w	ip, [r5, r3]
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3104      	adds	r1, #4
 800857e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008582:	f1b9 0f00 	cmp.w	r9, #0
 8008586:	d021      	beq.n	80085cc <__multiply+0x140>
 8008588:	46ae      	mov	lr, r5
 800858a:	f04f 0a00 	mov.w	sl, #0
 800858e:	682b      	ldr	r3, [r5, #0]
 8008590:	f104 0c14 	add.w	ip, r4, #20
 8008594:	f8bc b000 	ldrh.w	fp, [ip]
 8008598:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800859c:	b29b      	uxth	r3, r3
 800859e:	fb09 770b 	mla	r7, r9, fp, r7
 80085a2:	4457      	add	r7, sl
 80085a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085a8:	f84e 3b04 	str.w	r3, [lr], #4
 80085ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085b4:	f8be 3000 	ldrh.w	r3, [lr]
 80085b8:	4562      	cmp	r2, ip
 80085ba:	fb09 330a 	mla	r3, r9, sl, r3
 80085be:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80085c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085c6:	d8e5      	bhi.n	8008594 <__multiply+0x108>
 80085c8:	9f01      	ldr	r7, [sp, #4]
 80085ca:	51eb      	str	r3, [r5, r7]
 80085cc:	3504      	adds	r5, #4
 80085ce:	e79a      	b.n	8008506 <__multiply+0x7a>
 80085d0:	3e01      	subs	r6, #1
 80085d2:	e79c      	b.n	800850e <__multiply+0x82>
 80085d4:	0800a865 	.word	0x0800a865
 80085d8:	0800a8d6 	.word	0x0800a8d6

080085dc <__pow5mult>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	4615      	mov	r5, r2
 80085e2:	f012 0203 	ands.w	r2, r2, #3
 80085e6:	4607      	mov	r7, r0
 80085e8:	460e      	mov	r6, r1
 80085ea:	d007      	beq.n	80085fc <__pow5mult+0x20>
 80085ec:	4c25      	ldr	r4, [pc, #148]	@ (8008684 <__pow5mult+0xa8>)
 80085ee:	3a01      	subs	r2, #1
 80085f0:	2300      	movs	r3, #0
 80085f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085f6:	f7ff fe57 	bl	80082a8 <__multadd>
 80085fa:	4606      	mov	r6, r0
 80085fc:	10ad      	asrs	r5, r5, #2
 80085fe:	d03d      	beq.n	800867c <__pow5mult+0xa0>
 8008600:	69fc      	ldr	r4, [r7, #28]
 8008602:	b97c      	cbnz	r4, 8008624 <__pow5mult+0x48>
 8008604:	2010      	movs	r0, #16
 8008606:	f7ff fd25 	bl	8008054 <malloc>
 800860a:	4602      	mov	r2, r0
 800860c:	61f8      	str	r0, [r7, #28]
 800860e:	b928      	cbnz	r0, 800861c <__pow5mult+0x40>
 8008610:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008614:	4b1c      	ldr	r3, [pc, #112]	@ (8008688 <__pow5mult+0xac>)
 8008616:	481d      	ldr	r0, [pc, #116]	@ (800868c <__pow5mult+0xb0>)
 8008618:	f000 fd3c 	bl	8009094 <__assert_func>
 800861c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008620:	6004      	str	r4, [r0, #0]
 8008622:	60c4      	str	r4, [r0, #12]
 8008624:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800862c:	b94c      	cbnz	r4, 8008642 <__pow5mult+0x66>
 800862e:	f240 2171 	movw	r1, #625	@ 0x271
 8008632:	4638      	mov	r0, r7
 8008634:	f7ff ff14 	bl	8008460 <__i2b>
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	f04f 0900 	mov.w	r9, #0
 8008646:	07eb      	lsls	r3, r5, #31
 8008648:	d50a      	bpl.n	8008660 <__pow5mult+0x84>
 800864a:	4631      	mov	r1, r6
 800864c:	4622      	mov	r2, r4
 800864e:	4638      	mov	r0, r7
 8008650:	f7ff ff1c 	bl	800848c <__multiply>
 8008654:	4680      	mov	r8, r0
 8008656:	4631      	mov	r1, r6
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff fe03 	bl	8008264 <_Bfree>
 800865e:	4646      	mov	r6, r8
 8008660:	106d      	asrs	r5, r5, #1
 8008662:	d00b      	beq.n	800867c <__pow5mult+0xa0>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	b938      	cbnz	r0, 8008678 <__pow5mult+0x9c>
 8008668:	4622      	mov	r2, r4
 800866a:	4621      	mov	r1, r4
 800866c:	4638      	mov	r0, r7
 800866e:	f7ff ff0d 	bl	800848c <__multiply>
 8008672:	6020      	str	r0, [r4, #0]
 8008674:	f8c0 9000 	str.w	r9, [r0]
 8008678:	4604      	mov	r4, r0
 800867a:	e7e4      	b.n	8008646 <__pow5mult+0x6a>
 800867c:	4630      	mov	r0, r6
 800867e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008682:	bf00      	nop
 8008684:	0800a930 	.word	0x0800a930
 8008688:	0800a7f6 	.word	0x0800a7f6
 800868c:	0800a8d6 	.word	0x0800a8d6

08008690 <__lshift>:
 8008690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	460c      	mov	r4, r1
 8008696:	4607      	mov	r7, r0
 8008698:	4691      	mov	r9, r2
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	6849      	ldr	r1, [r1, #4]
 800869e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086a8:	f108 0601 	add.w	r6, r8, #1
 80086ac:	42b3      	cmp	r3, r6
 80086ae:	db0b      	blt.n	80086c8 <__lshift+0x38>
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff fd97 	bl	80081e4 <_Balloc>
 80086b6:	4605      	mov	r5, r0
 80086b8:	b948      	cbnz	r0, 80086ce <__lshift+0x3e>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086c0:	4b27      	ldr	r3, [pc, #156]	@ (8008760 <__lshift+0xd0>)
 80086c2:	4828      	ldr	r0, [pc, #160]	@ (8008764 <__lshift+0xd4>)
 80086c4:	f000 fce6 	bl	8009094 <__assert_func>
 80086c8:	3101      	adds	r1, #1
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	e7ee      	b.n	80086ac <__lshift+0x1c>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f100 0114 	add.w	r1, r0, #20
 80086d4:	f100 0210 	add.w	r2, r0, #16
 80086d8:	4618      	mov	r0, r3
 80086da:	4553      	cmp	r3, sl
 80086dc:	db33      	blt.n	8008746 <__lshift+0xb6>
 80086de:	6920      	ldr	r0, [r4, #16]
 80086e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086e4:	f104 0314 	add.w	r3, r4, #20
 80086e8:	f019 091f 	ands.w	r9, r9, #31
 80086ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086f4:	d02b      	beq.n	800874e <__lshift+0xbe>
 80086f6:	468a      	mov	sl, r1
 80086f8:	2200      	movs	r2, #0
 80086fa:	f1c9 0e20 	rsb	lr, r9, #32
 80086fe:	6818      	ldr	r0, [r3, #0]
 8008700:	fa00 f009 	lsl.w	r0, r0, r9
 8008704:	4310      	orrs	r0, r2
 8008706:	f84a 0b04 	str.w	r0, [sl], #4
 800870a:	f853 2b04 	ldr.w	r2, [r3], #4
 800870e:	459c      	cmp	ip, r3
 8008710:	fa22 f20e 	lsr.w	r2, r2, lr
 8008714:	d8f3      	bhi.n	80086fe <__lshift+0x6e>
 8008716:	ebac 0304 	sub.w	r3, ip, r4
 800871a:	3b15      	subs	r3, #21
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	3304      	adds	r3, #4
 8008722:	f104 0015 	add.w	r0, r4, #21
 8008726:	4584      	cmp	ip, r0
 8008728:	bf38      	it	cc
 800872a:	2304      	movcc	r3, #4
 800872c:	50ca      	str	r2, [r1, r3]
 800872e:	b10a      	cbz	r2, 8008734 <__lshift+0xa4>
 8008730:	f108 0602 	add.w	r6, r8, #2
 8008734:	3e01      	subs	r6, #1
 8008736:	4638      	mov	r0, r7
 8008738:	4621      	mov	r1, r4
 800873a:	612e      	str	r6, [r5, #16]
 800873c:	f7ff fd92 	bl	8008264 <_Bfree>
 8008740:	4628      	mov	r0, r5
 8008742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008746:	f842 0f04 	str.w	r0, [r2, #4]!
 800874a:	3301      	adds	r3, #1
 800874c:	e7c5      	b.n	80086da <__lshift+0x4a>
 800874e:	3904      	subs	r1, #4
 8008750:	f853 2b04 	ldr.w	r2, [r3], #4
 8008754:	459c      	cmp	ip, r3
 8008756:	f841 2f04 	str.w	r2, [r1, #4]!
 800875a:	d8f9      	bhi.n	8008750 <__lshift+0xc0>
 800875c:	e7ea      	b.n	8008734 <__lshift+0xa4>
 800875e:	bf00      	nop
 8008760:	0800a865 	.word	0x0800a865
 8008764:	0800a8d6 	.word	0x0800a8d6

08008768 <__mcmp>:
 8008768:	4603      	mov	r3, r0
 800876a:	690a      	ldr	r2, [r1, #16]
 800876c:	6900      	ldr	r0, [r0, #16]
 800876e:	b530      	push	{r4, r5, lr}
 8008770:	1a80      	subs	r0, r0, r2
 8008772:	d10e      	bne.n	8008792 <__mcmp+0x2a>
 8008774:	3314      	adds	r3, #20
 8008776:	3114      	adds	r1, #20
 8008778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800877c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008788:	4295      	cmp	r5, r2
 800878a:	d003      	beq.n	8008794 <__mcmp+0x2c>
 800878c:	d205      	bcs.n	800879a <__mcmp+0x32>
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	bd30      	pop	{r4, r5, pc}
 8008794:	42a3      	cmp	r3, r4
 8008796:	d3f3      	bcc.n	8008780 <__mcmp+0x18>
 8008798:	e7fb      	b.n	8008792 <__mcmp+0x2a>
 800879a:	2001      	movs	r0, #1
 800879c:	e7f9      	b.n	8008792 <__mcmp+0x2a>
	...

080087a0 <__mdiff>:
 80087a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	4689      	mov	r9, r1
 80087a6:	4606      	mov	r6, r0
 80087a8:	4611      	mov	r1, r2
 80087aa:	4648      	mov	r0, r9
 80087ac:	4614      	mov	r4, r2
 80087ae:	f7ff ffdb 	bl	8008768 <__mcmp>
 80087b2:	1e05      	subs	r5, r0, #0
 80087b4:	d112      	bne.n	80087dc <__mdiff+0x3c>
 80087b6:	4629      	mov	r1, r5
 80087b8:	4630      	mov	r0, r6
 80087ba:	f7ff fd13 	bl	80081e4 <_Balloc>
 80087be:	4602      	mov	r2, r0
 80087c0:	b928      	cbnz	r0, 80087ce <__mdiff+0x2e>
 80087c2:	f240 2137 	movw	r1, #567	@ 0x237
 80087c6:	4b3e      	ldr	r3, [pc, #248]	@ (80088c0 <__mdiff+0x120>)
 80087c8:	483e      	ldr	r0, [pc, #248]	@ (80088c4 <__mdiff+0x124>)
 80087ca:	f000 fc63 	bl	8009094 <__assert_func>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80087d4:	4610      	mov	r0, r2
 80087d6:	b003      	add	sp, #12
 80087d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	bfbc      	itt	lt
 80087de:	464b      	movlt	r3, r9
 80087e0:	46a1      	movlt	r9, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087e8:	bfba      	itte	lt
 80087ea:	461c      	movlt	r4, r3
 80087ec:	2501      	movlt	r5, #1
 80087ee:	2500      	movge	r5, #0
 80087f0:	f7ff fcf8 	bl	80081e4 <_Balloc>
 80087f4:	4602      	mov	r2, r0
 80087f6:	b918      	cbnz	r0, 8008800 <__mdiff+0x60>
 80087f8:	f240 2145 	movw	r1, #581	@ 0x245
 80087fc:	4b30      	ldr	r3, [pc, #192]	@ (80088c0 <__mdiff+0x120>)
 80087fe:	e7e3      	b.n	80087c8 <__mdiff+0x28>
 8008800:	f100 0b14 	add.w	fp, r0, #20
 8008804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008808:	f109 0310 	add.w	r3, r9, #16
 800880c:	60c5      	str	r5, [r0, #12]
 800880e:	f04f 0c00 	mov.w	ip, #0
 8008812:	f109 0514 	add.w	r5, r9, #20
 8008816:	46d9      	mov	r9, fp
 8008818:	6926      	ldr	r6, [r4, #16]
 800881a:	f104 0e14 	add.w	lr, r4, #20
 800881e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008822:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800882e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008832:	b281      	uxth	r1, r0
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	fa1f f38a 	uxth.w	r3, sl
 800883a:	1a5b      	subs	r3, r3, r1
 800883c:	0c00      	lsrs	r0, r0, #16
 800883e:	4463      	add	r3, ip
 8008840:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008844:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008848:	b29b      	uxth	r3, r3
 800884a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800884e:	4576      	cmp	r6, lr
 8008850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008854:	f849 3b04 	str.w	r3, [r9], #4
 8008858:	d8e6      	bhi.n	8008828 <__mdiff+0x88>
 800885a:	1b33      	subs	r3, r6, r4
 800885c:	3b15      	subs	r3, #21
 800885e:	f023 0303 	bic.w	r3, r3, #3
 8008862:	3415      	adds	r4, #21
 8008864:	3304      	adds	r3, #4
 8008866:	42a6      	cmp	r6, r4
 8008868:	bf38      	it	cc
 800886a:	2304      	movcc	r3, #4
 800886c:	441d      	add	r5, r3
 800886e:	445b      	add	r3, fp
 8008870:	461e      	mov	r6, r3
 8008872:	462c      	mov	r4, r5
 8008874:	4544      	cmp	r4, r8
 8008876:	d30e      	bcc.n	8008896 <__mdiff+0xf6>
 8008878:	f108 0103 	add.w	r1, r8, #3
 800887c:	1b49      	subs	r1, r1, r5
 800887e:	f021 0103 	bic.w	r1, r1, #3
 8008882:	3d03      	subs	r5, #3
 8008884:	45a8      	cmp	r8, r5
 8008886:	bf38      	it	cc
 8008888:	2100      	movcc	r1, #0
 800888a:	440b      	add	r3, r1
 800888c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008890:	b199      	cbz	r1, 80088ba <__mdiff+0x11a>
 8008892:	6117      	str	r7, [r2, #16]
 8008894:	e79e      	b.n	80087d4 <__mdiff+0x34>
 8008896:	46e6      	mov	lr, ip
 8008898:	f854 1b04 	ldr.w	r1, [r4], #4
 800889c:	fa1f fc81 	uxth.w	ip, r1
 80088a0:	44f4      	add	ip, lr
 80088a2:	0c08      	lsrs	r0, r1, #16
 80088a4:	4471      	add	r1, lr
 80088a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088aa:	b289      	uxth	r1, r1
 80088ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088b4:	f846 1b04 	str.w	r1, [r6], #4
 80088b8:	e7dc      	b.n	8008874 <__mdiff+0xd4>
 80088ba:	3f01      	subs	r7, #1
 80088bc:	e7e6      	b.n	800888c <__mdiff+0xec>
 80088be:	bf00      	nop
 80088c0:	0800a865 	.word	0x0800a865
 80088c4:	0800a8d6 	.word	0x0800a8d6

080088c8 <__ulp>:
 80088c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008904 <__ulp+0x3c>)
 80088ca:	400b      	ands	r3, r1
 80088cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc08      	bgt.n	80088e6 <__ulp+0x1e>
 80088d4:	425b      	negs	r3, r3
 80088d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80088da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088de:	da04      	bge.n	80088ea <__ulp+0x22>
 80088e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80088e4:	4113      	asrs	r3, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	e008      	b.n	80088fc <__ulp+0x34>
 80088ea:	f1a2 0314 	sub.w	r3, r2, #20
 80088ee:	2b1e      	cmp	r3, #30
 80088f0:	bfd6      	itet	le
 80088f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80088f6:	2201      	movgt	r2, #1
 80088f8:	40da      	lsrle	r2, r3
 80088fa:	2300      	movs	r3, #0
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	7ff00000 	.word	0x7ff00000

08008908 <__b2d>:
 8008908:	6902      	ldr	r2, [r0, #16]
 800890a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890c:	f100 0614 	add.w	r6, r0, #20
 8008910:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008914:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008918:	4f1e      	ldr	r7, [pc, #120]	@ (8008994 <__b2d+0x8c>)
 800891a:	4620      	mov	r0, r4
 800891c:	f7ff fd54 	bl	80083c8 <__hi0bits>
 8008920:	4603      	mov	r3, r0
 8008922:	f1c0 0020 	rsb	r0, r0, #32
 8008926:	2b0a      	cmp	r3, #10
 8008928:	f1a2 0504 	sub.w	r5, r2, #4
 800892c:	6008      	str	r0, [r1, #0]
 800892e:	dc12      	bgt.n	8008956 <__b2d+0x4e>
 8008930:	42ae      	cmp	r6, r5
 8008932:	bf2c      	ite	cs
 8008934:	2200      	movcs	r2, #0
 8008936:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800893a:	f1c3 0c0b 	rsb	ip, r3, #11
 800893e:	3315      	adds	r3, #21
 8008940:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008944:	fa04 f303 	lsl.w	r3, r4, r3
 8008948:	fa22 f20c 	lsr.w	r2, r2, ip
 800894c:	ea4e 0107 	orr.w	r1, lr, r7
 8008950:	431a      	orrs	r2, r3
 8008952:	4610      	mov	r0, r2
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008956:	42ae      	cmp	r6, r5
 8008958:	bf36      	itet	cc
 800895a:	f1a2 0508 	subcc.w	r5, r2, #8
 800895e:	2200      	movcs	r2, #0
 8008960:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008964:	3b0b      	subs	r3, #11
 8008966:	d012      	beq.n	800898e <__b2d+0x86>
 8008968:	f1c3 0720 	rsb	r7, r3, #32
 800896c:	fa22 f107 	lsr.w	r1, r2, r7
 8008970:	409c      	lsls	r4, r3
 8008972:	430c      	orrs	r4, r1
 8008974:	42b5      	cmp	r5, r6
 8008976:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800897a:	bf94      	ite	ls
 800897c:	2400      	movls	r4, #0
 800897e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008982:	409a      	lsls	r2, r3
 8008984:	40fc      	lsrs	r4, r7
 8008986:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800898a:	4322      	orrs	r2, r4
 800898c:	e7e1      	b.n	8008952 <__b2d+0x4a>
 800898e:	ea44 0107 	orr.w	r1, r4, r7
 8008992:	e7de      	b.n	8008952 <__b2d+0x4a>
 8008994:	3ff00000 	.word	0x3ff00000

08008998 <__d2b>:
 8008998:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800899c:	2101      	movs	r1, #1
 800899e:	4690      	mov	r8, r2
 80089a0:	4699      	mov	r9, r3
 80089a2:	9e08      	ldr	r6, [sp, #32]
 80089a4:	f7ff fc1e 	bl	80081e4 <_Balloc>
 80089a8:	4604      	mov	r4, r0
 80089aa:	b930      	cbnz	r0, 80089ba <__d2b+0x22>
 80089ac:	4602      	mov	r2, r0
 80089ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80089b2:	4b23      	ldr	r3, [pc, #140]	@ (8008a40 <__d2b+0xa8>)
 80089b4:	4823      	ldr	r0, [pc, #140]	@ (8008a44 <__d2b+0xac>)
 80089b6:	f000 fb6d 	bl	8009094 <__assert_func>
 80089ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089c2:	b10d      	cbz	r5, 80089c8 <__d2b+0x30>
 80089c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	f1b8 0300 	subs.w	r3, r8, #0
 80089ce:	d024      	beq.n	8008a1a <__d2b+0x82>
 80089d0:	4668      	mov	r0, sp
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	f7ff fd17 	bl	8008406 <__lo0bits>
 80089d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089dc:	b1d8      	cbz	r0, 8008a16 <__d2b+0x7e>
 80089de:	f1c0 0320 	rsb	r3, r0, #32
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	430b      	orrs	r3, r1
 80089e8:	40c2      	lsrs	r2, r0
 80089ea:	6163      	str	r3, [r4, #20]
 80089ec:	9201      	str	r2, [sp, #4]
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	bf0c      	ite	eq
 80089f4:	2201      	moveq	r2, #1
 80089f6:	2202      	movne	r2, #2
 80089f8:	61a3      	str	r3, [r4, #24]
 80089fa:	6122      	str	r2, [r4, #16]
 80089fc:	b1ad      	cbz	r5, 8008a2a <__d2b+0x92>
 80089fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008a02:	4405      	add	r5, r0
 8008a04:	6035      	str	r5, [r6, #0]
 8008a06:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0c:	6018      	str	r0, [r3, #0]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	b002      	add	sp, #8
 8008a12:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008a16:	6161      	str	r1, [r4, #20]
 8008a18:	e7e9      	b.n	80089ee <__d2b+0x56>
 8008a1a:	a801      	add	r0, sp, #4
 8008a1c:	f7ff fcf3 	bl	8008406 <__lo0bits>
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	6163      	str	r3, [r4, #20]
 8008a26:	3020      	adds	r0, #32
 8008a28:	e7e7      	b.n	80089fa <__d2b+0x62>
 8008a2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008a2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a32:	6030      	str	r0, [r6, #0]
 8008a34:	6918      	ldr	r0, [r3, #16]
 8008a36:	f7ff fcc7 	bl	80083c8 <__hi0bits>
 8008a3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a3e:	e7e4      	b.n	8008a0a <__d2b+0x72>
 8008a40:	0800a865 	.word	0x0800a865
 8008a44:	0800a8d6 	.word	0x0800a8d6

08008a48 <__ratio>:
 8008a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	e9cd 1000 	strd	r1, r0, [sp]
 8008a52:	a902      	add	r1, sp, #8
 8008a54:	f7ff ff58 	bl	8008908 <__b2d>
 8008a58:	468b      	mov	fp, r1
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460f      	mov	r7, r1
 8008a5e:	9800      	ldr	r0, [sp, #0]
 8008a60:	a903      	add	r1, sp, #12
 8008a62:	f7ff ff51 	bl	8008908 <__b2d>
 8008a66:	460d      	mov	r5, r1
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	4689      	mov	r9, r1
 8008a6c:	6919      	ldr	r1, [r3, #16]
 8008a6e:	9b00      	ldr	r3, [sp, #0]
 8008a70:	4604      	mov	r4, r0
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	4630      	mov	r0, r6
 8008a76:	1ac9      	subs	r1, r1, r3
 8008a78:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	bfcd      	iteet	gt
 8008a86:	463a      	movgt	r2, r7
 8008a88:	462a      	movle	r2, r5
 8008a8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a8e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a92:	bfd8      	it	le
 8008a94:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	f7f7 fe45 	bl	800072c <__aeabi_ddiv>
 8008aa2:	b005      	add	sp, #20
 8008aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008aa8 <__copybits>:
 8008aa8:	3901      	subs	r1, #1
 8008aaa:	b570      	push	{r4, r5, r6, lr}
 8008aac:	1149      	asrs	r1, r1, #5
 8008aae:	6914      	ldr	r4, [r2, #16]
 8008ab0:	3101      	adds	r1, #1
 8008ab2:	f102 0314 	add.w	r3, r2, #20
 8008ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008aba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008abe:	1f05      	subs	r5, r0, #4
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	d30c      	bcc.n	8008ade <__copybits+0x36>
 8008ac4:	1aa3      	subs	r3, r4, r2
 8008ac6:	3b11      	subs	r3, #17
 8008ac8:	f023 0303 	bic.w	r3, r3, #3
 8008acc:	3211      	adds	r2, #17
 8008ace:	42a2      	cmp	r2, r4
 8008ad0:	bf88      	it	hi
 8008ad2:	2300      	movhi	r3, #0
 8008ad4:	4418      	add	r0, r3
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4288      	cmp	r0, r1
 8008ada:	d305      	bcc.n	8008ae8 <__copybits+0x40>
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ae2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ae6:	e7eb      	b.n	8008ac0 <__copybits+0x18>
 8008ae8:	f840 3b04 	str.w	r3, [r0], #4
 8008aec:	e7f4      	b.n	8008ad8 <__copybits+0x30>

08008aee <__any_on>:
 8008aee:	f100 0214 	add.w	r2, r0, #20
 8008af2:	6900      	ldr	r0, [r0, #16]
 8008af4:	114b      	asrs	r3, r1, #5
 8008af6:	4298      	cmp	r0, r3
 8008af8:	b510      	push	{r4, lr}
 8008afa:	db11      	blt.n	8008b20 <__any_on+0x32>
 8008afc:	dd0a      	ble.n	8008b14 <__any_on+0x26>
 8008afe:	f011 011f 	ands.w	r1, r1, #31
 8008b02:	d007      	beq.n	8008b14 <__any_on+0x26>
 8008b04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008b08:	fa24 f001 	lsr.w	r0, r4, r1
 8008b0c:	fa00 f101 	lsl.w	r1, r0, r1
 8008b10:	428c      	cmp	r4, r1
 8008b12:	d10b      	bne.n	8008b2c <__any_on+0x3e>
 8008b14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d803      	bhi.n	8008b24 <__any_on+0x36>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	bd10      	pop	{r4, pc}
 8008b20:	4603      	mov	r3, r0
 8008b22:	e7f7      	b.n	8008b14 <__any_on+0x26>
 8008b24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d0f5      	beq.n	8008b18 <__any_on+0x2a>
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	e7f6      	b.n	8008b1e <__any_on+0x30>

08008b30 <_strtol_l.constprop.0>:
 8008b30:	2b24      	cmp	r3, #36	@ 0x24
 8008b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b36:	4686      	mov	lr, r0
 8008b38:	4690      	mov	r8, r2
 8008b3a:	d801      	bhi.n	8008b40 <_strtol_l.constprop.0+0x10>
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d106      	bne.n	8008b4e <_strtol_l.constprop.0+0x1e>
 8008b40:	f7fe f862 	bl	8006c08 <__errno>
 8008b44:	2316      	movs	r3, #22
 8008b46:	6003      	str	r3, [r0, #0]
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4e:	460d      	mov	r5, r1
 8008b50:	4833      	ldr	r0, [pc, #204]	@ (8008c20 <_strtol_l.constprop.0+0xf0>)
 8008b52:	462a      	mov	r2, r5
 8008b54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b58:	5d06      	ldrb	r6, [r0, r4]
 8008b5a:	f016 0608 	ands.w	r6, r6, #8
 8008b5e:	d1f8      	bne.n	8008b52 <_strtol_l.constprop.0+0x22>
 8008b60:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b62:	d12d      	bne.n	8008bc0 <_strtol_l.constprop.0+0x90>
 8008b64:	2601      	movs	r6, #1
 8008b66:	782c      	ldrb	r4, [r5, #0]
 8008b68:	1c95      	adds	r5, r2, #2
 8008b6a:	f033 0210 	bics.w	r2, r3, #16
 8008b6e:	d109      	bne.n	8008b84 <_strtol_l.constprop.0+0x54>
 8008b70:	2c30      	cmp	r4, #48	@ 0x30
 8008b72:	d12a      	bne.n	8008bca <_strtol_l.constprop.0+0x9a>
 8008b74:	782a      	ldrb	r2, [r5, #0]
 8008b76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b7a:	2a58      	cmp	r2, #88	@ 0x58
 8008b7c:	d125      	bne.n	8008bca <_strtol_l.constprop.0+0x9a>
 8008b7e:	2310      	movs	r3, #16
 8008b80:	786c      	ldrb	r4, [r5, #1]
 8008b82:	3502      	adds	r5, #2
 8008b84:	2200      	movs	r2, #0
 8008b86:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b8a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b8e:	fbbc f9f3 	udiv	r9, ip, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b98:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008b9c:	2f09      	cmp	r7, #9
 8008b9e:	d81b      	bhi.n	8008bd8 <_strtol_l.constprop.0+0xa8>
 8008ba0:	463c      	mov	r4, r7
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	dd27      	ble.n	8008bf6 <_strtol_l.constprop.0+0xc6>
 8008ba6:	1c57      	adds	r7, r2, #1
 8008ba8:	d007      	beq.n	8008bba <_strtol_l.constprop.0+0x8a>
 8008baa:	4581      	cmp	r9, r0
 8008bac:	d320      	bcc.n	8008bf0 <_strtol_l.constprop.0+0xc0>
 8008bae:	d101      	bne.n	8008bb4 <_strtol_l.constprop.0+0x84>
 8008bb0:	45a2      	cmp	sl, r4
 8008bb2:	db1d      	blt.n	8008bf0 <_strtol_l.constprop.0+0xc0>
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	fb00 4003 	mla	r0, r0, r3, r4
 8008bba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bbe:	e7eb      	b.n	8008b98 <_strtol_l.constprop.0+0x68>
 8008bc0:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bc2:	bf04      	itt	eq
 8008bc4:	782c      	ldrbeq	r4, [r5, #0]
 8008bc6:	1c95      	addeq	r5, r2, #2
 8008bc8:	e7cf      	b.n	8008b6a <_strtol_l.constprop.0+0x3a>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1da      	bne.n	8008b84 <_strtol_l.constprop.0+0x54>
 8008bce:	2c30      	cmp	r4, #48	@ 0x30
 8008bd0:	bf0c      	ite	eq
 8008bd2:	2308      	moveq	r3, #8
 8008bd4:	230a      	movne	r3, #10
 8008bd6:	e7d5      	b.n	8008b84 <_strtol_l.constprop.0+0x54>
 8008bd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008bdc:	2f19      	cmp	r7, #25
 8008bde:	d801      	bhi.n	8008be4 <_strtol_l.constprop.0+0xb4>
 8008be0:	3c37      	subs	r4, #55	@ 0x37
 8008be2:	e7de      	b.n	8008ba2 <_strtol_l.constprop.0+0x72>
 8008be4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008be8:	2f19      	cmp	r7, #25
 8008bea:	d804      	bhi.n	8008bf6 <_strtol_l.constprop.0+0xc6>
 8008bec:	3c57      	subs	r4, #87	@ 0x57
 8008bee:	e7d8      	b.n	8008ba2 <_strtol_l.constprop.0+0x72>
 8008bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf4:	e7e1      	b.n	8008bba <_strtol_l.constprop.0+0x8a>
 8008bf6:	1c53      	adds	r3, r2, #1
 8008bf8:	d108      	bne.n	8008c0c <_strtol_l.constprop.0+0xdc>
 8008bfa:	2322      	movs	r3, #34	@ 0x22
 8008bfc:	4660      	mov	r0, ip
 8008bfe:	f8ce 3000 	str.w	r3, [lr]
 8008c02:	f1b8 0f00 	cmp.w	r8, #0
 8008c06:	d0a0      	beq.n	8008b4a <_strtol_l.constprop.0+0x1a>
 8008c08:	1e69      	subs	r1, r5, #1
 8008c0a:	e006      	b.n	8008c1a <_strtol_l.constprop.0+0xea>
 8008c0c:	b106      	cbz	r6, 8008c10 <_strtol_l.constprop.0+0xe0>
 8008c0e:	4240      	negs	r0, r0
 8008c10:	f1b8 0f00 	cmp.w	r8, #0
 8008c14:	d099      	beq.n	8008b4a <_strtol_l.constprop.0+0x1a>
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	d1f6      	bne.n	8008c08 <_strtol_l.constprop.0+0xd8>
 8008c1a:	f8c8 1000 	str.w	r1, [r8]
 8008c1e:	e794      	b.n	8008b4a <_strtol_l.constprop.0+0x1a>
 8008c20:	0800aa31 	.word	0x0800aa31

08008c24 <_strtol_r>:
 8008c24:	f7ff bf84 	b.w	8008b30 <_strtol_l.constprop.0>

08008c28 <__ascii_wctomb>:
 8008c28:	4603      	mov	r3, r0
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	b141      	cbz	r1, 8008c40 <__ascii_wctomb+0x18>
 8008c2e:	2aff      	cmp	r2, #255	@ 0xff
 8008c30:	d904      	bls.n	8008c3c <__ascii_wctomb+0x14>
 8008c32:	228a      	movs	r2, #138	@ 0x8a
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	4770      	bx	lr
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	700a      	strb	r2, [r1, #0]
 8008c40:	4770      	bx	lr

08008c42 <__ssputs_r>:
 8008c42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c46:	461f      	mov	r7, r3
 8008c48:	688e      	ldr	r6, [r1, #8]
 8008c4a:	4682      	mov	sl, r0
 8008c4c:	42be      	cmp	r6, r7
 8008c4e:	460c      	mov	r4, r1
 8008c50:	4690      	mov	r8, r2
 8008c52:	680b      	ldr	r3, [r1, #0]
 8008c54:	d82d      	bhi.n	8008cb2 <__ssputs_r+0x70>
 8008c56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c5e:	d026      	beq.n	8008cae <__ssputs_r+0x6c>
 8008c60:	6965      	ldr	r5, [r4, #20]
 8008c62:	6909      	ldr	r1, [r1, #16]
 8008c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c68:	eba3 0901 	sub.w	r9, r3, r1
 8008c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c70:	1c7b      	adds	r3, r7, #1
 8008c72:	444b      	add	r3, r9
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	429d      	cmp	r5, r3
 8008c78:	bf38      	it	cc
 8008c7a:	461d      	movcc	r5, r3
 8008c7c:	0553      	lsls	r3, r2, #21
 8008c7e:	d527      	bpl.n	8008cd0 <__ssputs_r+0x8e>
 8008c80:	4629      	mov	r1, r5
 8008c82:	f7ff fa11 	bl	80080a8 <_malloc_r>
 8008c86:	4606      	mov	r6, r0
 8008c88:	b360      	cbz	r0, 8008ce4 <__ssputs_r+0xa2>
 8008c8a:	464a      	mov	r2, r9
 8008c8c:	6921      	ldr	r1, [r4, #16]
 8008c8e:	f7fd fff6 	bl	8006c7e <memcpy>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9c:	81a3      	strh	r3, [r4, #12]
 8008c9e:	6126      	str	r6, [r4, #16]
 8008ca0:	444e      	add	r6, r9
 8008ca2:	6026      	str	r6, [r4, #0]
 8008ca4:	463e      	mov	r6, r7
 8008ca6:	6165      	str	r5, [r4, #20]
 8008ca8:	eba5 0509 	sub.w	r5, r5, r9
 8008cac:	60a5      	str	r5, [r4, #8]
 8008cae:	42be      	cmp	r6, r7
 8008cb0:	d900      	bls.n	8008cb4 <__ssputs_r+0x72>
 8008cb2:	463e      	mov	r6, r7
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	6820      	ldr	r0, [r4, #0]
 8008cba:	f000 f9c1 	bl	8009040 <memmove>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	68a3      	ldr	r3, [r4, #8]
 8008cc2:	1b9b      	subs	r3, r3, r6
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	4433      	add	r3, r6
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	f000 fa11 	bl	80090f8 <_realloc_r>
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d1e0      	bne.n	8008c9e <__ssputs_r+0x5c>
 8008cdc:	4650      	mov	r0, sl
 8008cde:	6921      	ldr	r1, [r4, #16]
 8008ce0:	f7fe fe36 	bl	8007950 <_free_r>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	f8ca 3000 	str.w	r3, [sl]
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7e9      	b.n	8008ccc <__ssputs_r+0x8a>

08008cf8 <_svfiprintf_r>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	4698      	mov	r8, r3
 8008cfe:	898b      	ldrh	r3, [r1, #12]
 8008d00:	4607      	mov	r7, r0
 8008d02:	061b      	lsls	r3, r3, #24
 8008d04:	460d      	mov	r5, r1
 8008d06:	4614      	mov	r4, r2
 8008d08:	b09d      	sub	sp, #116	@ 0x74
 8008d0a:	d510      	bpl.n	8008d2e <_svfiprintf_r+0x36>
 8008d0c:	690b      	ldr	r3, [r1, #16]
 8008d0e:	b973      	cbnz	r3, 8008d2e <_svfiprintf_r+0x36>
 8008d10:	2140      	movs	r1, #64	@ 0x40
 8008d12:	f7ff f9c9 	bl	80080a8 <_malloc_r>
 8008d16:	6028      	str	r0, [r5, #0]
 8008d18:	6128      	str	r0, [r5, #16]
 8008d1a:	b930      	cbnz	r0, 8008d2a <_svfiprintf_r+0x32>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	b01d      	add	sp, #116	@ 0x74
 8008d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2a:	2340      	movs	r3, #64	@ 0x40
 8008d2c:	616b      	str	r3, [r5, #20]
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d32:	2320      	movs	r3, #32
 8008d34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d38:	2330      	movs	r3, #48	@ 0x30
 8008d3a:	f04f 0901 	mov.w	r9, #1
 8008d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008edc <_svfiprintf_r+0x1e4>
 8008d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	469a      	mov	sl, r3
 8008d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d52:	b10a      	cbz	r2, 8008d58 <_svfiprintf_r+0x60>
 8008d54:	2a25      	cmp	r2, #37	@ 0x25
 8008d56:	d1f9      	bne.n	8008d4c <_svfiprintf_r+0x54>
 8008d58:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5c:	d00b      	beq.n	8008d76 <_svfiprintf_r+0x7e>
 8008d5e:	465b      	mov	r3, fp
 8008d60:	4622      	mov	r2, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	4638      	mov	r0, r7
 8008d66:	f7ff ff6c 	bl	8008c42 <__ssputs_r>
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f000 80a7 	beq.w	8008ebe <_svfiprintf_r+0x1c6>
 8008d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d72:	445a      	add	r2, fp
 8008d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d76:	f89a 3000 	ldrb.w	r3, [sl]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 809f 	beq.w	8008ebe <_svfiprintf_r+0x1c6>
 8008d80:	2300      	movs	r3, #0
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295
 8008d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d8a:	f10a 0a01 	add.w	sl, sl, #1
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d98:	4654      	mov	r4, sl
 8008d9a:	2205      	movs	r2, #5
 8008d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da0:	484e      	ldr	r0, [pc, #312]	@ (8008edc <_svfiprintf_r+0x1e4>)
 8008da2:	f7fd ff5e 	bl	8006c62 <memchr>
 8008da6:	9a04      	ldr	r2, [sp, #16]
 8008da8:	b9d8      	cbnz	r0, 8008de2 <_svfiprintf_r+0xea>
 8008daa:	06d0      	lsls	r0, r2, #27
 8008dac:	bf44      	itt	mi
 8008dae:	2320      	movmi	r3, #32
 8008db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db4:	0711      	lsls	r1, r2, #28
 8008db6:	bf44      	itt	mi
 8008db8:	232b      	movmi	r3, #43	@ 0x2b
 8008dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc4:	d015      	beq.n	8008df2 <_svfiprintf_r+0xfa>
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f04f 0c0a 	mov.w	ip, #10
 8008dce:	9a07      	ldr	r2, [sp, #28]
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd6:	3b30      	subs	r3, #48	@ 0x30
 8008dd8:	2b09      	cmp	r3, #9
 8008dda:	d94b      	bls.n	8008e74 <_svfiprintf_r+0x17c>
 8008ddc:	b1b0      	cbz	r0, 8008e0c <_svfiprintf_r+0x114>
 8008dde:	9207      	str	r2, [sp, #28]
 8008de0:	e014      	b.n	8008e0c <_svfiprintf_r+0x114>
 8008de2:	eba0 0308 	sub.w	r3, r0, r8
 8008de6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dea:	4313      	orrs	r3, r2
 8008dec:	46a2      	mov	sl, r4
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	e7d2      	b.n	8008d98 <_svfiprintf_r+0xa0>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	1d19      	adds	r1, r3, #4
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	9103      	str	r1, [sp, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bfbb      	ittet	lt
 8008dfe:	425b      	neglt	r3, r3
 8008e00:	f042 0202 	orrlt.w	r2, r2, #2
 8008e04:	9307      	strge	r3, [sp, #28]
 8008e06:	9307      	strlt	r3, [sp, #28]
 8008e08:	bfb8      	it	lt
 8008e0a:	9204      	strlt	r2, [sp, #16]
 8008e0c:	7823      	ldrb	r3, [r4, #0]
 8008e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e10:	d10a      	bne.n	8008e28 <_svfiprintf_r+0x130>
 8008e12:	7863      	ldrb	r3, [r4, #1]
 8008e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e16:	d132      	bne.n	8008e7e <_svfiprintf_r+0x186>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	3402      	adds	r4, #2
 8008e1c:	1d1a      	adds	r2, r3, #4
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	9203      	str	r2, [sp, #12]
 8008e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008ee0 <_svfiprintf_r+0x1e8>
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	4650      	mov	r0, sl
 8008e30:	7821      	ldrb	r1, [r4, #0]
 8008e32:	f7fd ff16 	bl	8006c62 <memchr>
 8008e36:	b138      	cbz	r0, 8008e48 <_svfiprintf_r+0x150>
 8008e38:	2240      	movs	r2, #64	@ 0x40
 8008e3a:	9b04      	ldr	r3, [sp, #16]
 8008e3c:	eba0 000a 	sub.w	r0, r0, sl
 8008e40:	4082      	lsls	r2, r0
 8008e42:	4313      	orrs	r3, r2
 8008e44:	3401      	adds	r4, #1
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4c:	2206      	movs	r2, #6
 8008e4e:	4825      	ldr	r0, [pc, #148]	@ (8008ee4 <_svfiprintf_r+0x1ec>)
 8008e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e54:	f7fd ff05 	bl	8006c62 <memchr>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d036      	beq.n	8008eca <_svfiprintf_r+0x1d2>
 8008e5c:	4b22      	ldr	r3, [pc, #136]	@ (8008ee8 <_svfiprintf_r+0x1f0>)
 8008e5e:	bb1b      	cbnz	r3, 8008ea8 <_svfiprintf_r+0x1b0>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	3307      	adds	r3, #7
 8008e64:	f023 0307 	bic.w	r3, r3, #7
 8008e68:	3308      	adds	r3, #8
 8008e6a:	9303      	str	r3, [sp, #12]
 8008e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6e:	4433      	add	r3, r6
 8008e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e72:	e76a      	b.n	8008d4a <_svfiprintf_r+0x52>
 8008e74:	460c      	mov	r4, r1
 8008e76:	2001      	movs	r0, #1
 8008e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e7c:	e7a8      	b.n	8008dd0 <_svfiprintf_r+0xd8>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f04f 0c0a 	mov.w	ip, #10
 8008e84:	4619      	mov	r1, r3
 8008e86:	3401      	adds	r4, #1
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e90:	3a30      	subs	r2, #48	@ 0x30
 8008e92:	2a09      	cmp	r2, #9
 8008e94:	d903      	bls.n	8008e9e <_svfiprintf_r+0x1a6>
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0c6      	beq.n	8008e28 <_svfiprintf_r+0x130>
 8008e9a:	9105      	str	r1, [sp, #20]
 8008e9c:	e7c4      	b.n	8008e28 <_svfiprintf_r+0x130>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea6:	e7f0      	b.n	8008e8a <_svfiprintf_r+0x192>
 8008ea8:	ab03      	add	r3, sp, #12
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	462a      	mov	r2, r5
 8008eae:	4638      	mov	r0, r7
 8008eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8008eec <_svfiprintf_r+0x1f4>)
 8008eb2:	a904      	add	r1, sp, #16
 8008eb4:	f7fc ff50 	bl	8005d58 <_printf_float>
 8008eb8:	1c42      	adds	r2, r0, #1
 8008eba:	4606      	mov	r6, r0
 8008ebc:	d1d6      	bne.n	8008e6c <_svfiprintf_r+0x174>
 8008ebe:	89ab      	ldrh	r3, [r5, #12]
 8008ec0:	065b      	lsls	r3, r3, #25
 8008ec2:	f53f af2d 	bmi.w	8008d20 <_svfiprintf_r+0x28>
 8008ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ec8:	e72c      	b.n	8008d24 <_svfiprintf_r+0x2c>
 8008eca:	ab03      	add	r3, sp, #12
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	462a      	mov	r2, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <_svfiprintf_r+0x1f4>)
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	f7fd f9dd 	bl	8006294 <_printf_i>
 8008eda:	e7ed      	b.n	8008eb8 <_svfiprintf_r+0x1c0>
 8008edc:	0800ab31 	.word	0x0800ab31
 8008ee0:	0800ab37 	.word	0x0800ab37
 8008ee4:	0800ab3b 	.word	0x0800ab3b
 8008ee8:	08005d59 	.word	0x08005d59
 8008eec:	08008c43 	.word	0x08008c43

08008ef0 <__sflush_r>:
 8008ef0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	0716      	lsls	r6, r2, #28
 8008ef8:	4605      	mov	r5, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	d454      	bmi.n	8008fa8 <__sflush_r+0xb8>
 8008efe:	684b      	ldr	r3, [r1, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dc02      	bgt.n	8008f0a <__sflush_r+0x1a>
 8008f04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd48      	ble.n	8008f9c <__sflush_r+0xac>
 8008f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f0c:	2e00      	cmp	r6, #0
 8008f0e:	d045      	beq.n	8008f9c <__sflush_r+0xac>
 8008f10:	2300      	movs	r3, #0
 8008f12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f16:	682f      	ldr	r7, [r5, #0]
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	602b      	str	r3, [r5, #0]
 8008f1c:	d030      	beq.n	8008f80 <__sflush_r+0x90>
 8008f1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	0759      	lsls	r1, r3, #29
 8008f24:	d505      	bpl.n	8008f32 <__sflush_r+0x42>
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	1ad2      	subs	r2, r2, r3
 8008f2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f2c:	b10b      	cbz	r3, 8008f32 <__sflush_r+0x42>
 8008f2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	2300      	movs	r3, #0
 8008f34:	4628      	mov	r0, r5
 8008f36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f38:	6a21      	ldr	r1, [r4, #32]
 8008f3a:	47b0      	blx	r6
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	d106      	bne.n	8008f50 <__sflush_r+0x60>
 8008f42:	6829      	ldr	r1, [r5, #0]
 8008f44:	291d      	cmp	r1, #29
 8008f46:	d82b      	bhi.n	8008fa0 <__sflush_r+0xb0>
 8008f48:	4a28      	ldr	r2, [pc, #160]	@ (8008fec <__sflush_r+0xfc>)
 8008f4a:	410a      	asrs	r2, r1
 8008f4c:	07d6      	lsls	r6, r2, #31
 8008f4e:	d427      	bmi.n	8008fa0 <__sflush_r+0xb0>
 8008f50:	2200      	movs	r2, #0
 8008f52:	6062      	str	r2, [r4, #4]
 8008f54:	6922      	ldr	r2, [r4, #16]
 8008f56:	04d9      	lsls	r1, r3, #19
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	d504      	bpl.n	8008f66 <__sflush_r+0x76>
 8008f5c:	1c42      	adds	r2, r0, #1
 8008f5e:	d101      	bne.n	8008f64 <__sflush_r+0x74>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	b903      	cbnz	r3, 8008f66 <__sflush_r+0x76>
 8008f64:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f68:	602f      	str	r7, [r5, #0]
 8008f6a:	b1b9      	cbz	r1, 8008f9c <__sflush_r+0xac>
 8008f6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f70:	4299      	cmp	r1, r3
 8008f72:	d002      	beq.n	8008f7a <__sflush_r+0x8a>
 8008f74:	4628      	mov	r0, r5
 8008f76:	f7fe fceb 	bl	8007950 <_free_r>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f7e:	e00d      	b.n	8008f9c <__sflush_r+0xac>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b0      	blx	r6
 8008f86:	4602      	mov	r2, r0
 8008f88:	1c50      	adds	r0, r2, #1
 8008f8a:	d1c9      	bne.n	8008f20 <__sflush_r+0x30>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c6      	beq.n	8008f20 <__sflush_r+0x30>
 8008f92:	2b1d      	cmp	r3, #29
 8008f94:	d001      	beq.n	8008f9a <__sflush_r+0xaa>
 8008f96:	2b16      	cmp	r3, #22
 8008f98:	d11d      	bne.n	8008fd6 <__sflush_r+0xe6>
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e021      	b.n	8008fe4 <__sflush_r+0xf4>
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	e01a      	b.n	8008fde <__sflush_r+0xee>
 8008fa8:	690f      	ldr	r7, [r1, #16]
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d0f6      	beq.n	8008f9c <__sflush_r+0xac>
 8008fae:	0793      	lsls	r3, r2, #30
 8008fb0:	bf18      	it	ne
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	680e      	ldr	r6, [r1, #0]
 8008fb6:	bf08      	it	eq
 8008fb8:	694b      	ldreq	r3, [r1, #20]
 8008fba:	1bf6      	subs	r6, r6, r7
 8008fbc:	600f      	str	r7, [r1, #0]
 8008fbe:	608b      	str	r3, [r1, #8]
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	ddeb      	ble.n	8008f9c <__sflush_r+0xac>
 8008fc4:	4633      	mov	r3, r6
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4628      	mov	r0, r5
 8008fca:	6a21      	ldr	r1, [r4, #32]
 8008fcc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008fd0:	47e0      	blx	ip
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dc07      	bgt.n	8008fe6 <__sflush_r+0xf6>
 8008fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe6:	4407      	add	r7, r0
 8008fe8:	1a36      	subs	r6, r6, r0
 8008fea:	e7e9      	b.n	8008fc0 <__sflush_r+0xd0>
 8008fec:	dfbffffe 	.word	0xdfbffffe

08008ff0 <_fflush_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	690b      	ldr	r3, [r1, #16]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b913      	cbnz	r3, 8009000 <_fflush_r+0x10>
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	b118      	cbz	r0, 800900a <_fflush_r+0x1a>
 8009002:	6a03      	ldr	r3, [r0, #32]
 8009004:	b90b      	cbnz	r3, 800900a <_fflush_r+0x1a>
 8009006:	f7fd fd01 	bl	8006a0c <__sinit>
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0f3      	beq.n	8008ffa <_fflush_r+0xa>
 8009012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009014:	07d0      	lsls	r0, r2, #31
 8009016:	d404      	bmi.n	8009022 <_fflush_r+0x32>
 8009018:	0599      	lsls	r1, r3, #22
 800901a:	d402      	bmi.n	8009022 <_fflush_r+0x32>
 800901c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800901e:	f7fd fe1e 	bl	8006c5e <__retarget_lock_acquire_recursive>
 8009022:	4628      	mov	r0, r5
 8009024:	4621      	mov	r1, r4
 8009026:	f7ff ff63 	bl	8008ef0 <__sflush_r>
 800902a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800902c:	4605      	mov	r5, r0
 800902e:	07da      	lsls	r2, r3, #31
 8009030:	d4e4      	bmi.n	8008ffc <_fflush_r+0xc>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	059b      	lsls	r3, r3, #22
 8009036:	d4e1      	bmi.n	8008ffc <_fflush_r+0xc>
 8009038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800903a:	f7fd fe11 	bl	8006c60 <__retarget_lock_release_recursive>
 800903e:	e7dd      	b.n	8008ffc <_fflush_r+0xc>

08009040 <memmove>:
 8009040:	4288      	cmp	r0, r1
 8009042:	b510      	push	{r4, lr}
 8009044:	eb01 0402 	add.w	r4, r1, r2
 8009048:	d902      	bls.n	8009050 <memmove+0x10>
 800904a:	4284      	cmp	r4, r0
 800904c:	4623      	mov	r3, r4
 800904e:	d807      	bhi.n	8009060 <memmove+0x20>
 8009050:	1e43      	subs	r3, r0, #1
 8009052:	42a1      	cmp	r1, r4
 8009054:	d008      	beq.n	8009068 <memmove+0x28>
 8009056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800905a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800905e:	e7f8      	b.n	8009052 <memmove+0x12>
 8009060:	4601      	mov	r1, r0
 8009062:	4402      	add	r2, r0
 8009064:	428a      	cmp	r2, r1
 8009066:	d100      	bne.n	800906a <memmove+0x2a>
 8009068:	bd10      	pop	{r4, pc}
 800906a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800906e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009072:	e7f7      	b.n	8009064 <memmove+0x24>

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	2300      	movs	r3, #0
 8009078:	4d05      	ldr	r5, [pc, #20]	@ (8009090 <_sbrk_r+0x1c>)
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7f9 f97e 	bl	8002380 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	200006d4 	.word	0x200006d4

08009094 <__assert_func>:
 8009094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009096:	4614      	mov	r4, r2
 8009098:	461a      	mov	r2, r3
 800909a:	4b09      	ldr	r3, [pc, #36]	@ (80090c0 <__assert_func+0x2c>)
 800909c:	4605      	mov	r5, r0
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68d8      	ldr	r0, [r3, #12]
 80090a2:	b954      	cbnz	r4, 80090ba <__assert_func+0x26>
 80090a4:	4b07      	ldr	r3, [pc, #28]	@ (80090c4 <__assert_func+0x30>)
 80090a6:	461c      	mov	r4, r3
 80090a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090ac:	9100      	str	r1, [sp, #0]
 80090ae:	462b      	mov	r3, r5
 80090b0:	4905      	ldr	r1, [pc, #20]	@ (80090c8 <__assert_func+0x34>)
 80090b2:	f000 f84f 	bl	8009154 <fiprintf>
 80090b6:	f000 f85f 	bl	8009178 <abort>
 80090ba:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <__assert_func+0x38>)
 80090bc:	e7f4      	b.n	80090a8 <__assert_func+0x14>
 80090be:	bf00      	nop
 80090c0:	20000184 	.word	0x20000184
 80090c4:	0800ab7d 	.word	0x0800ab7d
 80090c8:	0800ab4f 	.word	0x0800ab4f
 80090cc:	0800ab42 	.word	0x0800ab42

080090d0 <_calloc_r>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	fba1 5402 	umull	r5, r4, r1, r2
 80090d6:	b93c      	cbnz	r4, 80090e8 <_calloc_r+0x18>
 80090d8:	4629      	mov	r1, r5
 80090da:	f7fe ffe5 	bl	80080a8 <_malloc_r>
 80090de:	4606      	mov	r6, r0
 80090e0:	b928      	cbnz	r0, 80090ee <_calloc_r+0x1e>
 80090e2:	2600      	movs	r6, #0
 80090e4:	4630      	mov	r0, r6
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	220c      	movs	r2, #12
 80090ea:	6002      	str	r2, [r0, #0]
 80090ec:	e7f9      	b.n	80090e2 <_calloc_r+0x12>
 80090ee:	462a      	mov	r2, r5
 80090f0:	4621      	mov	r1, r4
 80090f2:	f7fd fd24 	bl	8006b3e <memset>
 80090f6:	e7f5      	b.n	80090e4 <_calloc_r+0x14>

080090f8 <_realloc_r>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	4680      	mov	r8, r0
 80090fe:	4615      	mov	r5, r2
 8009100:	460c      	mov	r4, r1
 8009102:	b921      	cbnz	r1, 800910e <_realloc_r+0x16>
 8009104:	4611      	mov	r1, r2
 8009106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800910a:	f7fe bfcd 	b.w	80080a8 <_malloc_r>
 800910e:	b92a      	cbnz	r2, 800911c <_realloc_r+0x24>
 8009110:	f7fe fc1e 	bl	8007950 <_free_r>
 8009114:	2400      	movs	r4, #0
 8009116:	4620      	mov	r0, r4
 8009118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911c:	f000 f833 	bl	8009186 <_malloc_usable_size_r>
 8009120:	4285      	cmp	r5, r0
 8009122:	4606      	mov	r6, r0
 8009124:	d802      	bhi.n	800912c <_realloc_r+0x34>
 8009126:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800912a:	d8f4      	bhi.n	8009116 <_realloc_r+0x1e>
 800912c:	4629      	mov	r1, r5
 800912e:	4640      	mov	r0, r8
 8009130:	f7fe ffba 	bl	80080a8 <_malloc_r>
 8009134:	4607      	mov	r7, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	d0ec      	beq.n	8009114 <_realloc_r+0x1c>
 800913a:	42b5      	cmp	r5, r6
 800913c:	462a      	mov	r2, r5
 800913e:	4621      	mov	r1, r4
 8009140:	bf28      	it	cs
 8009142:	4632      	movcs	r2, r6
 8009144:	f7fd fd9b 	bl	8006c7e <memcpy>
 8009148:	4621      	mov	r1, r4
 800914a:	4640      	mov	r0, r8
 800914c:	f7fe fc00 	bl	8007950 <_free_r>
 8009150:	463c      	mov	r4, r7
 8009152:	e7e0      	b.n	8009116 <_realloc_r+0x1e>

08009154 <fiprintf>:
 8009154:	b40e      	push	{r1, r2, r3}
 8009156:	b503      	push	{r0, r1, lr}
 8009158:	4601      	mov	r1, r0
 800915a:	ab03      	add	r3, sp, #12
 800915c:	4805      	ldr	r0, [pc, #20]	@ (8009174 <fiprintf+0x20>)
 800915e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009162:	6800      	ldr	r0, [r0, #0]
 8009164:	9301      	str	r3, [sp, #4]
 8009166:	f000 f83d 	bl	80091e4 <_vfiprintf_r>
 800916a:	b002      	add	sp, #8
 800916c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009170:	b003      	add	sp, #12
 8009172:	4770      	bx	lr
 8009174:	20000184 	.word	0x20000184

08009178 <abort>:
 8009178:	2006      	movs	r0, #6
 800917a:	b508      	push	{r3, lr}
 800917c:	f000 fa06 	bl	800958c <raise>
 8009180:	2001      	movs	r0, #1
 8009182:	f7f9 f888 	bl	8002296 <_exit>

08009186 <_malloc_usable_size_r>:
 8009186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800918a:	1f18      	subs	r0, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfbc      	itt	lt
 8009190:	580b      	ldrlt	r3, [r1, r0]
 8009192:	18c0      	addlt	r0, r0, r3
 8009194:	4770      	bx	lr

08009196 <__sfputc_r>:
 8009196:	6893      	ldr	r3, [r2, #8]
 8009198:	b410      	push	{r4}
 800919a:	3b01      	subs	r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	6093      	str	r3, [r2, #8]
 80091a0:	da07      	bge.n	80091b2 <__sfputc_r+0x1c>
 80091a2:	6994      	ldr	r4, [r2, #24]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	db01      	blt.n	80091ac <__sfputc_r+0x16>
 80091a8:	290a      	cmp	r1, #10
 80091aa:	d102      	bne.n	80091b2 <__sfputc_r+0x1c>
 80091ac:	bc10      	pop	{r4}
 80091ae:	f000 b931 	b.w	8009414 <__swbuf_r>
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	1c58      	adds	r0, r3, #1
 80091b6:	6010      	str	r0, [r2, #0]
 80091b8:	7019      	strb	r1, [r3, #0]
 80091ba:	4608      	mov	r0, r1
 80091bc:	bc10      	pop	{r4}
 80091be:	4770      	bx	lr

080091c0 <__sfputs_r>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	4614      	mov	r4, r2
 80091c8:	18d5      	adds	r5, r2, r3
 80091ca:	42ac      	cmp	r4, r5
 80091cc:	d101      	bne.n	80091d2 <__sfputs_r+0x12>
 80091ce:	2000      	movs	r0, #0
 80091d0:	e007      	b.n	80091e2 <__sfputs_r+0x22>
 80091d2:	463a      	mov	r2, r7
 80091d4:	4630      	mov	r0, r6
 80091d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091da:	f7ff ffdc 	bl	8009196 <__sfputc_r>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d1f3      	bne.n	80091ca <__sfputs_r+0xa>
 80091e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091e4 <_vfiprintf_r>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	460d      	mov	r5, r1
 80091ea:	4614      	mov	r4, r2
 80091ec:	4698      	mov	r8, r3
 80091ee:	4606      	mov	r6, r0
 80091f0:	b09d      	sub	sp, #116	@ 0x74
 80091f2:	b118      	cbz	r0, 80091fc <_vfiprintf_r+0x18>
 80091f4:	6a03      	ldr	r3, [r0, #32]
 80091f6:	b90b      	cbnz	r3, 80091fc <_vfiprintf_r+0x18>
 80091f8:	f7fd fc08 	bl	8006a0c <__sinit>
 80091fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091fe:	07d9      	lsls	r1, r3, #31
 8009200:	d405      	bmi.n	800920e <_vfiprintf_r+0x2a>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	059a      	lsls	r2, r3, #22
 8009206:	d402      	bmi.n	800920e <_vfiprintf_r+0x2a>
 8009208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800920a:	f7fd fd28 	bl	8006c5e <__retarget_lock_acquire_recursive>
 800920e:	89ab      	ldrh	r3, [r5, #12]
 8009210:	071b      	lsls	r3, r3, #28
 8009212:	d501      	bpl.n	8009218 <_vfiprintf_r+0x34>
 8009214:	692b      	ldr	r3, [r5, #16]
 8009216:	b99b      	cbnz	r3, 8009240 <_vfiprintf_r+0x5c>
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f000 f938 	bl	8009490 <__swsetup_r>
 8009220:	b170      	cbz	r0, 8009240 <_vfiprintf_r+0x5c>
 8009222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009224:	07dc      	lsls	r4, r3, #31
 8009226:	d504      	bpl.n	8009232 <_vfiprintf_r+0x4e>
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	b01d      	add	sp, #116	@ 0x74
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	0598      	lsls	r0, r3, #22
 8009236:	d4f7      	bmi.n	8009228 <_vfiprintf_r+0x44>
 8009238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800923a:	f7fd fd11 	bl	8006c60 <__retarget_lock_release_recursive>
 800923e:	e7f3      	b.n	8009228 <_vfiprintf_r+0x44>
 8009240:	2300      	movs	r3, #0
 8009242:	9309      	str	r3, [sp, #36]	@ 0x24
 8009244:	2320      	movs	r3, #32
 8009246:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800924a:	2330      	movs	r3, #48	@ 0x30
 800924c:	f04f 0901 	mov.w	r9, #1
 8009250:	f8cd 800c 	str.w	r8, [sp, #12]
 8009254:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009400 <_vfiprintf_r+0x21c>
 8009258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800925c:	4623      	mov	r3, r4
 800925e:	469a      	mov	sl, r3
 8009260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009264:	b10a      	cbz	r2, 800926a <_vfiprintf_r+0x86>
 8009266:	2a25      	cmp	r2, #37	@ 0x25
 8009268:	d1f9      	bne.n	800925e <_vfiprintf_r+0x7a>
 800926a:	ebba 0b04 	subs.w	fp, sl, r4
 800926e:	d00b      	beq.n	8009288 <_vfiprintf_r+0xa4>
 8009270:	465b      	mov	r3, fp
 8009272:	4622      	mov	r2, r4
 8009274:	4629      	mov	r1, r5
 8009276:	4630      	mov	r0, r6
 8009278:	f7ff ffa2 	bl	80091c0 <__sfputs_r>
 800927c:	3001      	adds	r0, #1
 800927e:	f000 80a7 	beq.w	80093d0 <_vfiprintf_r+0x1ec>
 8009282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009284:	445a      	add	r2, fp
 8009286:	9209      	str	r2, [sp, #36]	@ 0x24
 8009288:	f89a 3000 	ldrb.w	r3, [sl]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 809f 	beq.w	80093d0 <_vfiprintf_r+0x1ec>
 8009292:	2300      	movs	r3, #0
 8009294:	f04f 32ff 	mov.w	r2, #4294967295
 8009298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800929c:	f10a 0a01 	add.w	sl, sl, #1
 80092a0:	9304      	str	r3, [sp, #16]
 80092a2:	9307      	str	r3, [sp, #28]
 80092a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80092aa:	4654      	mov	r4, sl
 80092ac:	2205      	movs	r2, #5
 80092ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b2:	4853      	ldr	r0, [pc, #332]	@ (8009400 <_vfiprintf_r+0x21c>)
 80092b4:	f7fd fcd5 	bl	8006c62 <memchr>
 80092b8:	9a04      	ldr	r2, [sp, #16]
 80092ba:	b9d8      	cbnz	r0, 80092f4 <_vfiprintf_r+0x110>
 80092bc:	06d1      	lsls	r1, r2, #27
 80092be:	bf44      	itt	mi
 80092c0:	2320      	movmi	r3, #32
 80092c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092c6:	0713      	lsls	r3, r2, #28
 80092c8:	bf44      	itt	mi
 80092ca:	232b      	movmi	r3, #43	@ 0x2b
 80092cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092d0:	f89a 3000 	ldrb.w	r3, [sl]
 80092d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d6:	d015      	beq.n	8009304 <_vfiprintf_r+0x120>
 80092d8:	4654      	mov	r4, sl
 80092da:	2000      	movs	r0, #0
 80092dc:	f04f 0c0a 	mov.w	ip, #10
 80092e0:	9a07      	ldr	r2, [sp, #28]
 80092e2:	4621      	mov	r1, r4
 80092e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e8:	3b30      	subs	r3, #48	@ 0x30
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d94b      	bls.n	8009386 <_vfiprintf_r+0x1a2>
 80092ee:	b1b0      	cbz	r0, 800931e <_vfiprintf_r+0x13a>
 80092f0:	9207      	str	r2, [sp, #28]
 80092f2:	e014      	b.n	800931e <_vfiprintf_r+0x13a>
 80092f4:	eba0 0308 	sub.w	r3, r0, r8
 80092f8:	fa09 f303 	lsl.w	r3, r9, r3
 80092fc:	4313      	orrs	r3, r2
 80092fe:	46a2      	mov	sl, r4
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	e7d2      	b.n	80092aa <_vfiprintf_r+0xc6>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	1d19      	adds	r1, r3, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	9103      	str	r1, [sp, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	bfbb      	ittet	lt
 8009310:	425b      	neglt	r3, r3
 8009312:	f042 0202 	orrlt.w	r2, r2, #2
 8009316:	9307      	strge	r3, [sp, #28]
 8009318:	9307      	strlt	r3, [sp, #28]
 800931a:	bfb8      	it	lt
 800931c:	9204      	strlt	r2, [sp, #16]
 800931e:	7823      	ldrb	r3, [r4, #0]
 8009320:	2b2e      	cmp	r3, #46	@ 0x2e
 8009322:	d10a      	bne.n	800933a <_vfiprintf_r+0x156>
 8009324:	7863      	ldrb	r3, [r4, #1]
 8009326:	2b2a      	cmp	r3, #42	@ 0x2a
 8009328:	d132      	bne.n	8009390 <_vfiprintf_r+0x1ac>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	3402      	adds	r4, #2
 800932e:	1d1a      	adds	r2, r3, #4
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	9203      	str	r2, [sp, #12]
 8009334:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009404 <_vfiprintf_r+0x220>
 800933e:	2203      	movs	r2, #3
 8009340:	4650      	mov	r0, sl
 8009342:	7821      	ldrb	r1, [r4, #0]
 8009344:	f7fd fc8d 	bl	8006c62 <memchr>
 8009348:	b138      	cbz	r0, 800935a <_vfiprintf_r+0x176>
 800934a:	2240      	movs	r2, #64	@ 0x40
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	eba0 000a 	sub.w	r0, r0, sl
 8009352:	4082      	lsls	r2, r0
 8009354:	4313      	orrs	r3, r2
 8009356:	3401      	adds	r4, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935e:	2206      	movs	r2, #6
 8009360:	4829      	ldr	r0, [pc, #164]	@ (8009408 <_vfiprintf_r+0x224>)
 8009362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009366:	f7fd fc7c 	bl	8006c62 <memchr>
 800936a:	2800      	cmp	r0, #0
 800936c:	d03f      	beq.n	80093ee <_vfiprintf_r+0x20a>
 800936e:	4b27      	ldr	r3, [pc, #156]	@ (800940c <_vfiprintf_r+0x228>)
 8009370:	bb1b      	cbnz	r3, 80093ba <_vfiprintf_r+0x1d6>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	3307      	adds	r3, #7
 8009376:	f023 0307 	bic.w	r3, r3, #7
 800937a:	3308      	adds	r3, #8
 800937c:	9303      	str	r3, [sp, #12]
 800937e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009380:	443b      	add	r3, r7
 8009382:	9309      	str	r3, [sp, #36]	@ 0x24
 8009384:	e76a      	b.n	800925c <_vfiprintf_r+0x78>
 8009386:	460c      	mov	r4, r1
 8009388:	2001      	movs	r0, #1
 800938a:	fb0c 3202 	mla	r2, ip, r2, r3
 800938e:	e7a8      	b.n	80092e2 <_vfiprintf_r+0xfe>
 8009390:	2300      	movs	r3, #0
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4619      	mov	r1, r3
 8009398:	3401      	adds	r4, #1
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	4620      	mov	r0, r4
 800939e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a2:	3a30      	subs	r2, #48	@ 0x30
 80093a4:	2a09      	cmp	r2, #9
 80093a6:	d903      	bls.n	80093b0 <_vfiprintf_r+0x1cc>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0c6      	beq.n	800933a <_vfiprintf_r+0x156>
 80093ac:	9105      	str	r1, [sp, #20]
 80093ae:	e7c4      	b.n	800933a <_vfiprintf_r+0x156>
 80093b0:	4604      	mov	r4, r0
 80093b2:	2301      	movs	r3, #1
 80093b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b8:	e7f0      	b.n	800939c <_vfiprintf_r+0x1b8>
 80093ba:	ab03      	add	r3, sp, #12
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	462a      	mov	r2, r5
 80093c0:	4630      	mov	r0, r6
 80093c2:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <_vfiprintf_r+0x22c>)
 80093c4:	a904      	add	r1, sp, #16
 80093c6:	f7fc fcc7 	bl	8005d58 <_printf_float>
 80093ca:	4607      	mov	r7, r0
 80093cc:	1c78      	adds	r0, r7, #1
 80093ce:	d1d6      	bne.n	800937e <_vfiprintf_r+0x19a>
 80093d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093d2:	07d9      	lsls	r1, r3, #31
 80093d4:	d405      	bmi.n	80093e2 <_vfiprintf_r+0x1fe>
 80093d6:	89ab      	ldrh	r3, [r5, #12]
 80093d8:	059a      	lsls	r2, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_vfiprintf_r+0x1fe>
 80093dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093de:	f7fd fc3f 	bl	8006c60 <__retarget_lock_release_recursive>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	065b      	lsls	r3, r3, #25
 80093e6:	f53f af1f 	bmi.w	8009228 <_vfiprintf_r+0x44>
 80093ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093ec:	e71e      	b.n	800922c <_vfiprintf_r+0x48>
 80093ee:	ab03      	add	r3, sp, #12
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	462a      	mov	r2, r5
 80093f4:	4630      	mov	r0, r6
 80093f6:	4b06      	ldr	r3, [pc, #24]	@ (8009410 <_vfiprintf_r+0x22c>)
 80093f8:	a904      	add	r1, sp, #16
 80093fa:	f7fc ff4b 	bl	8006294 <_printf_i>
 80093fe:	e7e4      	b.n	80093ca <_vfiprintf_r+0x1e6>
 8009400:	0800ab31 	.word	0x0800ab31
 8009404:	0800ab37 	.word	0x0800ab37
 8009408:	0800ab3b 	.word	0x0800ab3b
 800940c:	08005d59 	.word	0x08005d59
 8009410:	080091c1 	.word	0x080091c1

08009414 <__swbuf_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	460e      	mov	r6, r1
 8009418:	4614      	mov	r4, r2
 800941a:	4605      	mov	r5, r0
 800941c:	b118      	cbz	r0, 8009426 <__swbuf_r+0x12>
 800941e:	6a03      	ldr	r3, [r0, #32]
 8009420:	b90b      	cbnz	r3, 8009426 <__swbuf_r+0x12>
 8009422:	f7fd faf3 	bl	8006a0c <__sinit>
 8009426:	69a3      	ldr	r3, [r4, #24]
 8009428:	60a3      	str	r3, [r4, #8]
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	071a      	lsls	r2, r3, #28
 800942e:	d501      	bpl.n	8009434 <__swbuf_r+0x20>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	b943      	cbnz	r3, 8009446 <__swbuf_r+0x32>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f000 f82a 	bl	8009490 <__swsetup_r>
 800943c:	b118      	cbz	r0, 8009446 <__swbuf_r+0x32>
 800943e:	f04f 37ff 	mov.w	r7, #4294967295
 8009442:	4638      	mov	r0, r7
 8009444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	6922      	ldr	r2, [r4, #16]
 800944a:	b2f6      	uxtb	r6, r6
 800944c:	1a98      	subs	r0, r3, r2
 800944e:	6963      	ldr	r3, [r4, #20]
 8009450:	4637      	mov	r7, r6
 8009452:	4283      	cmp	r3, r0
 8009454:	dc05      	bgt.n	8009462 <__swbuf_r+0x4e>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f7ff fdc9 	bl	8008ff0 <_fflush_r>
 800945e:	2800      	cmp	r0, #0
 8009460:	d1ed      	bne.n	800943e <__swbuf_r+0x2a>
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	3b01      	subs	r3, #1
 8009466:	60a3      	str	r3, [r4, #8]
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	6022      	str	r2, [r4, #0]
 800946e:	701e      	strb	r6, [r3, #0]
 8009470:	6962      	ldr	r2, [r4, #20]
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	429a      	cmp	r2, r3
 8009476:	d004      	beq.n	8009482 <__swbuf_r+0x6e>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	07db      	lsls	r3, r3, #31
 800947c:	d5e1      	bpl.n	8009442 <__swbuf_r+0x2e>
 800947e:	2e0a      	cmp	r6, #10
 8009480:	d1df      	bne.n	8009442 <__swbuf_r+0x2e>
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f7ff fdb3 	bl	8008ff0 <_fflush_r>
 800948a:	2800      	cmp	r0, #0
 800948c:	d0d9      	beq.n	8009442 <__swbuf_r+0x2e>
 800948e:	e7d6      	b.n	800943e <__swbuf_r+0x2a>

08009490 <__swsetup_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4b29      	ldr	r3, [pc, #164]	@ (8009538 <__swsetup_r+0xa8>)
 8009494:	4605      	mov	r5, r0
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	460c      	mov	r4, r1
 800949a:	b118      	cbz	r0, 80094a4 <__swsetup_r+0x14>
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b90b      	cbnz	r3, 80094a4 <__swsetup_r+0x14>
 80094a0:	f7fd fab4 	bl	8006a0c <__sinit>
 80094a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a8:	0719      	lsls	r1, r3, #28
 80094aa:	d422      	bmi.n	80094f2 <__swsetup_r+0x62>
 80094ac:	06da      	lsls	r2, r3, #27
 80094ae:	d407      	bmi.n	80094c0 <__swsetup_r+0x30>
 80094b0:	2209      	movs	r2, #9
 80094b2:	602a      	str	r2, [r5, #0]
 80094b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e033      	b.n	8009528 <__swsetup_r+0x98>
 80094c0:	0758      	lsls	r0, r3, #29
 80094c2:	d512      	bpl.n	80094ea <__swsetup_r+0x5a>
 80094c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094c6:	b141      	cbz	r1, 80094da <__swsetup_r+0x4a>
 80094c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <__swsetup_r+0x46>
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7fe fa3d 	bl	8007950 <_free_r>
 80094d6:	2300      	movs	r3, #0
 80094d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	2300      	movs	r3, #0
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0308 	orr.w	r3, r3, #8
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	b94b      	cbnz	r3, 800950a <__swsetup_r+0x7a>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009500:	d003      	beq.n	800950a <__swsetup_r+0x7a>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f000 f882 	bl	800960e <__smakebuf_r>
 800950a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950e:	f013 0201 	ands.w	r2, r3, #1
 8009512:	d00a      	beq.n	800952a <__swsetup_r+0x9a>
 8009514:	2200      	movs	r2, #0
 8009516:	60a2      	str	r2, [r4, #8]
 8009518:	6962      	ldr	r2, [r4, #20]
 800951a:	4252      	negs	r2, r2
 800951c:	61a2      	str	r2, [r4, #24]
 800951e:	6922      	ldr	r2, [r4, #16]
 8009520:	b942      	cbnz	r2, 8009534 <__swsetup_r+0xa4>
 8009522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009526:	d1c5      	bne.n	80094b4 <__swsetup_r+0x24>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	0799      	lsls	r1, r3, #30
 800952c:	bf58      	it	pl
 800952e:	6962      	ldrpl	r2, [r4, #20]
 8009530:	60a2      	str	r2, [r4, #8]
 8009532:	e7f4      	b.n	800951e <__swsetup_r+0x8e>
 8009534:	2000      	movs	r0, #0
 8009536:	e7f7      	b.n	8009528 <__swsetup_r+0x98>
 8009538:	20000184 	.word	0x20000184

0800953c <_raise_r>:
 800953c:	291f      	cmp	r1, #31
 800953e:	b538      	push	{r3, r4, r5, lr}
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	d904      	bls.n	8009550 <_raise_r+0x14>
 8009546:	2316      	movs	r3, #22
 8009548:	6003      	str	r3, [r0, #0]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009552:	b112      	cbz	r2, 800955a <_raise_r+0x1e>
 8009554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009558:	b94b      	cbnz	r3, 800956e <_raise_r+0x32>
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f830 	bl	80095c0 <_getpid_r>
 8009560:	4622      	mov	r2, r4
 8009562:	4601      	mov	r1, r0
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956a:	f000 b817 	b.w	800959c <_kill_r>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d00a      	beq.n	8009588 <_raise_r+0x4c>
 8009572:	1c59      	adds	r1, r3, #1
 8009574:	d103      	bne.n	800957e <_raise_r+0x42>
 8009576:	2316      	movs	r3, #22
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	2001      	movs	r0, #1
 800957c:	e7e7      	b.n	800954e <_raise_r+0x12>
 800957e:	2100      	movs	r1, #0
 8009580:	4620      	mov	r0, r4
 8009582:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009586:	4798      	blx	r3
 8009588:	2000      	movs	r0, #0
 800958a:	e7e0      	b.n	800954e <_raise_r+0x12>

0800958c <raise>:
 800958c:	4b02      	ldr	r3, [pc, #8]	@ (8009598 <raise+0xc>)
 800958e:	4601      	mov	r1, r0
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	f7ff bfd3 	b.w	800953c <_raise_r>
 8009596:	bf00      	nop
 8009598:	20000184 	.word	0x20000184

0800959c <_kill_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	2300      	movs	r3, #0
 80095a0:	4d06      	ldr	r5, [pc, #24]	@ (80095bc <_kill_r+0x20>)
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f7f8 fe64 	bl	8002276 <_kill>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_kill_r+0x1c>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_kill_r+0x1c>
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	200006d4 	.word	0x200006d4

080095c0 <_getpid_r>:
 80095c0:	f7f8 be52 	b.w	8002268 <_getpid>

080095c4 <__swhatbuf_r>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	460c      	mov	r4, r1
 80095c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095cc:	4615      	mov	r5, r2
 80095ce:	2900      	cmp	r1, #0
 80095d0:	461e      	mov	r6, r3
 80095d2:	b096      	sub	sp, #88	@ 0x58
 80095d4:	da0c      	bge.n	80095f0 <__swhatbuf_r+0x2c>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	2100      	movs	r1, #0
 80095da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095de:	bf14      	ite	ne
 80095e0:	2340      	movne	r3, #64	@ 0x40
 80095e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095e6:	2000      	movs	r0, #0
 80095e8:	6031      	str	r1, [r6, #0]
 80095ea:	602b      	str	r3, [r5, #0]
 80095ec:	b016      	add	sp, #88	@ 0x58
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	466a      	mov	r2, sp
 80095f2:	f000 f849 	bl	8009688 <_fstat_r>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	dbed      	blt.n	80095d6 <__swhatbuf_r+0x12>
 80095fa:	9901      	ldr	r1, [sp, #4]
 80095fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009600:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009604:	4259      	negs	r1, r3
 8009606:	4159      	adcs	r1, r3
 8009608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800960c:	e7eb      	b.n	80095e6 <__swhatbuf_r+0x22>

0800960e <__smakebuf_r>:
 800960e:	898b      	ldrh	r3, [r1, #12]
 8009610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009612:	079d      	lsls	r5, r3, #30
 8009614:	4606      	mov	r6, r0
 8009616:	460c      	mov	r4, r1
 8009618:	d507      	bpl.n	800962a <__smakebuf_r+0x1c>
 800961a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	2301      	movs	r3, #1
 8009624:	6163      	str	r3, [r4, #20]
 8009626:	b003      	add	sp, #12
 8009628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962a:	466a      	mov	r2, sp
 800962c:	ab01      	add	r3, sp, #4
 800962e:	f7ff ffc9 	bl	80095c4 <__swhatbuf_r>
 8009632:	9f00      	ldr	r7, [sp, #0]
 8009634:	4605      	mov	r5, r0
 8009636:	4639      	mov	r1, r7
 8009638:	4630      	mov	r0, r6
 800963a:	f7fe fd35 	bl	80080a8 <_malloc_r>
 800963e:	b948      	cbnz	r0, 8009654 <__smakebuf_r+0x46>
 8009640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009644:	059a      	lsls	r2, r3, #22
 8009646:	d4ee      	bmi.n	8009626 <__smakebuf_r+0x18>
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	e7e2      	b.n	800961a <__smakebuf_r+0xc>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800965a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6020      	str	r0, [r4, #0]
 8009664:	b15b      	cbz	r3, 800967e <__smakebuf_r+0x70>
 8009666:	4630      	mov	r0, r6
 8009668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800966c:	f000 f81e 	bl	80096ac <_isatty_r>
 8009670:	b128      	cbz	r0, 800967e <__smakebuf_r+0x70>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	f043 0301 	orr.w	r3, r3, #1
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	431d      	orrs	r5, r3
 8009682:	81a5      	strh	r5, [r4, #12]
 8009684:	e7cf      	b.n	8009626 <__smakebuf_r+0x18>
	...

08009688 <_fstat_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	2300      	movs	r3, #0
 800968c:	4d06      	ldr	r5, [pc, #24]	@ (80096a8 <_fstat_r+0x20>)
 800968e:	4604      	mov	r4, r0
 8009690:	4608      	mov	r0, r1
 8009692:	4611      	mov	r1, r2
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	f7f8 fe4d 	bl	8002334 <_fstat>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d102      	bne.n	80096a4 <_fstat_r+0x1c>
 800969e:	682b      	ldr	r3, [r5, #0]
 80096a0:	b103      	cbz	r3, 80096a4 <_fstat_r+0x1c>
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
 80096a6:	bf00      	nop
 80096a8:	200006d4 	.word	0x200006d4

080096ac <_isatty_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	2300      	movs	r3, #0
 80096b0:	4d05      	ldr	r5, [pc, #20]	@ (80096c8 <_isatty_r+0x1c>)
 80096b2:	4604      	mov	r4, r0
 80096b4:	4608      	mov	r0, r1
 80096b6:	602b      	str	r3, [r5, #0]
 80096b8:	f7f8 fe4b 	bl	8002352 <_isatty>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_isatty_r+0x1a>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_isatty_r+0x1a>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200006d4 	.word	0x200006d4

080096cc <cos>:
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	4d20      	ldr	r5, [pc, #128]	@ (8009750 <cos+0x84>)
 80096d0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80096d4:	42ac      	cmp	r4, r5
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	b087      	sub	sp, #28
 80096dc:	d806      	bhi.n	80096ec <cos+0x20>
 80096de:	2200      	movs	r2, #0
 80096e0:	2300      	movs	r3, #0
 80096e2:	b007      	add	sp, #28
 80096e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e8:	f000 b87e 	b.w	80097e8 <__kernel_cos>
 80096ec:	4d19      	ldr	r5, [pc, #100]	@ (8009754 <cos+0x88>)
 80096ee:	42ac      	cmp	r4, r5
 80096f0:	d903      	bls.n	80096fa <cos+0x2e>
 80096f2:	f7f6 fd39 	bl	8000168 <__aeabi_dsub>
 80096f6:	b007      	add	sp, #28
 80096f8:	bd30      	pop	{r4, r5, pc}
 80096fa:	aa02      	add	r2, sp, #8
 80096fc:	f000 f9ec 	bl	8009ad8 <__ieee754_rem_pio2>
 8009700:	f000 0003 	and.w	r0, r0, #3
 8009704:	2801      	cmp	r0, #1
 8009706:	d009      	beq.n	800971c <cos+0x50>
 8009708:	2802      	cmp	r0, #2
 800970a:	d011      	beq.n	8009730 <cos+0x64>
 800970c:	b9b8      	cbnz	r0, 800973e <cos+0x72>
 800970e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009716:	f000 f867 	bl	80097e8 <__kernel_cos>
 800971a:	e7ec      	b.n	80096f6 <cos+0x2a>
 800971c:	9000      	str	r0, [sp, #0]
 800971e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009726:	f000 f91f 	bl	8009968 <__kernel_sin>
 800972a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800972e:	e7e2      	b.n	80096f6 <cos+0x2a>
 8009730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009738:	f000 f856 	bl	80097e8 <__kernel_cos>
 800973c:	e7f5      	b.n	800972a <cos+0x5e>
 800973e:	2301      	movs	r3, #1
 8009740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800974a:	f000 f90d 	bl	8009968 <__kernel_sin>
 800974e:	e7d2      	b.n	80096f6 <cos+0x2a>
 8009750:	3fe921fb 	.word	0x3fe921fb
 8009754:	7fefffff 	.word	0x7fefffff

08009758 <sin>:
 8009758:	b530      	push	{r4, r5, lr}
 800975a:	4d20      	ldr	r5, [pc, #128]	@ (80097dc <sin+0x84>)
 800975c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009760:	42ac      	cmp	r4, r5
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	b087      	sub	sp, #28
 8009768:	d806      	bhi.n	8009778 <sin+0x20>
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	2300      	movs	r3, #0
 8009772:	f000 f8f9 	bl	8009968 <__kernel_sin>
 8009776:	e004      	b.n	8009782 <sin+0x2a>
 8009778:	4d19      	ldr	r5, [pc, #100]	@ (80097e0 <sin+0x88>)
 800977a:	42ac      	cmp	r4, r5
 800977c:	d903      	bls.n	8009786 <sin+0x2e>
 800977e:	f7f6 fcf3 	bl	8000168 <__aeabi_dsub>
 8009782:	b007      	add	sp, #28
 8009784:	bd30      	pop	{r4, r5, pc}
 8009786:	aa02      	add	r2, sp, #8
 8009788:	f000 f9a6 	bl	8009ad8 <__ieee754_rem_pio2>
 800978c:	f000 0003 	and.w	r0, r0, #3
 8009790:	2801      	cmp	r0, #1
 8009792:	d009      	beq.n	80097a8 <sin+0x50>
 8009794:	2802      	cmp	r0, #2
 8009796:	d00e      	beq.n	80097b6 <sin+0x5e>
 8009798:	b9c0      	cbnz	r0, 80097cc <sin+0x74>
 800979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979e:	2301      	movs	r3, #1
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097a6:	e7e4      	b.n	8009772 <sin+0x1a>
 80097a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b0:	f000 f81a 	bl	80097e8 <__kernel_cos>
 80097b4:	e7e5      	b.n	8009782 <sin+0x2a>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097c2:	f000 f8d1 	bl	8009968 <__kernel_sin>
 80097c6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80097ca:	e7da      	b.n	8009782 <sin+0x2a>
 80097cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097d4:	f000 f808 	bl	80097e8 <__kernel_cos>
 80097d8:	e7f5      	b.n	80097c6 <sin+0x6e>
 80097da:	bf00      	nop
 80097dc:	3fe921fb 	.word	0x3fe921fb
 80097e0:	7fefffff 	.word	0x7fefffff
 80097e4:	00000000 	.word	0x00000000

080097e8 <__kernel_cos>:
 80097e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80097f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80097f4:	4680      	mov	r8, r0
 80097f6:	4689      	mov	r9, r1
 80097f8:	e9cd 2300 	strd	r2, r3, [sp]
 80097fc:	d204      	bcs.n	8009808 <__kernel_cos+0x20>
 80097fe:	f7f7 f91b 	bl	8000a38 <__aeabi_d2iz>
 8009802:	2800      	cmp	r0, #0
 8009804:	f000 8086 	beq.w	8009914 <__kernel_cos+0x12c>
 8009808:	4642      	mov	r2, r8
 800980a:	464b      	mov	r3, r9
 800980c:	4640      	mov	r0, r8
 800980e:	4649      	mov	r1, r9
 8009810:	f7f6 fe62 	bl	80004d8 <__aeabi_dmul>
 8009814:	2200      	movs	r2, #0
 8009816:	4b4e      	ldr	r3, [pc, #312]	@ (8009950 <__kernel_cos+0x168>)
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	f7f6 fe5c 	bl	80004d8 <__aeabi_dmul>
 8009820:	a33f      	add	r3, pc, #252	@ (adr r3, 8009920 <__kernel_cos+0x138>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	f7f6 fe53 	bl	80004d8 <__aeabi_dmul>
 8009832:	a33d      	add	r3, pc, #244	@ (adr r3, 8009928 <__kernel_cos+0x140>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fc98 	bl	800016c <__adddf3>
 800983c:	4622      	mov	r2, r4
 800983e:	462b      	mov	r3, r5
 8009840:	f7f6 fe4a 	bl	80004d8 <__aeabi_dmul>
 8009844:	a33a      	add	r3, pc, #232	@ (adr r3, 8009930 <__kernel_cos+0x148>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fc8d 	bl	8000168 <__aeabi_dsub>
 800984e:	4622      	mov	r2, r4
 8009850:	462b      	mov	r3, r5
 8009852:	f7f6 fe41 	bl	80004d8 <__aeabi_dmul>
 8009856:	a338      	add	r3, pc, #224	@ (adr r3, 8009938 <__kernel_cos+0x150>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fc86 	bl	800016c <__adddf3>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	f7f6 fe38 	bl	80004d8 <__aeabi_dmul>
 8009868:	a335      	add	r3, pc, #212	@ (adr r3, 8009940 <__kernel_cos+0x158>)
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	f7f6 fc7b 	bl	8000168 <__aeabi_dsub>
 8009872:	4622      	mov	r2, r4
 8009874:	462b      	mov	r3, r5
 8009876:	f7f6 fe2f 	bl	80004d8 <__aeabi_dmul>
 800987a:	a333      	add	r3, pc, #204	@ (adr r3, 8009948 <__kernel_cos+0x160>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fc74 	bl	800016c <__adddf3>
 8009884:	4622      	mov	r2, r4
 8009886:	462b      	mov	r3, r5
 8009888:	f7f6 fe26 	bl	80004d8 <__aeabi_dmul>
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f6 fe22 	bl	80004d8 <__aeabi_dmul>
 8009894:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	4640      	mov	r0, r8
 800989e:	4649      	mov	r1, r9
 80098a0:	f7f6 fe1a 	bl	80004d8 <__aeabi_dmul>
 80098a4:	460b      	mov	r3, r1
 80098a6:	4602      	mov	r2, r0
 80098a8:	4629      	mov	r1, r5
 80098aa:	4620      	mov	r0, r4
 80098ac:	f7f6 fc5c 	bl	8000168 <__aeabi_dsub>
 80098b0:	4b28      	ldr	r3, [pc, #160]	@ (8009954 <__kernel_cos+0x16c>)
 80098b2:	4680      	mov	r8, r0
 80098b4:	429e      	cmp	r6, r3
 80098b6:	4689      	mov	r9, r1
 80098b8:	d80e      	bhi.n	80098d8 <__kernel_cos+0xf0>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4650      	mov	r0, sl
 80098c0:	4659      	mov	r1, fp
 80098c2:	f7f6 fc51 	bl	8000168 <__aeabi_dsub>
 80098c6:	4602      	mov	r2, r0
 80098c8:	2000      	movs	r0, #0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4922      	ldr	r1, [pc, #136]	@ (8009958 <__kernel_cos+0x170>)
 80098ce:	f7f6 fc4b 	bl	8000168 <__aeabi_dsub>
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	2400      	movs	r4, #0
 80098da:	4b20      	ldr	r3, [pc, #128]	@ (800995c <__kernel_cos+0x174>)
 80098dc:	4622      	mov	r2, r4
 80098de:	429e      	cmp	r6, r3
 80098e0:	bf8c      	ite	hi
 80098e2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009960 <__kernel_cos+0x178>)
 80098e4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80098e8:	462b      	mov	r3, r5
 80098ea:	2000      	movs	r0, #0
 80098ec:	491a      	ldr	r1, [pc, #104]	@ (8009958 <__kernel_cos+0x170>)
 80098ee:	f7f6 fc3b 	bl	8000168 <__aeabi_dsub>
 80098f2:	4622      	mov	r2, r4
 80098f4:	4606      	mov	r6, r0
 80098f6:	460f      	mov	r7, r1
 80098f8:	462b      	mov	r3, r5
 80098fa:	4650      	mov	r0, sl
 80098fc:	4659      	mov	r1, fp
 80098fe:	f7f6 fc33 	bl	8000168 <__aeabi_dsub>
 8009902:	4642      	mov	r2, r8
 8009904:	464b      	mov	r3, r9
 8009906:	f7f6 fc2f 	bl	8000168 <__aeabi_dsub>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	e7dc      	b.n	80098ce <__kernel_cos+0xe6>
 8009914:	2000      	movs	r0, #0
 8009916:	4910      	ldr	r1, [pc, #64]	@ (8009958 <__kernel_cos+0x170>)
 8009918:	e7db      	b.n	80098d2 <__kernel_cos+0xea>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
 8009920:	be8838d4 	.word	0xbe8838d4
 8009924:	bda8fae9 	.word	0xbda8fae9
 8009928:	bdb4b1c4 	.word	0xbdb4b1c4
 800992c:	3e21ee9e 	.word	0x3e21ee9e
 8009930:	809c52ad 	.word	0x809c52ad
 8009934:	3e927e4f 	.word	0x3e927e4f
 8009938:	19cb1590 	.word	0x19cb1590
 800993c:	3efa01a0 	.word	0x3efa01a0
 8009940:	16c15177 	.word	0x16c15177
 8009944:	3f56c16c 	.word	0x3f56c16c
 8009948:	5555554c 	.word	0x5555554c
 800994c:	3fa55555 	.word	0x3fa55555
 8009950:	3fe00000 	.word	0x3fe00000
 8009954:	3fd33332 	.word	0x3fd33332
 8009958:	3ff00000 	.word	0x3ff00000
 800995c:	3fe90000 	.word	0x3fe90000
 8009960:	3fd20000 	.word	0x3fd20000
 8009964:	00000000 	.word	0x00000000

08009968 <__kernel_sin>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	461f      	mov	r7, r3
 800996e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009972:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009976:	4604      	mov	r4, r0
 8009978:	460d      	mov	r5, r1
 800997a:	4616      	mov	r6, r2
 800997c:	b085      	sub	sp, #20
 800997e:	d203      	bcs.n	8009988 <__kernel_sin+0x20>
 8009980:	f7f7 f85a 	bl	8000a38 <__aeabi_d2iz>
 8009984:	2800      	cmp	r0, #0
 8009986:	d051      	beq.n	8009a2c <__kernel_sin+0xc4>
 8009988:	4622      	mov	r2, r4
 800998a:	462b      	mov	r3, r5
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	4682      	mov	sl, r0
 8009996:	468b      	mov	fp, r1
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	f7f6 fd9a 	bl	80004d8 <__aeabi_dmul>
 80099a4:	a33e      	add	r3, pc, #248	@ (adr r3, 8009aa0 <__kernel_sin+0x138>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	4680      	mov	r8, r0
 80099ac:	4689      	mov	r9, r1
 80099ae:	4650      	mov	r0, sl
 80099b0:	4659      	mov	r1, fp
 80099b2:	f7f6 fd91 	bl	80004d8 <__aeabi_dmul>
 80099b6:	a33c      	add	r3, pc, #240	@ (adr r3, 8009aa8 <__kernel_sin+0x140>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f6 fbd4 	bl	8000168 <__aeabi_dsub>
 80099c0:	4652      	mov	r2, sl
 80099c2:	465b      	mov	r3, fp
 80099c4:	f7f6 fd88 	bl	80004d8 <__aeabi_dmul>
 80099c8:	a339      	add	r3, pc, #228	@ (adr r3, 8009ab0 <__kernel_sin+0x148>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7f6 fbcd 	bl	800016c <__adddf3>
 80099d2:	4652      	mov	r2, sl
 80099d4:	465b      	mov	r3, fp
 80099d6:	f7f6 fd7f 	bl	80004d8 <__aeabi_dmul>
 80099da:	a337      	add	r3, pc, #220	@ (adr r3, 8009ab8 <__kernel_sin+0x150>)
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	f7f6 fbc2 	bl	8000168 <__aeabi_dsub>
 80099e4:	4652      	mov	r2, sl
 80099e6:	465b      	mov	r3, fp
 80099e8:	f7f6 fd76 	bl	80004d8 <__aeabi_dmul>
 80099ec:	a334      	add	r3, pc, #208	@ (adr r3, 8009ac0 <__kernel_sin+0x158>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	f7f6 fbbb 	bl	800016c <__adddf3>
 80099f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f8:	e9cd 0100 	strd	r0, r1, [sp]
 80099fc:	b9db      	cbnz	r3, 8009a36 <__kernel_sin+0xce>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 fd67 	bl	80004d8 <__aeabi_dmul>
 8009a0a:	a32f      	add	r3, pc, #188	@ (adr r3, 8009ac8 <__kernel_sin+0x160>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fbaa 	bl	8000168 <__aeabi_dsub>
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	f7f6 fd5e 	bl	80004d8 <__aeabi_dmul>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4620      	mov	r0, r4
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7f6 fba2 	bl	800016c <__adddf3>
 8009a28:	4604      	mov	r4, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	b005      	add	sp, #20
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	2200      	movs	r2, #0
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4b24      	ldr	r3, [pc, #144]	@ (8009ad0 <__kernel_sin+0x168>)
 8009a3e:	f7f6 fd4b 	bl	80004d8 <__aeabi_dmul>
 8009a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	f7f6 fd43 	bl	80004d8 <__aeabi_dmul>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5a:	f7f6 fb85 	bl	8000168 <__aeabi_dsub>
 8009a5e:	4652      	mov	r2, sl
 8009a60:	465b      	mov	r3, fp
 8009a62:	f7f6 fd39 	bl	80004d8 <__aeabi_dmul>
 8009a66:	4632      	mov	r2, r6
 8009a68:	463b      	mov	r3, r7
 8009a6a:	f7f6 fb7d 	bl	8000168 <__aeabi_dsub>
 8009a6e:	a316      	add	r3, pc, #88	@ (adr r3, 8009ac8 <__kernel_sin+0x160>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	f7f6 fd2c 	bl	80004d8 <__aeabi_dmul>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4630      	mov	r0, r6
 8009a86:	4639      	mov	r1, r7
 8009a88:	f7f6 fb70 	bl	800016c <__adddf3>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4620      	mov	r0, r4
 8009a92:	4629      	mov	r1, r5
 8009a94:	f7f6 fb68 	bl	8000168 <__aeabi_dsub>
 8009a98:	e7c6      	b.n	8009a28 <__kernel_sin+0xc0>
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	5acfd57c 	.word	0x5acfd57c
 8009aa4:	3de5d93a 	.word	0x3de5d93a
 8009aa8:	8a2b9ceb 	.word	0x8a2b9ceb
 8009aac:	3e5ae5e6 	.word	0x3e5ae5e6
 8009ab0:	57b1fe7d 	.word	0x57b1fe7d
 8009ab4:	3ec71de3 	.word	0x3ec71de3
 8009ab8:	19c161d5 	.word	0x19c161d5
 8009abc:	3f2a01a0 	.word	0x3f2a01a0
 8009ac0:	1110f8a6 	.word	0x1110f8a6
 8009ac4:	3f811111 	.word	0x3f811111
 8009ac8:	55555549 	.word	0x55555549
 8009acc:	3fc55555 	.word	0x3fc55555
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	00000000 	.word	0x00000000

08009ad8 <__ieee754_rem_pio2>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	4bc4      	ldr	r3, [pc, #784]	@ (8009df0 <__ieee754_rem_pio2+0x318>)
 8009ade:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009ae2:	b08d      	sub	sp, #52	@ 0x34
 8009ae4:	4598      	cmp	r8, r3
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460f      	mov	r7, r1
 8009aea:	4614      	mov	r4, r2
 8009aec:	9104      	str	r1, [sp, #16]
 8009aee:	d807      	bhi.n	8009b00 <__ieee754_rem_pio2+0x28>
 8009af0:	e9c2 6700 	strd	r6, r7, [r2]
 8009af4:	2300      	movs	r3, #0
 8009af6:	2200      	movs	r2, #0
 8009af8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009afc:	2500      	movs	r5, #0
 8009afe:	e026      	b.n	8009b4e <__ieee754_rem_pio2+0x76>
 8009b00:	4bbc      	ldr	r3, [pc, #752]	@ (8009df4 <__ieee754_rem_pio2+0x31c>)
 8009b02:	4598      	cmp	r8, r3
 8009b04:	d876      	bhi.n	8009bf4 <__ieee754_rem_pio2+0x11c>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	4dbb      	ldr	r5, [pc, #748]	@ (8009df8 <__ieee754_rem_pio2+0x320>)
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009db8 <__ieee754_rem_pio2+0x2e0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	dd38      	ble.n	8009b86 <__ieee754_rem_pio2+0xae>
 8009b14:	f7f6 fb28 	bl	8000168 <__aeabi_dsub>
 8009b18:	45a8      	cmp	r8, r5
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	d01a      	beq.n	8009b56 <__ieee754_rem_pio2+0x7e>
 8009b20:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009dc0 <__ieee754_rem_pio2+0x2e8>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fb1f 	bl	8000168 <__aeabi_dsub>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4680      	mov	r8, r0
 8009b30:	4689      	mov	r9, r1
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fb17 	bl	8000168 <__aeabi_dsub>
 8009b3a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009dc0 <__ieee754_rem_pio2+0x2e8>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fb12 	bl	8000168 <__aeabi_dsub>
 8009b44:	2501      	movs	r5, #1
 8009b46:	e9c4 8900 	strd	r8, r9, [r4]
 8009b4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b4e:	4628      	mov	r0, r5
 8009b50:	b00d      	add	sp, #52	@ 0x34
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	a39c      	add	r3, pc, #624	@ (adr r3, 8009dc8 <__ieee754_rem_pio2+0x2f0>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 fb04 	bl	8000168 <__aeabi_dsub>
 8009b60:	a39b      	add	r3, pc, #620	@ (adr r3, 8009dd0 <__ieee754_rem_pio2+0x2f8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	4606      	mov	r6, r0
 8009b68:	460f      	mov	r7, r1
 8009b6a:	f7f6 fafd 	bl	8000168 <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4680      	mov	r8, r0
 8009b74:	4689      	mov	r9, r1
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 faf5 	bl	8000168 <__aeabi_dsub>
 8009b7e:	a394      	add	r3, pc, #592	@ (adr r3, 8009dd0 <__ieee754_rem_pio2+0x2f8>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	e7dc      	b.n	8009b40 <__ieee754_rem_pio2+0x68>
 8009b86:	f7f6 faf1 	bl	800016c <__adddf3>
 8009b8a:	45a8      	cmp	r8, r5
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	460f      	mov	r7, r1
 8009b90:	d018      	beq.n	8009bc4 <__ieee754_rem_pio2+0xec>
 8009b92:	a38b      	add	r3, pc, #556	@ (adr r3, 8009dc0 <__ieee754_rem_pio2+0x2e8>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f7f6 fae8 	bl	800016c <__adddf3>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4680      	mov	r8, r0
 8009ba2:	4689      	mov	r9, r1
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 fade 	bl	8000168 <__aeabi_dsub>
 8009bac:	a384      	add	r3, pc, #528	@ (adr r3, 8009dc0 <__ieee754_rem_pio2+0x2e8>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f7f6 fadb 	bl	800016c <__adddf3>
 8009bb6:	f04f 35ff 	mov.w	r5, #4294967295
 8009bba:	e9c4 8900 	strd	r8, r9, [r4]
 8009bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009bc2:	e7c4      	b.n	8009b4e <__ieee754_rem_pio2+0x76>
 8009bc4:	a380      	add	r3, pc, #512	@ (adr r3, 8009dc8 <__ieee754_rem_pio2+0x2f0>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 facf 	bl	800016c <__adddf3>
 8009bce:	a380      	add	r3, pc, #512	@ (adr r3, 8009dd0 <__ieee754_rem_pio2+0x2f8>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	f7f6 fac8 	bl	800016c <__adddf3>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4680      	mov	r8, r0
 8009be2:	4689      	mov	r9, r1
 8009be4:	4630      	mov	r0, r6
 8009be6:	4639      	mov	r1, r7
 8009be8:	f7f6 fabe 	bl	8000168 <__aeabi_dsub>
 8009bec:	a378      	add	r3, pc, #480	@ (adr r3, 8009dd0 <__ieee754_rem_pio2+0x2f8>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	e7de      	b.n	8009bb2 <__ieee754_rem_pio2+0xda>
 8009bf4:	4b81      	ldr	r3, [pc, #516]	@ (8009dfc <__ieee754_rem_pio2+0x324>)
 8009bf6:	4598      	cmp	r8, r3
 8009bf8:	f200 80cf 	bhi.w	8009d9a <__ieee754_rem_pio2+0x2c2>
 8009bfc:	f000 f962 	bl	8009ec4 <fabs>
 8009c00:	a375      	add	r3, pc, #468	@ (adr r3, 8009dd8 <__ieee754_rem_pio2+0x300>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	4606      	mov	r6, r0
 8009c08:	460f      	mov	r7, r1
 8009c0a:	f7f6 fc65 	bl	80004d8 <__aeabi_dmul>
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4b7b      	ldr	r3, [pc, #492]	@ (8009e00 <__ieee754_rem_pio2+0x328>)
 8009c12:	f7f6 faab 	bl	800016c <__adddf3>
 8009c16:	f7f6 ff0f 	bl	8000a38 <__aeabi_d2iz>
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	f7f6 fbf2 	bl	8000404 <__aeabi_i2d>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c28:	a363      	add	r3, pc, #396	@ (adr r3, 8009db8 <__ieee754_rem_pio2+0x2e0>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fc53 	bl	80004d8 <__aeabi_dmul>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 fa95 	bl	8000168 <__aeabi_dsub>
 8009c3e:	a360      	add	r3, pc, #384	@ (adr r3, 8009dc0 <__ieee754_rem_pio2+0x2e8>)
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	4682      	mov	sl, r0
 8009c46:	468b      	mov	fp, r1
 8009c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4c:	f7f6 fc44 	bl	80004d8 <__aeabi_dmul>
 8009c50:	2d1f      	cmp	r5, #31
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	dc0c      	bgt.n	8009c72 <__ieee754_rem_pio2+0x19a>
 8009c58:	4b6a      	ldr	r3, [pc, #424]	@ (8009e04 <__ieee754_rem_pio2+0x32c>)
 8009c5a:	1e6a      	subs	r2, r5, #1
 8009c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c60:	4543      	cmp	r3, r8
 8009c62:	d006      	beq.n	8009c72 <__ieee754_rem_pio2+0x19a>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	4650      	mov	r0, sl
 8009c6a:	4659      	mov	r1, fp
 8009c6c:	f7f6 fa7c 	bl	8000168 <__aeabi_dsub>
 8009c70:	e00e      	b.n	8009c90 <__ieee754_rem_pio2+0x1b8>
 8009c72:	463b      	mov	r3, r7
 8009c74:	4632      	mov	r2, r6
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fa75 	bl	8000168 <__aeabi_dsub>
 8009c7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c82:	9305      	str	r3, [sp, #20]
 8009c84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c88:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009c8c:	2b10      	cmp	r3, #16
 8009c8e:	dc02      	bgt.n	8009c96 <__ieee754_rem_pio2+0x1be>
 8009c90:	e9c4 0100 	strd	r0, r1, [r4]
 8009c94:	e039      	b.n	8009d0a <__ieee754_rem_pio2+0x232>
 8009c96:	a34c      	add	r3, pc, #304	@ (adr r3, 8009dc8 <__ieee754_rem_pio2+0x2f0>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca0:	f7f6 fc1a 	bl	80004d8 <__aeabi_dmul>
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4650      	mov	r0, sl
 8009cae:	4659      	mov	r1, fp
 8009cb0:	f7f6 fa5a 	bl	8000168 <__aeabi_dsub>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	4650      	mov	r0, sl
 8009cbe:	4659      	mov	r1, fp
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	f7f6 fa4e 	bl	8000168 <__aeabi_dsub>
 8009ccc:	a340      	add	r3, pc, #256	@ (adr r3, 8009dd0 <__ieee754_rem_pio2+0x2f8>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cda:	f7f6 fbfd 	bl	80004d8 <__aeabi_dmul>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fa41 	bl	8000168 <__aeabi_dsub>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	4640      	mov	r0, r8
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	f7f6 fa39 	bl	8000168 <__aeabi_dsub>
 8009cf6:	9a05      	ldr	r2, [sp, #20]
 8009cf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b31      	cmp	r3, #49	@ 0x31
 8009d00:	dc20      	bgt.n	8009d44 <__ieee754_rem_pio2+0x26c>
 8009d02:	46c2      	mov	sl, r8
 8009d04:	46cb      	mov	fp, r9
 8009d06:	e9c4 0100 	strd	r0, r1, [r4]
 8009d0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009d0e:	4650      	mov	r0, sl
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fa27 	bl	8000168 <__aeabi_dsub>
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	f7f6 fa23 	bl	8000168 <__aeabi_dsub>
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f6bf af10 	bge.w	8009b4e <__ieee754_rem_pio2+0x76>
 8009d2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009d32:	6063      	str	r3, [r4, #4]
 8009d34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d38:	f8c4 8000 	str.w	r8, [r4]
 8009d3c:	60a0      	str	r0, [r4, #8]
 8009d3e:	60e3      	str	r3, [r4, #12]
 8009d40:	426d      	negs	r5, r5
 8009d42:	e704      	b.n	8009b4e <__ieee754_rem_pio2+0x76>
 8009d44:	a326      	add	r3, pc, #152	@ (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d4e:	f7f6 fbc3 	bl	80004d8 <__aeabi_dmul>
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 fa03 	bl	8000168 <__aeabi_dsub>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4682      	mov	sl, r0
 8009d68:	468b      	mov	fp, r1
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	f7f6 f9fb 	bl	8000168 <__aeabi_dsub>
 8009d72:	4632      	mov	r2, r6
 8009d74:	463b      	mov	r3, r7
 8009d76:	f7f6 f9f7 	bl	8000168 <__aeabi_dsub>
 8009d7a:	a31b      	add	r3, pc, #108	@ (adr r3, 8009de8 <__ieee754_rem_pio2+0x310>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	4606      	mov	r6, r0
 8009d82:	460f      	mov	r7, r1
 8009d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d88:	f7f6 fba6 	bl	80004d8 <__aeabi_dmul>
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	f7f6 f9ea 	bl	8000168 <__aeabi_dsub>
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	e764      	b.n	8009c64 <__ieee754_rem_pio2+0x18c>
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8009e08 <__ieee754_rem_pio2+0x330>)
 8009d9c:	4598      	cmp	r8, r3
 8009d9e:	d935      	bls.n	8009e0c <__ieee754_rem_pio2+0x334>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	f7f6 f9e0 	bl	8000168 <__aeabi_dsub>
 8009da8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009dac:	e9c4 0100 	strd	r0, r1, [r4]
 8009db0:	e6a4      	b.n	8009afc <__ieee754_rem_pio2+0x24>
 8009db2:	bf00      	nop
 8009db4:	f3af 8000 	nop.w
 8009db8:	54400000 	.word	0x54400000
 8009dbc:	3ff921fb 	.word	0x3ff921fb
 8009dc0:	1a626331 	.word	0x1a626331
 8009dc4:	3dd0b461 	.word	0x3dd0b461
 8009dc8:	1a600000 	.word	0x1a600000
 8009dcc:	3dd0b461 	.word	0x3dd0b461
 8009dd0:	2e037073 	.word	0x2e037073
 8009dd4:	3ba3198a 	.word	0x3ba3198a
 8009dd8:	6dc9c883 	.word	0x6dc9c883
 8009ddc:	3fe45f30 	.word	0x3fe45f30
 8009de0:	2e000000 	.word	0x2e000000
 8009de4:	3ba3198a 	.word	0x3ba3198a
 8009de8:	252049c1 	.word	0x252049c1
 8009dec:	397b839a 	.word	0x397b839a
 8009df0:	3fe921fb 	.word	0x3fe921fb
 8009df4:	4002d97b 	.word	0x4002d97b
 8009df8:	3ff921fb 	.word	0x3ff921fb
 8009dfc:	413921fb 	.word	0x413921fb
 8009e00:	3fe00000 	.word	0x3fe00000
 8009e04:	0800ab80 	.word	0x0800ab80
 8009e08:	7fefffff 	.word	0x7fefffff
 8009e0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009e10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009e14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009e18:	460f      	mov	r7, r1
 8009e1a:	f7f6 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8009e1e:	f7f6 faf1 	bl	8000404 <__aeabi_i2d>
 8009e22:	4602      	mov	r2, r0
 8009e24:	460b      	mov	r3, r1
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e2e:	f7f6 f99b 	bl	8000168 <__aeabi_dsub>
 8009e32:	2200      	movs	r2, #0
 8009e34:	4b21      	ldr	r3, [pc, #132]	@ (8009ebc <__ieee754_rem_pio2+0x3e4>)
 8009e36:	f7f6 fb4f 	bl	80004d8 <__aeabi_dmul>
 8009e3a:	460f      	mov	r7, r1
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	f7f6 fdfb 	bl	8000a38 <__aeabi_d2iz>
 8009e42:	f7f6 fadf 	bl	8000404 <__aeabi_i2d>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e52:	f7f6 f989 	bl	8000168 <__aeabi_dsub>
 8009e56:	2200      	movs	r2, #0
 8009e58:	4b18      	ldr	r3, [pc, #96]	@ (8009ebc <__ieee754_rem_pio2+0x3e4>)
 8009e5a:	f7f6 fb3d 	bl	80004d8 <__aeabi_dmul>
 8009e5e:	f04f 0803 	mov.w	r8, #3
 8009e62:	2600      	movs	r6, #0
 8009e64:	2700      	movs	r7, #0
 8009e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009e6a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009e6e:	4632      	mov	r2, r6
 8009e70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009e74:	463b      	mov	r3, r7
 8009e76:	46c2      	mov	sl, r8
 8009e78:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e7c:	f7f6 fd94 	bl	80009a8 <__aeabi_dcmpeq>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d1f4      	bne.n	8009e6e <__ieee754_rem_pio2+0x396>
 8009e84:	4b0e      	ldr	r3, [pc, #56]	@ (8009ec0 <__ieee754_rem_pio2+0x3e8>)
 8009e86:	462a      	mov	r2, r5
 8009e88:	9301      	str	r3, [sp, #4]
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	a806      	add	r0, sp, #24
 8009e92:	4653      	mov	r3, sl
 8009e94:	f000 f81a 	bl	8009ecc <__kernel_rem_pio2>
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f6bf ae56 	bge.w	8009b4e <__ieee754_rem_pio2+0x76>
 8009ea2:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009ea6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009eaa:	e9c4 2300 	strd	r2, r3, [r4]
 8009eae:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009eb2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009eb6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009eba:	e741      	b.n	8009d40 <__ieee754_rem_pio2+0x268>
 8009ebc:	41700000 	.word	0x41700000
 8009ec0:	0800ac00 	.word	0x0800ac00

08009ec4 <fabs>:
 8009ec4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4770      	bx	lr

08009ecc <__kernel_rem_pio2>:
 8009ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009ed4:	9308      	str	r3, [sp, #32]
 8009ed6:	9104      	str	r1, [sp, #16]
 8009ed8:	4bb6      	ldr	r3, [pc, #728]	@ (800a1b4 <__kernel_rem_pio2+0x2e8>)
 8009eda:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8009edc:	f112 0f14 	cmn.w	r2, #20
 8009ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ee4:	bfa8      	it	ge
 8009ee6:	1ed4      	subge	r4, r2, #3
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	9b08      	ldr	r3, [sp, #32]
 8009eec:	bfb8      	it	lt
 8009eee:	2400      	movlt	r4, #0
 8009ef0:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ef4:	9306      	str	r3, [sp, #24]
 8009ef6:	bfa4      	itt	ge
 8009ef8:	2318      	movge	r3, #24
 8009efa:	fb94 f4f3 	sdivge	r4, r4, r3
 8009efe:	f06f 0317 	mvn.w	r3, #23
 8009f02:	fb04 3303 	mla	r3, r4, r3, r3
 8009f06:	eb03 0a02 	add.w	sl, r3, r2
 8009f0a:	9a06      	ldr	r2, [sp, #24]
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	1aa7      	subs	r7, r4, r2
 8009f10:	eb03 0802 	add.w	r8, r3, r2
 8009f14:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8009f16:	2500      	movs	r5, #0
 8009f18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9009      	str	r0, [sp, #36]	@ 0x24
 8009f22:	ae20      	add	r6, sp, #128	@ 0x80
 8009f24:	4545      	cmp	r5, r8
 8009f26:	dd14      	ble.n	8009f52 <__kernel_rem_pio2+0x86>
 8009f28:	f04f 0800 	mov.w	r8, #0
 8009f2c:	9a08      	ldr	r2, [sp, #32]
 8009f2e:	ab20      	add	r3, sp, #128	@ 0x80
 8009f30:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8009f34:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8009f38:	9b02      	ldr	r3, [sp, #8]
 8009f3a:	4598      	cmp	r8, r3
 8009f3c:	dc35      	bgt.n	8009faa <__kernel_rem_pio2+0xde>
 8009f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f40:	2200      	movs	r2, #0
 8009f42:	f1a3 0908 	sub.w	r9, r3, #8
 8009f46:	2300      	movs	r3, #0
 8009f48:	462f      	mov	r7, r5
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	e9cd 2300 	strd	r2, r3, [sp]
 8009f50:	e01f      	b.n	8009f92 <__kernel_rem_pio2+0xc6>
 8009f52:	42ef      	cmn	r7, r5
 8009f54:	d40b      	bmi.n	8009f6e <__kernel_rem_pio2+0xa2>
 8009f56:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009f5a:	e9cd 2300 	strd	r2, r3, [sp]
 8009f5e:	f7f6 fa51 	bl	8000404 <__aeabi_i2d>
 8009f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f66:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f6a:	3501      	adds	r5, #1
 8009f6c:	e7da      	b.n	8009f24 <__kernel_rem_pio2+0x58>
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	e7f8      	b.n	8009f66 <__kernel_rem_pio2+0x9a>
 8009f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f78:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009f7c:	f7f6 faac 	bl	80004d8 <__aeabi_dmul>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f88:	f7f6 f8f0 	bl	800016c <__adddf3>
 8009f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f90:	3601      	adds	r6, #1
 8009f92:	9b06      	ldr	r3, [sp, #24]
 8009f94:	3f08      	subs	r7, #8
 8009f96:	429e      	cmp	r6, r3
 8009f98:	ddec      	ble.n	8009f74 <__kernel_rem_pio2+0xa8>
 8009f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f9e:	f108 0801 	add.w	r8, r8, #1
 8009fa2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009fa6:	3508      	adds	r5, #8
 8009fa8:	e7c6      	b.n	8009f38 <__kernel_rem_pio2+0x6c>
 8009faa:	9b02      	ldr	r3, [sp, #8]
 8009fac:	aa0c      	add	r2, sp, #48	@ 0x30
 8009fae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fb4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8009fb6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009fba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fc0:	ab98      	add	r3, sp, #608	@ 0x260
 8009fc2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fc6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8009fca:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009fcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fd0:	ae0c      	add	r6, sp, #48	@ 0x30
 8009fd2:	4698      	mov	r8, r3
 8009fd4:	46b1      	mov	r9, r6
 8009fd6:	465f      	mov	r7, fp
 8009fd8:	9307      	str	r3, [sp, #28]
 8009fda:	2f00      	cmp	r7, #0
 8009fdc:	f1a8 0808 	sub.w	r8, r8, #8
 8009fe0:	dc71      	bgt.n	800a0c6 <__kernel_rem_pio2+0x1fa>
 8009fe2:	4652      	mov	r2, sl
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f000 fa96 	bl	800a518 <scalbn>
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	460d      	mov	r5, r1
 8009ff6:	f7f6 fa6f 	bl	80004d8 <__aeabi_dmul>
 8009ffa:	f000 fb05 	bl	800a608 <floor>
 8009ffe:	2200      	movs	r2, #0
 800a000:	4b6d      	ldr	r3, [pc, #436]	@ (800a1b8 <__kernel_rem_pio2+0x2ec>)
 800a002:	f7f6 fa69 	bl	80004d8 <__aeabi_dmul>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 f8ab 	bl	8000168 <__aeabi_dsub>
 800a012:	460d      	mov	r5, r1
 800a014:	4604      	mov	r4, r0
 800a016:	f7f6 fd0f 	bl	8000a38 <__aeabi_d2iz>
 800a01a:	9005      	str	r0, [sp, #20]
 800a01c:	f7f6 f9f2 	bl	8000404 <__aeabi_i2d>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f89e 	bl	8000168 <__aeabi_dsub>
 800a02c:	f1ba 0f00 	cmp.w	sl, #0
 800a030:	4680      	mov	r8, r0
 800a032:	4689      	mov	r9, r1
 800a034:	dd6d      	ble.n	800a112 <__kernel_rem_pio2+0x246>
 800a036:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a03a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a03c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a040:	9c05      	ldr	r4, [sp, #20]
 800a042:	f1ca 0018 	rsb	r0, sl, #24
 800a046:	fa43 f200 	asr.w	r2, r3, r0
 800a04a:	4414      	add	r4, r2
 800a04c:	4082      	lsls	r2, r0
 800a04e:	1a9b      	subs	r3, r3, r2
 800a050:	aa0c      	add	r2, sp, #48	@ 0x30
 800a052:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a056:	f1ca 0217 	rsb	r2, sl, #23
 800a05a:	9405      	str	r4, [sp, #20]
 800a05c:	4113      	asrs	r3, r2
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dd64      	ble.n	800a130 <__kernel_rem_pio2+0x264>
 800a066:	2200      	movs	r2, #0
 800a068:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a06c:	4614      	mov	r4, r2
 800a06e:	9b05      	ldr	r3, [sp, #20]
 800a070:	3301      	adds	r3, #1
 800a072:	9305      	str	r3, [sp, #20]
 800a074:	4593      	cmp	fp, r2
 800a076:	f300 80ab 	bgt.w	800a1d0 <__kernel_rem_pio2+0x304>
 800a07a:	f1ba 0f00 	cmp.w	sl, #0
 800a07e:	dd07      	ble.n	800a090 <__kernel_rem_pio2+0x1c4>
 800a080:	f1ba 0f01 	cmp.w	sl, #1
 800a084:	f000 80b2 	beq.w	800a1ec <__kernel_rem_pio2+0x320>
 800a088:	f1ba 0f02 	cmp.w	sl, #2
 800a08c:	f000 80b9 	beq.w	800a202 <__kernel_rem_pio2+0x336>
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d14c      	bne.n	800a130 <__kernel_rem_pio2+0x264>
 800a096:	4642      	mov	r2, r8
 800a098:	464b      	mov	r3, r9
 800a09a:	2000      	movs	r0, #0
 800a09c:	4947      	ldr	r1, [pc, #284]	@ (800a1bc <__kernel_rem_pio2+0x2f0>)
 800a09e:	f7f6 f863 	bl	8000168 <__aeabi_dsub>
 800a0a2:	4680      	mov	r8, r0
 800a0a4:	4689      	mov	r9, r1
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	d042      	beq.n	800a130 <__kernel_rem_pio2+0x264>
 800a0aa:	4652      	mov	r2, sl
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	4943      	ldr	r1, [pc, #268]	@ (800a1bc <__kernel_rem_pio2+0x2f0>)
 800a0b0:	f000 fa32 	bl	800a518 <scalbn>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 f854 	bl	8000168 <__aeabi_dsub>
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	4689      	mov	r9, r1
 800a0c4:	e034      	b.n	800a130 <__kernel_rem_pio2+0x264>
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a1c0 <__kernel_rem_pio2+0x2f4>)
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 fa03 	bl	80004d8 <__aeabi_dmul>
 800a0d2:	f7f6 fcb1 	bl	8000a38 <__aeabi_d2iz>
 800a0d6:	f7f6 f995 	bl	8000404 <__aeabi_i2d>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	e9cd 2300 	strd	r2, r3, [sp]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	4b37      	ldr	r3, [pc, #220]	@ (800a1c4 <__kernel_rem_pio2+0x2f8>)
 800a0e6:	f7f6 f9f7 	bl	80004d8 <__aeabi_dmul>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f839 	bl	8000168 <__aeabi_dsub>
 800a0f6:	f7f6 fc9f 	bl	8000a38 <__aeabi_d2iz>
 800a0fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a0fe:	f849 0b04 	str.w	r0, [r9], #4
 800a102:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a106:	f7f6 f831 	bl	800016c <__adddf3>
 800a10a:	3f01      	subs	r7, #1
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
 800a110:	e763      	b.n	8009fda <__kernel_rem_pio2+0x10e>
 800a112:	d106      	bne.n	800a122 <__kernel_rem_pio2+0x256>
 800a114:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a118:	aa0c      	add	r2, sp, #48	@ 0x30
 800a11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a11e:	15db      	asrs	r3, r3, #23
 800a120:	e79d      	b.n	800a05e <__kernel_rem_pio2+0x192>
 800a122:	2200      	movs	r2, #0
 800a124:	4b28      	ldr	r3, [pc, #160]	@ (800a1c8 <__kernel_rem_pio2+0x2fc>)
 800a126:	f7f6 fc5d 	bl	80009e4 <__aeabi_dcmpge>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d13f      	bne.n	800a1ae <__kernel_rem_pio2+0x2e2>
 800a12e:	9000      	str	r0, [sp, #0]
 800a130:	2200      	movs	r2, #0
 800a132:	2300      	movs	r3, #0
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f000 80af 	beq.w	800a2a0 <__kernel_rem_pio2+0x3d4>
 800a142:	2200      	movs	r2, #0
 800a144:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a148:	9902      	ldr	r1, [sp, #8]
 800a14a:	428b      	cmp	r3, r1
 800a14c:	da61      	bge.n	800a212 <__kernel_rem_pio2+0x346>
 800a14e:	2a00      	cmp	r2, #0
 800a150:	d076      	beq.n	800a240 <__kernel_rem_pio2+0x374>
 800a152:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a156:	ab0c      	add	r3, sp, #48	@ 0x30
 800a158:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a15c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0f6      	beq.n	800a152 <__kernel_rem_pio2+0x286>
 800a164:	4652      	mov	r2, sl
 800a166:	2000      	movs	r0, #0
 800a168:	4914      	ldr	r1, [pc, #80]	@ (800a1bc <__kernel_rem_pio2+0x2f0>)
 800a16a:	f000 f9d5 	bl	800a518 <scalbn>
 800a16e:	465d      	mov	r5, fp
 800a170:	4606      	mov	r6, r0
 800a172:	460f      	mov	r7, r1
 800a174:	f04f 0900 	mov.w	r9, #0
 800a178:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a17a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a1c0 <__kernel_rem_pio2+0x2f4>
 800a17e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a182:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a186:	2d00      	cmp	r5, #0
 800a188:	f280 80c0 	bge.w	800a30c <__kernel_rem_pio2+0x440>
 800a18c:	465d      	mov	r5, fp
 800a18e:	2d00      	cmp	r5, #0
 800a190:	f2c0 80f0 	blt.w	800a374 <__kernel_rem_pio2+0x4a8>
 800a194:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <__kernel_rem_pio2+0x300>)
 800a196:	f04f 0900 	mov.w	r9, #0
 800a19a:	9306      	str	r3, [sp, #24]
 800a19c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a19e:	f04f 0a00 	mov.w	sl, #0
 800a1a2:	2700      	movs	r7, #0
 800a1a4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a1a8:	ebab 0605 	sub.w	r6, fp, r5
 800a1ac:	e0d6      	b.n	800a35c <__kernel_rem_pio2+0x490>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	e758      	b.n	800a066 <__kernel_rem_pio2+0x19a>
 800a1b4:	0800ad48 	.word	0x0800ad48
 800a1b8:	40200000 	.word	0x40200000
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	3e700000 	.word	0x3e700000
 800a1c4:	41700000 	.word	0x41700000
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	0800ad08 	.word	0x0800ad08
 800a1d0:	f856 3b04 	ldr.w	r3, [r6], #4
 800a1d4:	b944      	cbnz	r4, 800a1e8 <__kernel_rem_pio2+0x31c>
 800a1d6:	b123      	cbz	r3, 800a1e2 <__kernel_rem_pio2+0x316>
 800a1d8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a1dc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	3201      	adds	r2, #1
 800a1e6:	e745      	b.n	800a074 <__kernel_rem_pio2+0x1a8>
 800a1e8:	1acb      	subs	r3, r1, r3
 800a1ea:	e7f7      	b.n	800a1dc <__kernel_rem_pio2+0x310>
 800a1ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a1f0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a1fa:	a90c      	add	r1, sp, #48	@ 0x30
 800a1fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a200:	e746      	b.n	800a090 <__kernel_rem_pio2+0x1c4>
 800a202:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a206:	ab0c      	add	r3, sp, #48	@ 0x30
 800a208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a210:	e7f3      	b.n	800a1fa <__kernel_rem_pio2+0x32e>
 800a212:	a90c      	add	r1, sp, #48	@ 0x30
 800a214:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a218:	3b01      	subs	r3, #1
 800a21a:	430a      	orrs	r2, r1
 800a21c:	e794      	b.n	800a148 <__kernel_rem_pio2+0x27c>
 800a21e:	3401      	adds	r4, #1
 800a220:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a224:	2a00      	cmp	r2, #0
 800a226:	d0fa      	beq.n	800a21e <__kernel_rem_pio2+0x352>
 800a228:	9b08      	ldr	r3, [sp, #32]
 800a22a:	aa20      	add	r2, sp, #128	@ 0x80
 800a22c:	445b      	add	r3, fp
 800a22e:	f10b 0801 	add.w	r8, fp, #1
 800a232:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a236:	445c      	add	r4, fp
 800a238:	4544      	cmp	r4, r8
 800a23a:	da04      	bge.n	800a246 <__kernel_rem_pio2+0x37a>
 800a23c:	46a3      	mov	fp, r4
 800a23e:	e6bf      	b.n	8009fc0 <__kernel_rem_pio2+0xf4>
 800a240:	2401      	movs	r4, #1
 800a242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a244:	e7ec      	b.n	800a220 <__kernel_rem_pio2+0x354>
 800a246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a248:	46ab      	mov	fp, r5
 800a24a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a24e:	f7f6 f8d9 	bl	8000404 <__aeabi_i2d>
 800a252:	f04f 0900 	mov.w	r9, #0
 800a256:	2600      	movs	r6, #0
 800a258:	2700      	movs	r7, #0
 800a25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25c:	e9c5 0100 	strd	r0, r1, [r5]
 800a260:	3b08      	subs	r3, #8
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	9b06      	ldr	r3, [sp, #24]
 800a266:	4599      	cmp	r9, r3
 800a268:	dd07      	ble.n	800a27a <__kernel_rem_pio2+0x3ae>
 800a26a:	9b07      	ldr	r3, [sp, #28]
 800a26c:	f108 0801 	add.w	r8, r8, #1
 800a270:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a274:	3508      	adds	r5, #8
 800a276:	9307      	str	r3, [sp, #28]
 800a278:	e7de      	b.n	800a238 <__kernel_rem_pio2+0x36c>
 800a27a:	9900      	ldr	r1, [sp, #0]
 800a27c:	f109 0901 	add.w	r9, r9, #1
 800a280:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a284:	9100      	str	r1, [sp, #0]
 800a286:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a28a:	f7f6 f925 	bl	80004d8 <__aeabi_dmul>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f5 ff69 	bl	800016c <__adddf3>
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	e7e1      	b.n	800a264 <__kernel_rem_pio2+0x398>
 800a2a0:	f1ca 0200 	rsb	r2, sl, #0
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f000 f936 	bl	800a518 <scalbn>
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	4b97      	ldr	r3, [pc, #604]	@ (800a50c <__kernel_rem_pio2+0x640>)
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	f7f6 fb96 	bl	80009e4 <__aeabi_dcmpge>
 800a2b8:	b300      	cbz	r0, 800a2fc <__kernel_rem_pio2+0x430>
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4b94      	ldr	r3, [pc, #592]	@ (800a510 <__kernel_rem_pio2+0x644>)
 800a2be:	4620      	mov	r0, r4
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	f7f6 fbb7 	bl	8000a38 <__aeabi_d2iz>
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	f7f6 f89a 	bl	8000404 <__aeabi_i2d>
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	4b8e      	ldr	r3, [pc, #568]	@ (800a50c <__kernel_rem_pio2+0x640>)
 800a2d4:	f7f6 f900 	bl	80004d8 <__aeabi_dmul>
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7f5 ff42 	bl	8000168 <__aeabi_dsub>
 800a2e4:	f7f6 fba8 	bl	8000a38 <__aeabi_d2iz>
 800a2e8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2ea:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a2ee:	f10b 0b01 	add.w	fp, fp, #1
 800a2f2:	f10a 0a18 	add.w	sl, sl, #24
 800a2f6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a2fa:	e733      	b.n	800a164 <__kernel_rem_pio2+0x298>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f6 fb9a 	bl	8000a38 <__aeabi_d2iz>
 800a304:	ab0c      	add	r3, sp, #48	@ 0x30
 800a306:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a30a:	e72b      	b.n	800a164 <__kernel_rem_pio2+0x298>
 800a30c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a312:	f7f6 f877 	bl	8000404 <__aeabi_i2d>
 800a316:	4632      	mov	r2, r6
 800a318:	463b      	mov	r3, r7
 800a31a:	f7f6 f8dd 	bl	80004d8 <__aeabi_dmul>
 800a31e:	464a      	mov	r2, r9
 800a320:	e868 0102 	strd	r0, r1, [r8], #-8
 800a324:	4653      	mov	r3, sl
 800a326:	4630      	mov	r0, r6
 800a328:	4639      	mov	r1, r7
 800a32a:	f7f6 f8d5 	bl	80004d8 <__aeabi_dmul>
 800a32e:	3d01      	subs	r5, #1
 800a330:	4606      	mov	r6, r0
 800a332:	460f      	mov	r7, r1
 800a334:	e727      	b.n	800a186 <__kernel_rem_pio2+0x2ba>
 800a336:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a33a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a33e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a342:	f8cd c018 	str.w	ip, [sp, #24]
 800a346:	f7f6 f8c7 	bl	80004d8 <__aeabi_dmul>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4648      	mov	r0, r9
 800a350:	4651      	mov	r1, sl
 800a352:	f7f5 ff0b 	bl	800016c <__adddf3>
 800a356:	4681      	mov	r9, r0
 800a358:	468a      	mov	sl, r1
 800a35a:	3701      	adds	r7, #1
 800a35c:	9b02      	ldr	r3, [sp, #8]
 800a35e:	429f      	cmp	r7, r3
 800a360:	dc01      	bgt.n	800a366 <__kernel_rem_pio2+0x49a>
 800a362:	42be      	cmp	r6, r7
 800a364:	dae7      	bge.n	800a336 <__kernel_rem_pio2+0x46a>
 800a366:	ab48      	add	r3, sp, #288	@ 0x120
 800a368:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a36c:	e9c6 9a00 	strd	r9, sl, [r6]
 800a370:	3d01      	subs	r5, #1
 800a372:	e70c      	b.n	800a18e <__kernel_rem_pio2+0x2c2>
 800a374:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a376:	2b02      	cmp	r3, #2
 800a378:	dc09      	bgt.n	800a38e <__kernel_rem_pio2+0x4c2>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dc2c      	bgt.n	800a3d8 <__kernel_rem_pio2+0x50c>
 800a37e:	d04e      	beq.n	800a41e <__kernel_rem_pio2+0x552>
 800a380:	9b05      	ldr	r3, [sp, #20]
 800a382:	f003 0007 	and.w	r0, r3, #7
 800a386:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a390:	2b03      	cmp	r3, #3
 800a392:	d1f5      	bne.n	800a380 <__kernel_rem_pio2+0x4b4>
 800a394:	ab48      	add	r3, sp, #288	@ 0x120
 800a396:	441c      	add	r4, r3
 800a398:	4625      	mov	r5, r4
 800a39a:	46da      	mov	sl, fp
 800a39c:	f1ba 0f00 	cmp.w	sl, #0
 800a3a0:	dc63      	bgt.n	800a46a <__kernel_rem_pio2+0x59e>
 800a3a2:	4625      	mov	r5, r4
 800a3a4:	46da      	mov	sl, fp
 800a3a6:	f1ba 0f01 	cmp.w	sl, #1
 800a3aa:	dc7b      	bgt.n	800a4a4 <__kernel_rem_pio2+0x5d8>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	f1bb 0f01 	cmp.w	fp, #1
 800a3b4:	f300 8093 	bgt.w	800a4de <__kernel_rem_pio2+0x612>
 800a3b8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a3bc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f040 8092 	bne.w	800a4ec <__kernel_rem_pio2+0x620>
 800a3c8:	9b04      	ldr	r3, [sp, #16]
 800a3ca:	e9c3 7800 	strd	r7, r8, [r3]
 800a3ce:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a3d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a3d6:	e7d3      	b.n	800a380 <__kernel_rem_pio2+0x4b4>
 800a3d8:	465d      	mov	r5, fp
 800a3da:	2000      	movs	r0, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	ab48      	add	r3, sp, #288	@ 0x120
 800a3e0:	441c      	add	r4, r3
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	da32      	bge.n	800a44c <__kernel_rem_pio2+0x580>
 800a3e6:	9b00      	ldr	r3, [sp, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d035      	beq.n	800a458 <__kernel_rem_pio2+0x58c>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3f2:	9c04      	ldr	r4, [sp, #16]
 800a3f4:	2501      	movs	r5, #1
 800a3f6:	e9c4 2300 	strd	r2, r3, [r4]
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a402:	f7f5 feb1 	bl	8000168 <__aeabi_dsub>
 800a406:	ac48      	add	r4, sp, #288	@ 0x120
 800a408:	45ab      	cmp	fp, r5
 800a40a:	da28      	bge.n	800a45e <__kernel_rem_pio2+0x592>
 800a40c:	9b00      	ldr	r3, [sp, #0]
 800a40e:	b113      	cbz	r3, 800a416 <__kernel_rem_pio2+0x54a>
 800a410:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a414:	4619      	mov	r1, r3
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a41c:	e7b0      	b.n	800a380 <__kernel_rem_pio2+0x4b4>
 800a41e:	2000      	movs	r0, #0
 800a420:	2100      	movs	r1, #0
 800a422:	ab48      	add	r3, sp, #288	@ 0x120
 800a424:	441c      	add	r4, r3
 800a426:	f1bb 0f00 	cmp.w	fp, #0
 800a42a:	da08      	bge.n	800a43e <__kernel_rem_pio2+0x572>
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	b113      	cbz	r3, 800a436 <__kernel_rem_pio2+0x56a>
 800a430:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a434:	4619      	mov	r1, r3
 800a436:	9b04      	ldr	r3, [sp, #16]
 800a438:	e9c3 0100 	strd	r0, r1, [r3]
 800a43c:	e7a0      	b.n	800a380 <__kernel_rem_pio2+0x4b4>
 800a43e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a442:	f7f5 fe93 	bl	800016c <__adddf3>
 800a446:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a44a:	e7ec      	b.n	800a426 <__kernel_rem_pio2+0x55a>
 800a44c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a450:	f7f5 fe8c 	bl	800016c <__adddf3>
 800a454:	3d01      	subs	r5, #1
 800a456:	e7c4      	b.n	800a3e2 <__kernel_rem_pio2+0x516>
 800a458:	4602      	mov	r2, r0
 800a45a:	460b      	mov	r3, r1
 800a45c:	e7c9      	b.n	800a3f2 <__kernel_rem_pio2+0x526>
 800a45e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a462:	f7f5 fe83 	bl	800016c <__adddf3>
 800a466:	3501      	adds	r5, #1
 800a468:	e7ce      	b.n	800a408 <__kernel_rem_pio2+0x53c>
 800a46a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a46e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a47a:	f7f5 fe77 	bl	800016c <__adddf3>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f5 fe6d 	bl	8000168 <__aeabi_dsub>
 800a48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a492:	f7f5 fe6b 	bl	800016c <__adddf3>
 800a496:	e865 0102 	strd	r0, r1, [r5], #-8
 800a49a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a49e:	e9c5 6700 	strd	r6, r7, [r5]
 800a4a2:	e77b      	b.n	800a39c <__kernel_rem_pio2+0x4d0>
 800a4a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4a8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4b4:	f7f5 fe5a 	bl	800016c <__adddf3>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	f7f5 fe50 	bl	8000168 <__aeabi_dsub>
 800a4c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4cc:	f7f5 fe4e 	bl	800016c <__adddf3>
 800a4d0:	e865 0102 	strd	r0, r1, [r5], #-8
 800a4d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4d8:	e9c5 6700 	strd	r6, r7, [r5]
 800a4dc:	e763      	b.n	800a3a6 <__kernel_rem_pio2+0x4da>
 800a4de:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a4e2:	f7f5 fe43 	bl	800016c <__adddf3>
 800a4e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4ea:	e761      	b.n	800a3b0 <__kernel_rem_pio2+0x4e4>
 800a4ec:	9b04      	ldr	r3, [sp, #16]
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a4f4:	601f      	str	r7, [r3, #0]
 800a4f6:	605c      	str	r4, [r3, #4]
 800a4f8:	609d      	str	r5, [r3, #8]
 800a4fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a4fe:	60d3      	str	r3, [r2, #12]
 800a500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a504:	6110      	str	r0, [r2, #16]
 800a506:	6153      	str	r3, [r2, #20]
 800a508:	e73a      	b.n	800a380 <__kernel_rem_pio2+0x4b4>
 800a50a:	bf00      	nop
 800a50c:	41700000 	.word	0x41700000
 800a510:	3e700000 	.word	0x3e700000
 800a514:	00000000 	.word	0x00000000

0800a518 <scalbn>:
 800a518:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a51c:	4616      	mov	r6, r2
 800a51e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a522:	4683      	mov	fp, r0
 800a524:	468c      	mov	ip, r1
 800a526:	460b      	mov	r3, r1
 800a528:	b982      	cbnz	r2, 800a54c <scalbn+0x34>
 800a52a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a52e:	4303      	orrs	r3, r0
 800a530:	d039      	beq.n	800a5a6 <scalbn+0x8e>
 800a532:	4b2f      	ldr	r3, [pc, #188]	@ (800a5f0 <scalbn+0xd8>)
 800a534:	2200      	movs	r2, #0
 800a536:	f7f5 ffcf 	bl	80004d8 <__aeabi_dmul>
 800a53a:	4b2e      	ldr	r3, [pc, #184]	@ (800a5f4 <scalbn+0xdc>)
 800a53c:	4683      	mov	fp, r0
 800a53e:	429e      	cmp	r6, r3
 800a540:	468c      	mov	ip, r1
 800a542:	da0d      	bge.n	800a560 <scalbn+0x48>
 800a544:	a326      	add	r3, pc, #152	@ (adr r3, 800a5e0 <scalbn+0xc8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	e01b      	b.n	800a584 <scalbn+0x6c>
 800a54c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a550:	42ba      	cmp	r2, r7
 800a552:	d109      	bne.n	800a568 <scalbn+0x50>
 800a554:	4602      	mov	r2, r0
 800a556:	f7f5 fe09 	bl	800016c <__adddf3>
 800a55a:	4683      	mov	fp, r0
 800a55c:	468c      	mov	ip, r1
 800a55e:	e022      	b.n	800a5a6 <scalbn+0x8e>
 800a560:	460b      	mov	r3, r1
 800a562:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a566:	3a36      	subs	r2, #54	@ 0x36
 800a568:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a56c:	428e      	cmp	r6, r1
 800a56e:	dd0c      	ble.n	800a58a <scalbn+0x72>
 800a570:	a31d      	add	r3, pc, #116	@ (adr r3, 800a5e8 <scalbn+0xd0>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	461c      	mov	r4, r3
 800a578:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a57c:	f361 74df 	bfi	r4, r1, #31, #1
 800a580:	4621      	mov	r1, r4
 800a582:	481d      	ldr	r0, [pc, #116]	@ (800a5f8 <scalbn+0xe0>)
 800a584:	f7f5 ffa8 	bl	80004d8 <__aeabi_dmul>
 800a588:	e7e7      	b.n	800a55a <scalbn+0x42>
 800a58a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a58e:	4432      	add	r2, r6
 800a590:	428a      	cmp	r2, r1
 800a592:	dced      	bgt.n	800a570 <scalbn+0x58>
 800a594:	2a00      	cmp	r2, #0
 800a596:	dd0a      	ble.n	800a5ae <scalbn+0x96>
 800a598:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a59c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a5a0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5a4:	46ac      	mov	ip, r5
 800a5a6:	4658      	mov	r0, fp
 800a5a8:	4661      	mov	r1, ip
 800a5aa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a5ae:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a5b2:	da09      	bge.n	800a5c8 <scalbn+0xb0>
 800a5b4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a5b8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a5bc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a5c0:	480e      	ldr	r0, [pc, #56]	@ (800a5fc <scalbn+0xe4>)
 800a5c2:	f041 011f 	orr.w	r1, r1, #31
 800a5c6:	e7bd      	b.n	800a544 <scalbn+0x2c>
 800a5c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a5cc:	3236      	adds	r2, #54	@ 0x36
 800a5ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a5d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a5d6:	4658      	mov	r0, fp
 800a5d8:	4629      	mov	r1, r5
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <scalbn+0xe8>)
 800a5de:	e7d1      	b.n	800a584 <scalbn+0x6c>
 800a5e0:	c2f8f359 	.word	0xc2f8f359
 800a5e4:	01a56e1f 	.word	0x01a56e1f
 800a5e8:	8800759c 	.word	0x8800759c
 800a5ec:	7e37e43c 	.word	0x7e37e43c
 800a5f0:	43500000 	.word	0x43500000
 800a5f4:	ffff3cb0 	.word	0xffff3cb0
 800a5f8:	8800759c 	.word	0x8800759c
 800a5fc:	c2f8f359 	.word	0xc2f8f359
 800a600:	3c900000 	.word	0x3c900000
 800a604:	00000000 	.word	0x00000000

0800a608 <floor>:
 800a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a610:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a614:	2e13      	cmp	r6, #19
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	460c      	mov	r4, r1
 800a61c:	4605      	mov	r5, r0
 800a61e:	4680      	mov	r8, r0
 800a620:	dc35      	bgt.n	800a68e <floor+0x86>
 800a622:	2e00      	cmp	r6, #0
 800a624:	da17      	bge.n	800a656 <floor+0x4e>
 800a626:	a334      	add	r3, pc, #208	@ (adr r3, 800a6f8 <floor+0xf0>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	f7f5 fd9e 	bl	800016c <__adddf3>
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	f7f6 f9e0 	bl	80009f8 <__aeabi_dcmpgt>
 800a638:	b150      	cbz	r0, 800a650 <floor+0x48>
 800a63a:	2c00      	cmp	r4, #0
 800a63c:	da57      	bge.n	800a6ee <floor+0xe6>
 800a63e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a642:	432c      	orrs	r4, r5
 800a644:	2500      	movs	r5, #0
 800a646:	42ac      	cmp	r4, r5
 800a648:	4c2d      	ldr	r4, [pc, #180]	@ (800a700 <floor+0xf8>)
 800a64a:	bf08      	it	eq
 800a64c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a650:	4623      	mov	r3, r4
 800a652:	462a      	mov	r2, r5
 800a654:	e024      	b.n	800a6a0 <floor+0x98>
 800a656:	4f2b      	ldr	r7, [pc, #172]	@ (800a704 <floor+0xfc>)
 800a658:	4137      	asrs	r7, r6
 800a65a:	ea01 0c07 	and.w	ip, r1, r7
 800a65e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a662:	d01d      	beq.n	800a6a0 <floor+0x98>
 800a664:	a324      	add	r3, pc, #144	@ (adr r3, 800a6f8 <floor+0xf0>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f7f5 fd7f 	bl	800016c <__adddf3>
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	f7f6 f9c1 	bl	80009f8 <__aeabi_dcmpgt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d0ea      	beq.n	800a650 <floor+0x48>
 800a67a:	2c00      	cmp	r4, #0
 800a67c:	bfbe      	ittt	lt
 800a67e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a682:	4133      	asrlt	r3, r6
 800a684:	18e4      	addlt	r4, r4, r3
 800a686:	2500      	movs	r5, #0
 800a688:	ea24 0407 	bic.w	r4, r4, r7
 800a68c:	e7e0      	b.n	800a650 <floor+0x48>
 800a68e:	2e33      	cmp	r6, #51	@ 0x33
 800a690:	dd0a      	ble.n	800a6a8 <floor+0xa0>
 800a692:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a696:	d103      	bne.n	800a6a0 <floor+0x98>
 800a698:	f7f5 fd68 	bl	800016c <__adddf3>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a8:	f04f 3cff 	mov.w	ip, #4294967295
 800a6ac:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a6b0:	fa2c f707 	lsr.w	r7, ip, r7
 800a6b4:	4207      	tst	r7, r0
 800a6b6:	d0f3      	beq.n	800a6a0 <floor+0x98>
 800a6b8:	a30f      	add	r3, pc, #60	@ (adr r3, 800a6f8 <floor+0xf0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fd55 	bl	800016c <__adddf3>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f7f6 f997 	bl	80009f8 <__aeabi_dcmpgt>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d0c0      	beq.n	800a650 <floor+0x48>
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	da0a      	bge.n	800a6e8 <floor+0xe0>
 800a6d2:	2e14      	cmp	r6, #20
 800a6d4:	d101      	bne.n	800a6da <floor+0xd2>
 800a6d6:	3401      	adds	r4, #1
 800a6d8:	e006      	b.n	800a6e8 <floor+0xe0>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a6e0:	40b3      	lsls	r3, r6
 800a6e2:	441d      	add	r5, r3
 800a6e4:	4545      	cmp	r5, r8
 800a6e6:	d3f6      	bcc.n	800a6d6 <floor+0xce>
 800a6e8:	ea25 0507 	bic.w	r5, r5, r7
 800a6ec:	e7b0      	b.n	800a650 <floor+0x48>
 800a6ee:	2500      	movs	r5, #0
 800a6f0:	462c      	mov	r4, r5
 800a6f2:	e7ad      	b.n	800a650 <floor+0x48>
 800a6f4:	f3af 8000 	nop.w
 800a6f8:	8800759c 	.word	0x8800759c
 800a6fc:	7e37e43c 	.word	0x7e37e43c
 800a700:	bff00000 	.word	0xbff00000
 800a704:	000fffff 	.word	0x000fffff

0800a708 <_init>:
 800a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a70a:	bf00      	nop
 800a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a70e:	bc08      	pop	{r3}
 800a710:	469e      	mov	lr, r3
 800a712:	4770      	bx	lr

0800a714 <_fini>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	bf00      	nop
 800a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71a:	bc08      	pop	{r3}
 800a71c:	469e      	mov	lr, r3
 800a71e:	4770      	bx	lr
